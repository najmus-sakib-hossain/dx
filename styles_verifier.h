#ifndef STYLES_VERIFIER_H
#define STYLES_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef STYLES_READER_H
#include "styles_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int MyGame_Sample_Property_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Sample_StaticRule_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Sample_DynamicProperty_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Sample_DynamicRule_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Sample_Styles_verify_table(flatcc_table_verifier_descriptor_t *td);

static int MyGame_Sample_Property_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* key */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* value */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Sample_Property_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_Property_identifier, &MyGame_Sample_Property_verify_table);
}

static inline int MyGame_Sample_Property_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_Property_identifier, &MyGame_Sample_Property_verify_table);
}

static inline int MyGame_Sample_Property_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_Property_type_identifier, &MyGame_Sample_Property_verify_table);
}

static inline int MyGame_Sample_Property_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_Property_type_identifier, &MyGame_Sample_Property_verify_table);
}

static inline int MyGame_Sample_Property_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Sample_Property_verify_table);
}

static inline int MyGame_Sample_Property_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Sample_Property_verify_table);
}

static inline int MyGame_Sample_Property_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Sample_Property_verify_table);
}

static inline int MyGame_Sample_Property_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Sample_Property_verify_table);
}

static int MyGame_Sample_StaticRule_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &MyGame_Sample_Property_verify_table) /* properties */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Sample_StaticRule_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_StaticRule_identifier, &MyGame_Sample_StaticRule_verify_table);
}

static inline int MyGame_Sample_StaticRule_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_StaticRule_identifier, &MyGame_Sample_StaticRule_verify_table);
}

static inline int MyGame_Sample_StaticRule_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_StaticRule_type_identifier, &MyGame_Sample_StaticRule_verify_table);
}

static inline int MyGame_Sample_StaticRule_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_StaticRule_type_identifier, &MyGame_Sample_StaticRule_verify_table);
}

static inline int MyGame_Sample_StaticRule_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Sample_StaticRule_verify_table);
}

static inline int MyGame_Sample_StaticRule_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Sample_StaticRule_verify_table);
}

static inline int MyGame_Sample_StaticRule_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Sample_StaticRule_verify_table);
}

static inline int MyGame_Sample_StaticRule_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Sample_StaticRule_verify_table);
}

static int MyGame_Sample_DynamicProperty_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &MyGame_Sample_Property_verify_table) /* properties */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Sample_DynamicProperty_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_DynamicProperty_identifier, &MyGame_Sample_DynamicProperty_verify_table);
}

static inline int MyGame_Sample_DynamicProperty_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_DynamicProperty_identifier, &MyGame_Sample_DynamicProperty_verify_table);
}

static inline int MyGame_Sample_DynamicProperty_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_DynamicProperty_type_identifier, &MyGame_Sample_DynamicProperty_verify_table);
}

static inline int MyGame_Sample_DynamicProperty_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_DynamicProperty_type_identifier, &MyGame_Sample_DynamicProperty_verify_table);
}

static inline int MyGame_Sample_DynamicProperty_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Sample_DynamicProperty_verify_table);
}

static inline int MyGame_Sample_DynamicProperty_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Sample_DynamicProperty_verify_table);
}

static inline int MyGame_Sample_DynamicProperty_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Sample_DynamicProperty_verify_table);
}

static inline int MyGame_Sample_DynamicProperty_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Sample_DynamicProperty_verify_table);
}

static int MyGame_Sample_DynamicRule_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* prefix */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 1, 0) /* values */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 2, 0, &MyGame_Sample_DynamicProperty_verify_table) /* properties */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Sample_DynamicRule_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_DynamicRule_identifier, &MyGame_Sample_DynamicRule_verify_table);
}

static inline int MyGame_Sample_DynamicRule_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_DynamicRule_identifier, &MyGame_Sample_DynamicRule_verify_table);
}

static inline int MyGame_Sample_DynamicRule_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_DynamicRule_type_identifier, &MyGame_Sample_DynamicRule_verify_table);
}

static inline int MyGame_Sample_DynamicRule_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_DynamicRule_type_identifier, &MyGame_Sample_DynamicRule_verify_table);
}

static inline int MyGame_Sample_DynamicRule_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Sample_DynamicRule_verify_table);
}

static inline int MyGame_Sample_DynamicRule_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Sample_DynamicRule_verify_table);
}

static inline int MyGame_Sample_DynamicRule_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Sample_DynamicRule_verify_table);
}

static inline int MyGame_Sample_DynamicRule_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Sample_DynamicRule_verify_table);
}

static int MyGame_Sample_Styles_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &MyGame_Sample_StaticRule_verify_table) /* static_rules */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &MyGame_Sample_DynamicRule_verify_table) /* dynamic_rules */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Sample_Styles_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_Styles_identifier, &MyGame_Sample_Styles_verify_table);
}

static inline int MyGame_Sample_Styles_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_Styles_identifier, &MyGame_Sample_Styles_verify_table);
}

static inline int MyGame_Sample_Styles_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Sample_Styles_type_identifier, &MyGame_Sample_Styles_verify_table);
}

static inline int MyGame_Sample_Styles_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Sample_Styles_type_identifier, &MyGame_Sample_Styles_verify_table);
}

static inline int MyGame_Sample_Styles_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Sample_Styles_verify_table);
}

static inline int MyGame_Sample_Styles_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Sample_Styles_verify_table);
}

static inline int MyGame_Sample_Styles_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Sample_Styles_verify_table);
}

static inline int MyGame_Sample_Styles_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Sample_Styles_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* STYLES_VERIFIER_H */
