#ifndef STYLES_BUILDER_H
#define STYLES_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef STYLES_READER_H
#include "styles_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

static const flatbuffers_voffset_t __MyGame_Sample_Property_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Sample_Property_ref_t;
static MyGame_Sample_Property_ref_t MyGame_Sample_Property_clone(flatbuffers_builder_t *B, MyGame_Sample_Property_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Sample_Property, 2)

static const flatbuffers_voffset_t __MyGame_Sample_StaticRule_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Sample_StaticRule_ref_t;
static MyGame_Sample_StaticRule_ref_t MyGame_Sample_StaticRule_clone(flatbuffers_builder_t *B, MyGame_Sample_StaticRule_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Sample_StaticRule, 2)

static const flatbuffers_voffset_t __MyGame_Sample_DynamicProperty_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Sample_DynamicProperty_ref_t;
static MyGame_Sample_DynamicProperty_ref_t MyGame_Sample_DynamicProperty_clone(flatbuffers_builder_t *B, MyGame_Sample_DynamicProperty_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Sample_DynamicProperty, 2)

static const flatbuffers_voffset_t __MyGame_Sample_DynamicRule_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Sample_DynamicRule_ref_t;
static MyGame_Sample_DynamicRule_ref_t MyGame_Sample_DynamicRule_clone(flatbuffers_builder_t *B, MyGame_Sample_DynamicRule_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Sample_DynamicRule, 3)

static const flatbuffers_voffset_t __MyGame_Sample_Styles_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Sample_Styles_ref_t;
static MyGame_Sample_Styles_ref_t MyGame_Sample_Styles_clone(flatbuffers_builder_t *B, MyGame_Sample_Styles_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Sample_Styles, 2)

#define __MyGame_Sample_Property_formal_args , flatbuffers_string_ref_t v0, flatbuffers_string_ref_t v1
#define __MyGame_Sample_Property_call_args , v0, v1
static inline MyGame_Sample_Property_ref_t MyGame_Sample_Property_create(flatbuffers_builder_t *B __MyGame_Sample_Property_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Sample_Property, MyGame_Sample_Property_file_identifier, MyGame_Sample_Property_type_identifier)

#define __MyGame_Sample_StaticRule_formal_args , flatbuffers_string_ref_t v0, MyGame_Sample_Property_vec_ref_t v1
#define __MyGame_Sample_StaticRule_call_args , v0, v1
static inline MyGame_Sample_StaticRule_ref_t MyGame_Sample_StaticRule_create(flatbuffers_builder_t *B __MyGame_Sample_StaticRule_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Sample_StaticRule, MyGame_Sample_StaticRule_file_identifier, MyGame_Sample_StaticRule_type_identifier)

#define __MyGame_Sample_DynamicProperty_formal_args , flatbuffers_string_ref_t v0, MyGame_Sample_Property_vec_ref_t v1
#define __MyGame_Sample_DynamicProperty_call_args , v0, v1
static inline MyGame_Sample_DynamicProperty_ref_t MyGame_Sample_DynamicProperty_create(flatbuffers_builder_t *B __MyGame_Sample_DynamicProperty_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Sample_DynamicProperty, MyGame_Sample_DynamicProperty_file_identifier, MyGame_Sample_DynamicProperty_type_identifier)

#define __MyGame_Sample_DynamicRule_formal_args , flatbuffers_string_ref_t v0, flatbuffers_string_vec_ref_t v1, MyGame_Sample_DynamicProperty_vec_ref_t v2
#define __MyGame_Sample_DynamicRule_call_args , v0, v1, v2
static inline MyGame_Sample_DynamicRule_ref_t MyGame_Sample_DynamicRule_create(flatbuffers_builder_t *B __MyGame_Sample_DynamicRule_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Sample_DynamicRule, MyGame_Sample_DynamicRule_file_identifier, MyGame_Sample_DynamicRule_type_identifier)

#define __MyGame_Sample_Styles_formal_args , MyGame_Sample_StaticRule_vec_ref_t v0, MyGame_Sample_DynamicRule_vec_ref_t v1
#define __MyGame_Sample_Styles_call_args , v0, v1
static inline MyGame_Sample_Styles_ref_t MyGame_Sample_Styles_create(flatbuffers_builder_t *B __MyGame_Sample_Styles_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Sample_Styles, MyGame_Sample_Styles_file_identifier, MyGame_Sample_Styles_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Sample_Property_key, MyGame_Sample_Property)
__flatbuffers_build_string_field(1, flatbuffers_, MyGame_Sample_Property_value, MyGame_Sample_Property)

static inline MyGame_Sample_Property_ref_t MyGame_Sample_Property_create(flatbuffers_builder_t *B __MyGame_Sample_Property_formal_args)
{
    if (MyGame_Sample_Property_start(B)
        || MyGame_Sample_Property_key_add(B, v0)
        || MyGame_Sample_Property_value_add(B, v1)) {
        return 0;
    }
    return MyGame_Sample_Property_end(B);
}

static MyGame_Sample_Property_ref_t MyGame_Sample_Property_clone(flatbuffers_builder_t *B, MyGame_Sample_Property_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Sample_Property_start(B)
        || MyGame_Sample_Property_key_pick(B, t)
        || MyGame_Sample_Property_value_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Sample_Property_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Sample_StaticRule_name, MyGame_Sample_StaticRule)
__flatbuffers_build_table_vector_field(1, flatbuffers_, MyGame_Sample_StaticRule_properties, MyGame_Sample_Property, MyGame_Sample_StaticRule)

static inline MyGame_Sample_StaticRule_ref_t MyGame_Sample_StaticRule_create(flatbuffers_builder_t *B __MyGame_Sample_StaticRule_formal_args)
{
    if (MyGame_Sample_StaticRule_start(B)
        || MyGame_Sample_StaticRule_name_add(B, v0)
        || MyGame_Sample_StaticRule_properties_add(B, v1)) {
        return 0;
    }
    return MyGame_Sample_StaticRule_end(B);
}

static MyGame_Sample_StaticRule_ref_t MyGame_Sample_StaticRule_clone(flatbuffers_builder_t *B, MyGame_Sample_StaticRule_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Sample_StaticRule_start(B)
        || MyGame_Sample_StaticRule_name_pick(B, t)
        || MyGame_Sample_StaticRule_properties_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Sample_StaticRule_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Sample_DynamicProperty_name, MyGame_Sample_DynamicProperty)
__flatbuffers_build_table_vector_field(1, flatbuffers_, MyGame_Sample_DynamicProperty_properties, MyGame_Sample_Property, MyGame_Sample_DynamicProperty)

static inline MyGame_Sample_DynamicProperty_ref_t MyGame_Sample_DynamicProperty_create(flatbuffers_builder_t *B __MyGame_Sample_DynamicProperty_formal_args)
{
    if (MyGame_Sample_DynamicProperty_start(B)
        || MyGame_Sample_DynamicProperty_name_add(B, v0)
        || MyGame_Sample_DynamicProperty_properties_add(B, v1)) {
        return 0;
    }
    return MyGame_Sample_DynamicProperty_end(B);
}

static MyGame_Sample_DynamicProperty_ref_t MyGame_Sample_DynamicProperty_clone(flatbuffers_builder_t *B, MyGame_Sample_DynamicProperty_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Sample_DynamicProperty_start(B)
        || MyGame_Sample_DynamicProperty_name_pick(B, t)
        || MyGame_Sample_DynamicProperty_properties_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Sample_DynamicProperty_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Sample_DynamicRule_prefix, MyGame_Sample_DynamicRule)
__flatbuffers_build_string_vector_field(1, flatbuffers_, MyGame_Sample_DynamicRule_values, MyGame_Sample_DynamicRule)
__flatbuffers_build_table_vector_field(2, flatbuffers_, MyGame_Sample_DynamicRule_properties, MyGame_Sample_DynamicProperty, MyGame_Sample_DynamicRule)

static inline MyGame_Sample_DynamicRule_ref_t MyGame_Sample_DynamicRule_create(flatbuffers_builder_t *B __MyGame_Sample_DynamicRule_formal_args)
{
    if (MyGame_Sample_DynamicRule_start(B)
        || MyGame_Sample_DynamicRule_prefix_add(B, v0)
        || MyGame_Sample_DynamicRule_values_add(B, v1)
        || MyGame_Sample_DynamicRule_properties_add(B, v2)) {
        return 0;
    }
    return MyGame_Sample_DynamicRule_end(B);
}

static MyGame_Sample_DynamicRule_ref_t MyGame_Sample_DynamicRule_clone(flatbuffers_builder_t *B, MyGame_Sample_DynamicRule_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Sample_DynamicRule_start(B)
        || MyGame_Sample_DynamicRule_prefix_pick(B, t)
        || MyGame_Sample_DynamicRule_values_pick(B, t)
        || MyGame_Sample_DynamicRule_properties_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Sample_DynamicRule_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, MyGame_Sample_Styles_static_rules, MyGame_Sample_StaticRule, MyGame_Sample_Styles)
__flatbuffers_build_table_vector_field(1, flatbuffers_, MyGame_Sample_Styles_dynamic_rules, MyGame_Sample_DynamicRule, MyGame_Sample_Styles)

static inline MyGame_Sample_Styles_ref_t MyGame_Sample_Styles_create(flatbuffers_builder_t *B __MyGame_Sample_Styles_formal_args)
{
    if (MyGame_Sample_Styles_start(B)
        || MyGame_Sample_Styles_static_rules_add(B, v0)
        || MyGame_Sample_Styles_dynamic_rules_add(B, v1)) {
        return 0;
    }
    return MyGame_Sample_Styles_end(B);
}

static MyGame_Sample_Styles_ref_t MyGame_Sample_Styles_clone(flatbuffers_builder_t *B, MyGame_Sample_Styles_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Sample_Styles_start(B)
        || MyGame_Sample_Styles_static_rules_pick(B, t)
        || MyGame_Sample_Styles_dynamic_rules_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Sample_Styles_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* STYLES_BUILDER_H */
