#ifndef DOUBLEVEC_TEST_BUILDER_H
#define DOUBLEVEC_TEST_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef DOUBLEVEC_TEST_READER_H
#include "doublevec_test_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

static const flatbuffers_voffset_t __DoubleVec_required[] = { 0 };
typedef flatbuffers_ref_t DoubleVec_ref_t;
static DoubleVec_ref_t DoubleVec_clone(flatbuffers_builder_t *B, DoubleVec_table_t t);
__flatbuffers_build_table(flatbuffers_, DoubleVec, 1)

#define __DoubleVec_formal_args , flatbuffers_double_vec_ref_t v0
#define __DoubleVec_call_args , v0
static inline DoubleVec_ref_t DoubleVec_create(flatbuffers_builder_t *B __DoubleVec_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, DoubleVec, DoubleVec_file_identifier, DoubleVec_type_identifier)

__flatbuffers_build_vector_field(0, flatbuffers_, DoubleVec_a, flatbuffers_double, double, DoubleVec)

static inline DoubleVec_ref_t DoubleVec_create(flatbuffers_builder_t *B __DoubleVec_formal_args)
{
    if (DoubleVec_start(B)
        || DoubleVec_a_add(B, v0)) {
        return 0;
    }
    return DoubleVec_end(B);
}

static DoubleVec_ref_t DoubleVec_clone(flatbuffers_builder_t *B, DoubleVec_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (DoubleVec_start(B)
        || DoubleVec_a_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, DoubleVec_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* DOUBLEVEC_TEST_BUILDER_H */
