#ifndef MONSTER_TEST_BUILDER_H
#define MONSTER_TEST_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef MONSTER_TEST_READER_H
#include "monster_test_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#ifndef INCLUDE_TEST1_BUILDER_H
#include "include_test1_builder.h"
#endif
#ifndef ATTRIBUTES_BUILDER_H
#include "attributes_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "MONS"
#undef flatbuffers_extension
#define flatbuffers_extension "mon"

#define __MyGame_Example2_foo_formal_args , MyGame_Example2_foo_enum_t v0
#define __MyGame_Example2_foo_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example2_foo, MyGame_Example2_foo_enum_t)
#define __MyGame_Example_neg_enum_formal_args , MyGame_Example_neg_enum_enum_t v0
#define __MyGame_Example_neg_enum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_neg_enum, MyGame_Example_neg_enum_enum_t)
#define __MyGame_Example_int_enum_formal_args , MyGame_Example_int_enum_enum_t v0
#define __MyGame_Example_int_enum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_int_enum, MyGame_Example_int_enum_enum_t)
#define __MyGame_Example_hex_enum_formal_args , MyGame_Example_hex_enum_enum_t v0
#define __MyGame_Example_hex_enum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_hex_enum, MyGame_Example_hex_enum_enum_t)
#define __MyGame_Example_Color_formal_args , MyGame_Example_Color_enum_t v0
#define __MyGame_Example_Color_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_Color, MyGame_Example_Color_enum_t)
#define __MyGame_Example_notemptyenum_formal_args , MyGame_Example_notemptyenum_enum_t v0
#define __MyGame_Example_notemptyenum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_notemptyenum, MyGame_Example_notemptyenum_enum_t)
#define __Fantasy_ReorderedEnum_formal_args , Fantasy_ReorderedEnum_enum_t v0
#define __Fantasy_ReorderedEnum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Fantasy_ReorderedEnum, Fantasy_ReorderedEnum_enum_t)
#define __Fantasy_ReorderedColor_formal_args , Fantasy_ReorderedColor_enum_t v0
#define __Fantasy_ReorderedColor_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Fantasy_ReorderedColor, Fantasy_ReorderedColor_enum_t)

#define __InGlobalNamespace_formal_args , int8_t v0
#define __InGlobalNamespace_call_args , v0
static inline InGlobalNamespace_t *InGlobalNamespace_assign(InGlobalNamespace_t *p, int8_t v0)
{ p->unused = v0;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_copy(InGlobalNamespace_t *p, const InGlobalNamespace_t *p2)
{ p->unused = p2->unused;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_assign_to_pe(InGlobalNamespace_t *p, int8_t v0)
{ p->unused = v0;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_copy_to_pe(InGlobalNamespace_t *p, const InGlobalNamespace_t *p2)
{ p->unused = p2->unused;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_assign_from_pe(InGlobalNamespace_t *p, int8_t v0)
{ p->unused = v0;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_copy_from_pe(InGlobalNamespace_t *p, const InGlobalNamespace_t *p2)
{ p->unused = p2->unused;
  return p; }
__flatbuffers_build_struct(flatbuffers_, InGlobalNamespace, 1, 1, InGlobalNamespace_file_identifier, InGlobalNamespace_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, InGlobalNamespace, InGlobalNamespace_t)

#define __MyGame_Example_Test_formal_args , int16_t v0, int8_t v1
#define __MyGame_Example_Test_call_args , v0, v1
static inline MyGame_Example_Test_t *MyGame_Example_Test_assign(MyGame_Example_Test_t *p, int16_t v0, int8_t v1)
{ p->a = v0; p->b = v1;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_copy(MyGame_Example_Test_t *p, const MyGame_Example_Test_t *p2)
{ p->a = p2->a; p->b = p2->b;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_assign_to_pe(MyGame_Example_Test_t *p, int16_t v0, int8_t v1)
{ flatbuffers_int16_assign_to_pe(&p->a, v0); p->b = v1;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_copy_to_pe(MyGame_Example_Test_t *p, const MyGame_Example_Test_t *p2)
{ flatbuffers_int16_copy_to_pe(&p->a, &p2->a); p->b = p2->b;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_assign_from_pe(MyGame_Example_Test_t *p, int16_t v0, int8_t v1)
{ flatbuffers_int16_assign_from_pe(&p->a, v0); p->b = v1;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_copy_from_pe(MyGame_Example_Test_t *p, const MyGame_Example_Test_t *p2)
{ flatbuffers_int16_copy_from_pe(&p->a, &p2->a); p->b = p2->b;
  return p; }
__flatbuffers_build_struct(flatbuffers_, MyGame_Example_Test, 4, 2, MyGame_Example_Test_file_identifier, MyGame_Example_Test_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MyGame_Example_Test, MyGame_Example_Test_t)

#define __MyGame_Example_Vec3_formal_args ,\
  float v0, float v1, float v2, double v3,\
  MyGame_Example_Color_enum_t v4, int16_t v5, int8_t v6
#define __MyGame_Example_Vec3_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_assign(MyGame_Example_Vec3_t *p,
  float v0, float v1, float v2, double v3,
  MyGame_Example_Color_enum_t v4, int16_t v5, int8_t v6)
{ p->x = v0; p->y = v1; p->z = v2; p->test1 = v3;
  p->test2 = v4; MyGame_Example_Test_assign(&p->test3,
  v5, v6);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_copy(MyGame_Example_Vec3_t *p, const MyGame_Example_Vec3_t *p2)
{ p->x = p2->x; p->y = p2->y; p->z = p2->z; p->test1 = p2->test1;
  p->test2 = p2->test2; MyGame_Example_Test_copy(&p->test3, &p2->test3);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_assign_to_pe(MyGame_Example_Vec3_t *p,
  float v0, float v1, float v2, double v3,
  MyGame_Example_Color_enum_t v4, int16_t v5, int8_t v6)
{ flatbuffers_float_assign_to_pe(&p->x, v0); flatbuffers_float_assign_to_pe(&p->y, v1); flatbuffers_float_assign_to_pe(&p->z, v2); flatbuffers_double_assign_to_pe(&p->test1, v3);
  p->test2 = v4; MyGame_Example_Test_assign_to_pe(&p->test3,
  v5, v6);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_copy_to_pe(MyGame_Example_Vec3_t *p, const MyGame_Example_Vec3_t *p2)
{ flatbuffers_float_copy_to_pe(&p->x, &p2->x); flatbuffers_float_copy_to_pe(&p->y, &p2->y); flatbuffers_float_copy_to_pe(&p->z, &p2->z); flatbuffers_double_copy_to_pe(&p->test1, &p2->test1);
  p->test2 = p2->test2; MyGame_Example_Test_copy_to_pe(&p->test3, &p2->test3);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_assign_from_pe(MyGame_Example_Vec3_t *p,
  float v0, float v1, float v2, double v3,
  MyGame_Example_Color_enum_t v4, int16_t v5, int8_t v6)
{ flatbuffers_float_assign_from_pe(&p->x, v0); flatbuffers_float_assign_from_pe(&p->y, v1); flatbuffers_float_assign_from_pe(&p->z, v2); flatbuffers_double_assign_from_pe(&p->test1, v3);
  p->test2 = v4; MyGame_Example_Test_assign_from_pe(&p->test3,
  v5, v6);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_copy_from_pe(MyGame_Example_Vec3_t *p, const MyGame_Example_Vec3_t *p2)
{ flatbuffers_float_copy_from_pe(&p->x, &p2->x); flatbuffers_float_copy_from_pe(&p->y, &p2->y); flatbuffers_float_copy_from_pe(&p->z, &p2->z); flatbuffers_double_copy_from_pe(&p->test1, &p2->test1);
  p->test2 = p2->test2; MyGame_Example_Test_copy_from_pe(&p->test3, &p2->test3);
  return p; }
__flatbuffers_build_struct(flatbuffers_, MyGame_Example_Vec3, 32, 16, MyGame_Example_Vec3_file_identifier, MyGame_Example_Vec3_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MyGame_Example_Vec3, MyGame_Example_Vec3_t)

#define __MyGame_Example_Ability_formal_args , uint32_t v0, uint32_t v1
#define __MyGame_Example_Ability_call_args , v0, v1
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_assign(MyGame_Example_Ability_t *p, uint32_t v0, uint32_t v1)
{ p->id = v0; p->distance = v1;
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_copy(MyGame_Example_Ability_t *p, const MyGame_Example_Ability_t *p2)
{ p->id = p2->id; p->distance = p2->distance;
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_assign_to_pe(MyGame_Example_Ability_t *p, uint32_t v0, uint32_t v1)
{ flatbuffers_uint32_assign_to_pe(&p->id, v0); flatbuffers_uint32_assign_to_pe(&p->distance, v1);
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_copy_to_pe(MyGame_Example_Ability_t *p, const MyGame_Example_Ability_t *p2)
{ flatbuffers_uint32_copy_to_pe(&p->id, &p2->id); flatbuffers_uint32_copy_to_pe(&p->distance, &p2->distance);
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_assign_from_pe(MyGame_Example_Ability_t *p, uint32_t v0, uint32_t v1)
{ flatbuffers_uint32_assign_from_pe(&p->id, v0); flatbuffers_uint32_assign_from_pe(&p->distance, v1);
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_copy_from_pe(MyGame_Example_Ability_t *p, const MyGame_Example_Ability_t *p2)
{ flatbuffers_uint32_copy_from_pe(&p->id, &p2->id); flatbuffers_uint32_copy_from_pe(&p->distance, &p2->distance);
  return p; }
__flatbuffers_build_struct(flatbuffers_, MyGame_Example_Ability, 8, 4, MyGame_Example_Ability_file_identifier, MyGame_Example_Ability_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MyGame_Example_Ability, MyGame_Example_Ability_t)

#define __MyGame_Example_FooBar_formal_args ,\
  const float v0[16], const int32_t v1[10], MyGame_Example_Color_enum_t v2[3], const MyGame_Example_Test_t v3[2], const char v4[5]
#define __MyGame_Example_FooBar_call_args ,\
  v0, v1, v2, v3, v4
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_assign(MyGame_Example_FooBar_t *p,
  const float v0[16], const int32_t v1[10], MyGame_Example_Color_enum_t v2[3], const MyGame_Example_Test_t v3[2], const char v4[5])
{ flatbuffers_float_array_copy(p->foo, v0, 16); flatbuffers_int32_array_copy(p->bar, v1, 10); MyGame_Example_Color_array_copy(p->col, v2, 3); MyGame_Example_Test_array_copy(p->tests, v3, 2);
  flatbuffers_char_array_copy(p->text, v4, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_copy(MyGame_Example_FooBar_t *p, const MyGame_Example_FooBar_t *p2)
{ flatbuffers_float_array_copy(p->foo, p2->foo, 16); flatbuffers_int32_array_copy(p->bar, p2->bar, 10); MyGame_Example_Color_array_copy(p->col, p2->col, 3); MyGame_Example_Test_array_copy(p->tests, p2->tests, 2);
  flatbuffers_char_array_copy(p->text, p2->text, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_assign_to_pe(MyGame_Example_FooBar_t *p,
  const float v0[16], const int32_t v1[10], MyGame_Example_Color_enum_t v2[3], const MyGame_Example_Test_t v3[2], const char v4[5])
{ flatbuffers_float_array_copy_to_pe(p->foo, v0, 16); flatbuffers_int32_array_copy_to_pe(p->bar, v1, 10); MyGame_Example_Color_array_copy_to_pe(p->col, v2, 3); MyGame_Example_Test_array_copy_to_pe(p->tests, v3, 2);
  flatbuffers_char_array_copy_to_pe(p->text, v4, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_copy_to_pe(MyGame_Example_FooBar_t *p, const MyGame_Example_FooBar_t *p2)
{ flatbuffers_float_array_copy_to_pe(p->foo, p2->foo, 16); flatbuffers_int32_array_copy_to_pe(p->bar, p2->bar, 10); MyGame_Example_Color_array_copy_to_pe(p->col, p2->col, 3); MyGame_Example_Test_array_copy_to_pe(p->tests, p2->tests, 2);
  flatbuffers_char_array_copy_to_pe(p->text, p2->text, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_assign_from_pe(MyGame_Example_FooBar_t *p,
  const float v0[16], const int32_t v1[10], MyGame_Example_Color_enum_t v2[3], const MyGame_Example_Test_t v3[2], const char v4[5])
{ flatbuffers_float_array_copy_from_pe(p->foo, v0, 16); flatbuffers_int32_array_copy_from_pe(p->bar, v1, 10); MyGame_Example_Color_array_copy_from_pe(p->col, v2, 3); MyGame_Example_Test_array_copy_from_pe(p->tests, v3, 2);
  flatbuffers_char_array_copy_from_pe(p->text, v4, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_copy_from_pe(MyGame_Example_FooBar_t *p, const MyGame_Example_FooBar_t *p2)
{ flatbuffers_float_array_copy_from_pe(p->foo, p2->foo, 16); flatbuffers_int32_array_copy_from_pe(p->bar, p2->bar, 10); MyGame_Example_Color_array_copy_from_pe(p->col, p2->col, 3); MyGame_Example_Test_array_copy_from_pe(p->tests, p2->tests, 2);
  flatbuffers_char_array_copy_from_pe(p->text, p2->text, 5);
  return p; }
__flatbuffers_build_struct(flatbuffers_, MyGame_Example_FooBar, 124, 4, MyGame_Example_FooBar_file_identifier, MyGame_Example_FooBar_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MyGame_Example_FooBar, MyGame_Example_FooBar_t)

#define __Fantasy_Rapunzel_formal_args , uint16_t v0
#define __Fantasy_Rapunzel_call_args , v0
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_assign(Fantasy_Rapunzel_t *p, uint16_t v0)
{ p->hair_length = v0; __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_copy(Fantasy_Rapunzel_t *p, const Fantasy_Rapunzel_t *p2)
{ p->hair_length = p2->hair_length; __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_assign_to_pe(Fantasy_Rapunzel_t *p, uint16_t v0)
{ flatbuffers_uint16_assign_to_pe(&p->hair_length, v0); __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_copy_to_pe(Fantasy_Rapunzel_t *p, const Fantasy_Rapunzel_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->hair_length, &p2->hair_length); __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_assign_from_pe(Fantasy_Rapunzel_t *p, uint16_t v0)
{ flatbuffers_uint16_assign_from_pe(&p->hair_length, v0); __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_copy_from_pe(Fantasy_Rapunzel_t *p, const Fantasy_Rapunzel_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->hair_length, &p2->hair_length); __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Fantasy_Rapunzel, 8, 4, Fantasy_Rapunzel_file_identifier, Fantasy_Rapunzel_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Fantasy_Rapunzel, Fantasy_Rapunzel_t)

#define __Fantasy_BookReader_formal_args , int32_t v0
#define __Fantasy_BookReader_call_args , v0
static inline Fantasy_BookReader_t *Fantasy_BookReader_assign(Fantasy_BookReader_t *p, int32_t v0)
{ p->books_read = v0;
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_copy(Fantasy_BookReader_t *p, const Fantasy_BookReader_t *p2)
{ p->books_read = p2->books_read;
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_assign_to_pe(Fantasy_BookReader_t *p, int32_t v0)
{ flatbuffers_int32_assign_to_pe(&p->books_read, v0);
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_copy_to_pe(Fantasy_BookReader_t *p, const Fantasy_BookReader_t *p2)
{ flatbuffers_int32_copy_to_pe(&p->books_read, &p2->books_read);
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_assign_from_pe(Fantasy_BookReader_t *p, int32_t v0)
{ flatbuffers_int32_assign_from_pe(&p->books_read, v0);
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_copy_from_pe(Fantasy_BookReader_t *p, const Fantasy_BookReader_t *p2)
{ flatbuffers_int32_copy_from_pe(&p->books_read, &p2->books_read);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Fantasy_BookReader, 4, 4, Fantasy_BookReader_file_identifier, Fantasy_BookReader_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Fantasy_BookReader, Fantasy_BookReader_t)

typedef flatbuffers_union_ref_t MyGame_Example_Foo_union_ref_t;
typedef flatbuffers_union_vec_ref_t MyGame_Example_Foo_union_vec_ref_t;
static MyGame_Example_Foo_union_ref_t MyGame_Example_Foo_clone(flatbuffers_builder_t *B, MyGame_Example_Foo_union_t t);
typedef flatbuffers_union_ref_t MyGame_Example2_SubSystem_SubSystemA_union_ref_t;
typedef flatbuffers_union_vec_ref_t MyGame_Example2_SubSystem_SubSystemA_union_vec_ref_t;
static MyGame_Example2_SubSystem_SubSystemA_union_ref_t MyGame_Example2_SubSystem_SubSystemA_clone(flatbuffers_builder_t *B, MyGame_Example2_SubSystem_SubSystemA_union_t t);
typedef flatbuffers_union_ref_t MyGame_Example2_SubSystem_SubSystemB_union_ref_t;
typedef flatbuffers_union_vec_ref_t MyGame_Example2_SubSystem_SubSystemB_union_vec_ref_t;
static MyGame_Example2_SubSystem_SubSystemB_union_ref_t MyGame_Example2_SubSystem_SubSystemB_clone(flatbuffers_builder_t *B, MyGame_Example2_SubSystem_SubSystemB_union_t t);
typedef flatbuffers_union_ref_t MyGame_Example_Any_union_ref_t;
typedef flatbuffers_union_vec_ref_t MyGame_Example_Any_union_vec_ref_t;
static MyGame_Example_Any_union_ref_t MyGame_Example_Any_clone(flatbuffers_builder_t *B, MyGame_Example_Any_union_t t);
typedef flatbuffers_union_ref_t Fantasy_Character_union_ref_t;
typedef flatbuffers_union_vec_ref_t Fantasy_Character_union_vec_ref_t;
static Fantasy_Character_union_ref_t Fantasy_Character_clone(flatbuffers_builder_t *B, Fantasy_Character_union_t t);

static const flatbuffers_voffset_t __MyGame_InParentNamespace_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_InParentNamespace_ref_t;
static MyGame_InParentNamespace_ref_t MyGame_InParentNamespace_clone(flatbuffers_builder_t *B, MyGame_InParentNamespace_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_InParentNamespace, 0)

static const flatbuffers_voffset_t __MyGame_Example2_Monster_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example2_Monster_ref_t;
static MyGame_Example2_Monster_ref_t MyGame_Example2_Monster_clone(flatbuffers_builder_t *B, MyGame_Example2_Monster_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example2_Monster, 0)

static const flatbuffers_voffset_t __MyGame_Example2_Strange_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example2_Strange_ref_t;
static MyGame_Example2_Strange_ref_t MyGame_Example2_Strange_clone(flatbuffers_builder_t *B, MyGame_Example2_Strange_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example2_Strange, 0)

static const flatbuffers_voffset_t __MyGame_Example2_S2_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example2_S2_ref_t;
static MyGame_Example2_S2_ref_t MyGame_Example2_S2_clone(flatbuffers_builder_t *B, MyGame_Example2_S2_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example2_S2, 5)

static const flatbuffers_voffset_t __MyGame_Example_TestSimpleTableWithEnum_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestSimpleTableWithEnum_ref_t;
static MyGame_Example_TestSimpleTableWithEnum_ref_t MyGame_Example_TestSimpleTableWithEnum_clone(flatbuffers_builder_t *B, MyGame_Example_TestSimpleTableWithEnum_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestSimpleTableWithEnum, 4)

static const flatbuffers_voffset_t __MyGame_Example_TestInclude_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestInclude_ref_t;
static MyGame_Example_TestInclude_ref_t MyGame_Example_TestInclude_clone(flatbuffers_builder_t *B, MyGame_Example_TestInclude_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestInclude, 6)

static const flatbuffers_voffset_t __MyGame_Example_Stat_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_Stat_ref_t;
static MyGame_Example_Stat_ref_t MyGame_Example_Stat_clone(flatbuffers_builder_t *B, MyGame_Example_Stat_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_Stat, 3)

static const flatbuffers_voffset_t __MyGame_Example_Alt_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_Alt_ref_t;
static MyGame_Example_Alt_ref_t MyGame_Example_Alt_clone(flatbuffers_builder_t *B, MyGame_Example_Alt_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_Alt, 9)

static const flatbuffers_voffset_t __MyGame_Example_TestJSONPrefix_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestJSONPrefix_ref_t;
static MyGame_Example_TestJSONPrefix_ref_t MyGame_Example_TestJSONPrefix_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefix_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestJSONPrefix, 3)

static const flatbuffers_voffset_t __MyGame_Example_TestJSONPrefixParsing_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestJSONPrefixParsing_ref_t;
static MyGame_Example_TestJSONPrefixParsing_ref_t MyGame_Example_TestJSONPrefixParsing_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestJSONPrefixParsing, 9)

static const flatbuffers_voffset_t __MyGame_Example_TestJSONPrefixParsing2_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestJSONPrefixParsing2_ref_t;
static MyGame_Example_TestJSONPrefixParsing2_ref_t MyGame_Example_TestJSONPrefixParsing2_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing2_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestJSONPrefixParsing2, 2)

static const flatbuffers_voffset_t __MyGame_Example_TestJSONPrefixParsing3_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestJSONPrefixParsing3_ref_t;
static MyGame_Example_TestJSONPrefixParsing3_ref_t MyGame_Example_TestJSONPrefixParsing3_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing3_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestJSONPrefixParsing3, 2)

static const flatbuffers_voffset_t __MyGame_Example_TestBase64_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestBase64_ref_t;
static MyGame_Example_TestBase64_ref_t MyGame_Example_TestBase64_clone(flatbuffers_builder_t *B, MyGame_Example_TestBase64_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestBase64, 3)

static const flatbuffers_voffset_t __MyGame_Example_MultipleKeys_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_MultipleKeys_ref_t;
static MyGame_Example_MultipleKeys_ref_t MyGame_Example_MultipleKeys_clone(flatbuffers_builder_t *B, MyGame_Example_MultipleKeys_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_MultipleKeys, 3)

static const flatbuffers_voffset_t __MyGame_Example_Monster_required[] = { 3, 0 };
typedef flatbuffers_ref_t MyGame_Example_Monster_ref_t;
static MyGame_Example_Monster_ref_t MyGame_Example_Monster_clone(flatbuffers_builder_t *B, MyGame_Example_Monster_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_Monster, 36)

static const flatbuffers_voffset_t __MyGame_Example_TypeAliases_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TypeAliases_ref_t;
static MyGame_Example_TypeAliases_ref_t MyGame_Example_TypeAliases_clone(flatbuffers_builder_t *B, MyGame_Example_TypeAliases_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TypeAliases, 12)

static const flatbuffers_voffset_t __Fantasy_Attacker_required[] = { 0 };
typedef flatbuffers_ref_t Fantasy_Attacker_ref_t;
static Fantasy_Attacker_ref_t Fantasy_Attacker_clone(flatbuffers_builder_t *B, Fantasy_Attacker_table_t t);
__flatbuffers_build_table(flatbuffers_, Fantasy_Attacker, 1)

static const flatbuffers_voffset_t __Fantasy_Movie_required[] = { 0 };
typedef flatbuffers_ref_t Fantasy_Movie_ref_t;
static Fantasy_Movie_ref_t Fantasy_Movie_clone(flatbuffers_builder_t *B, Fantasy_Movie_table_t t);
__flatbuffers_build_table(flatbuffers_, Fantasy_Movie, 10)

#define __MyGame_InParentNamespace_formal_args 
#define __MyGame_InParentNamespace_call_args 
static inline MyGame_InParentNamespace_ref_t MyGame_InParentNamespace_create(flatbuffers_builder_t *B __MyGame_InParentNamespace_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_InParentNamespace, MyGame_InParentNamespace_file_identifier, MyGame_InParentNamespace_type_identifier)

#define __MyGame_Example2_Monster_formal_args 
#define __MyGame_Example2_Monster_call_args 
static inline MyGame_Example2_Monster_ref_t MyGame_Example2_Monster_create(flatbuffers_builder_t *B __MyGame_Example2_Monster_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example2_Monster, MyGame_Example2_Monster_file_identifier, MyGame_Example2_Monster_type_identifier)

#define __MyGame_Example2_Strange_formal_args 
#define __MyGame_Example2_Strange_call_args 
static inline MyGame_Example2_Strange_ref_t MyGame_Example2_Strange_create(flatbuffers_builder_t *B __MyGame_Example2_Strange_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example2_Strange, MyGame_Example2_Strange_file_identifier, MyGame_Example2_Strange_type_identifier)

#define __MyGame_Example2_S2_formal_args ,\
  int32_t v0, int32_t v1, int32_t v2, int32_t v3, int32_t v4
#define __MyGame_Example2_S2_call_args ,\
  v0, v1, v2, v3, v4
static inline MyGame_Example2_S2_ref_t MyGame_Example2_S2_create(flatbuffers_builder_t *B __MyGame_Example2_S2_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example2_S2, MyGame_Example2_S2_file_identifier, MyGame_Example2_S2_type_identifier)

#define __MyGame_Example_TestSimpleTableWithEnum_formal_args , MyGame_Example_Color_enum_t v0, MyGame_Example_Color_enum_t v1, uint8_t v2, uint8_t v3
#define __MyGame_Example_TestSimpleTableWithEnum_call_args , v0, v1, v2, v3
static inline MyGame_Example_TestSimpleTableWithEnum_ref_t MyGame_Example_TestSimpleTableWithEnum_create(flatbuffers_builder_t *B __MyGame_Example_TestSimpleTableWithEnum_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestSimpleTableWithEnum, MyGame_Example_TestSimpleTableWithEnum_file_identifier, MyGame_Example_TestSimpleTableWithEnum_type_identifier)

#define __MyGame_Example_TestInclude_formal_args ,\
  InGlobalNamespace_t *v0, MyGame_OtherNameSpace_FromInclude_enum_t v1, MyGame_OtherNameSpace_FromInclude_enum_t v2, int32_t v3, MyGame_OtherNameSpace_FromInclude_enum_t v4, int64_t v5
#define __MyGame_Example_TestInclude_call_args ,\
  v0, v1, v2, v3, v4, v5
static inline MyGame_Example_TestInclude_ref_t MyGame_Example_TestInclude_create(flatbuffers_builder_t *B __MyGame_Example_TestInclude_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestInclude, MyGame_Example_TestInclude_file_identifier, MyGame_Example_TestInclude_type_identifier)

#define __MyGame_Example_Stat_formal_args , flatbuffers_string_ref_t v0, int64_t v1, uint16_t v2
#define __MyGame_Example_Stat_call_args , v0, v1, v2
static inline MyGame_Example_Stat_ref_t MyGame_Example_Stat_create(flatbuffers_builder_t *B __MyGame_Example_Stat_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_Stat, MyGame_Example_Stat_file_identifier, MyGame_Example_Stat_type_identifier)

#define __MyGame_Example_Alt_formal_args ,\
  MyGame_Example_TestJSONPrefix_ref_t v0, Fantasy_Movie_ref_t v1, MyGame_Example_Any_union_vec_ref_t v3, MyGame_Example_MultipleKeys_vec_ref_t v4,\
  Fantasy_Rapunzel_vec_ref_t v5, flatbuffers_string_vec_ref_t v6, flatbuffers_float_vec_ref_t v7, MyGame_Example_FooBar_t *v8
#define __MyGame_Example_Alt_call_args ,\
  v0, v1, v3, v4,\
  v5, v6, v7, v8
static inline MyGame_Example_Alt_ref_t MyGame_Example_Alt_create(flatbuffers_builder_t *B __MyGame_Example_Alt_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_Alt, MyGame_Example_Alt_file_identifier, MyGame_Example_Alt_type_identifier)

#define __MyGame_Example_TestJSONPrefix_formal_args , MyGame_Example_TestJSONPrefixParsing_ref_t v0, MyGame_Example_TestJSONPrefixParsing2_ref_t v1, MyGame_Example_TestJSONPrefixParsing3_ref_t v2
#define __MyGame_Example_TestJSONPrefix_call_args , v0, v1, v2
static inline MyGame_Example_TestJSONPrefix_ref_t MyGame_Example_TestJSONPrefix_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefix_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestJSONPrefix, MyGame_Example_TestJSONPrefix_file_identifier, MyGame_Example_TestJSONPrefix_type_identifier)

#define __MyGame_Example_TestJSONPrefixParsing_formal_args ,\
  flatbuffers_string_ref_t v0, uint32_t v1, flatbuffers_string_ref_t v2, int64_t v3,\
  flatbuffers_string_ref_t v4, int64_t v5, uint32_t v6, int64_t v7, uint32_t v8
#define __MyGame_Example_TestJSONPrefixParsing_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7, v8
static inline MyGame_Example_TestJSONPrefixParsing_ref_t MyGame_Example_TestJSONPrefixParsing_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestJSONPrefixParsing, MyGame_Example_TestJSONPrefixParsing_file_identifier, MyGame_Example_TestJSONPrefixParsing_type_identifier)

#define __MyGame_Example_TestJSONPrefixParsing2_formal_args , int64_t v0, uint32_t v1
#define __MyGame_Example_TestJSONPrefixParsing2_call_args , v0, v1
static inline MyGame_Example_TestJSONPrefixParsing2_ref_t MyGame_Example_TestJSONPrefixParsing2_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing2_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestJSONPrefixParsing2, MyGame_Example_TestJSONPrefixParsing2_file_identifier, MyGame_Example_TestJSONPrefixParsing2_type_identifier)

#define __MyGame_Example_TestJSONPrefixParsing3_formal_args , int64_t v0, uint32_t v1
#define __MyGame_Example_TestJSONPrefixParsing3_call_args , v0, v1
static inline MyGame_Example_TestJSONPrefixParsing3_ref_t MyGame_Example_TestJSONPrefixParsing3_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing3_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestJSONPrefixParsing3, MyGame_Example_TestJSONPrefixParsing3_file_identifier, MyGame_Example_TestJSONPrefixParsing3_type_identifier)

#define __MyGame_Example_TestBase64_formal_args , flatbuffers_uint8_vec_ref_t v0, flatbuffers_uint8_vec_ref_t v1, flatbuffers_uint8_vec_ref_t v2
#define __MyGame_Example_TestBase64_call_args , v0, v1, v2
static inline MyGame_Example_TestBase64_ref_t MyGame_Example_TestBase64_create(flatbuffers_builder_t *B __MyGame_Example_TestBase64_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestBase64, MyGame_Example_TestBase64_file_identifier, MyGame_Example_TestBase64_type_identifier)

#define __MyGame_Example_MultipleKeys_formal_args , flatbuffers_string_ref_t v0, flatbuffers_string_ref_t v1, int64_t v2
#define __MyGame_Example_MultipleKeys_call_args , v0, v1, v2
static inline MyGame_Example_MultipleKeys_ref_t MyGame_Example_MultipleKeys_create(flatbuffers_builder_t *B __MyGame_Example_MultipleKeys_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_MultipleKeys, MyGame_Example_MultipleKeys_file_identifier, MyGame_Example_MultipleKeys_type_identifier)

#define __MyGame_Example_Monster_formal_args ,\
  MyGame_Example_Vec3_t *v0, int16_t v1, int16_t v2, flatbuffers_string_ref_t v3,\
  flatbuffers_uint8_vec_ref_t v5, MyGame_Example_Color_enum_t v6, MyGame_Example_Any_union_ref_t v8, MyGame_Example_Test_vec_ref_t v9,\
  flatbuffers_string_vec_ref_t v10, MyGame_Example_Monster_vec_ref_t v11, MyGame_Example_Monster_ref_t v12, flatbuffers_uint8_vec_ref_t v13,\
  MyGame_Example_Stat_ref_t v14, flatbuffers_bool_t v15, int32_t v16, uint32_t v17,\
  int64_t v18, uint64_t v19, int32_t v20, uint32_t v21,\
  int64_t v22, uint64_t v23, flatbuffers_bool_vec_ref_t v24, float v25,\
  float v26, float v27, flatbuffers_string_vec_ref_t v28, MyGame_Example_Ability_vec_ref_t v29,\
  flatbuffers_uint8_vec_ref_t v30, MyGame_Example_Test_vec_ref_t v31, flatbuffers_int64_vec_ref_t v32, flatbuffers_double_vec_ref_t v33, MyGame_InParentNamespace_ref_t v34, MyGame_Example_TestBase64_ref_t v35
#define __MyGame_Example_Monster_call_args ,\
  v0, v1, v2, v3,\
  v5, v6, v8, v9,\
  v10, v11, v12, v13,\
  v14, v15, v16, v17,\
  v18, v19, v20, v21,\
  v22, v23, v24, v25,\
  v26, v27, v28, v29,\
  v30, v31, v32, v33, v34, v35
static inline MyGame_Example_Monster_ref_t MyGame_Example_Monster_create(flatbuffers_builder_t *B __MyGame_Example_Monster_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_Monster, MyGame_Example_Monster_file_identifier, MyGame_Example_Monster_type_identifier)

#define __MyGame_Example_TypeAliases_formal_args ,\
  int8_t v0, uint8_t v1, int16_t v2, uint16_t v3,\
  int32_t v4, uint32_t v5, int64_t v6, uint64_t v7,\
  float v8, double v9, flatbuffers_int8_vec_ref_t v10, flatbuffers_double_vec_ref_t v11
#define __MyGame_Example_TypeAliases_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10, v11
static inline MyGame_Example_TypeAliases_ref_t MyGame_Example_TypeAliases_create(flatbuffers_builder_t *B __MyGame_Example_TypeAliases_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TypeAliases, MyGame_Example_TypeAliases_file_identifier, MyGame_Example_TypeAliases_type_identifier)

#define __Fantasy_Attacker_formal_args , int32_t v0
#define __Fantasy_Attacker_call_args , v0
static inline Fantasy_Attacker_ref_t Fantasy_Attacker_create(flatbuffers_builder_t *B __Fantasy_Attacker_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Fantasy_Attacker, Fantasy_Attacker_file_identifier, Fantasy_Attacker_type_identifier)

#define __Fantasy_Movie_formal_args ,\
  Fantasy_Character_union_ref_t v1, Fantasy_Character_union_ref_t v3, Fantasy_Character_union_ref_t v5, Fantasy_Character_union_ref_t v7, Fantasy_Character_union_vec_ref_t v9
#define __Fantasy_Movie_call_args ,\
  v1, v3, v5, v7, v9
static inline Fantasy_Movie_ref_t Fantasy_Movie_create(flatbuffers_builder_t *B __Fantasy_Movie_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Fantasy_Movie, Fantasy_Movie_file_identifier, Fantasy_Movie_type_identifier)

static inline MyGame_Example_Foo_union_ref_t MyGame_Example_Foo_as_NONE(void)
{ MyGame_Example_Foo_union_ref_t uref; uref.type = MyGame_Example_Foo_NONE; uref.value = 0; return uref; }
static inline MyGame_Example_Foo_union_ref_t MyGame_Example_Foo_as_InParentNamespace(MyGame_InParentNamespace_ref_t ref)
{ MyGame_Example_Foo_union_ref_t uref; uref.type = MyGame_Example_Foo_InParentNamespace; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, MyGame_Example_Foo)

static MyGame_Example_Foo_union_ref_t MyGame_Example_Foo_clone(flatbuffers_builder_t *B, MyGame_Example_Foo_union_t u)
{
    switch (u.type) {
    case 1: return MyGame_Example_Foo_as_InParentNamespace(MyGame_InParentNamespace_clone(B, (MyGame_InParentNamespace_table_t)u.value));
    default: return MyGame_Example_Foo_as_NONE();
    }
}

static inline MyGame_Example2_SubSystem_SubSystemA_union_ref_t MyGame_Example2_SubSystem_SubSystemA_as_NONE(void)
{ MyGame_Example2_SubSystem_SubSystemA_union_ref_t uref; uref.type = MyGame_Example2_SubSystem_SubSystemA_NONE; uref.value = 0; return uref; }
static inline MyGame_Example2_SubSystem_SubSystemA_union_ref_t MyGame_Example2_SubSystem_SubSystemA_as_Strange(MyGame_Example2_Strange_ref_t ref)
{ MyGame_Example2_SubSystem_SubSystemA_union_ref_t uref; uref.type = MyGame_Example2_SubSystem_SubSystemA_Strange; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, MyGame_Example2_SubSystem_SubSystemA)

static MyGame_Example2_SubSystem_SubSystemA_union_ref_t MyGame_Example2_SubSystem_SubSystemA_clone(flatbuffers_builder_t *B, MyGame_Example2_SubSystem_SubSystemA_union_t u)
{
    switch (u.type) {
    case 1: return MyGame_Example2_SubSystem_SubSystemA_as_Strange(MyGame_Example2_Strange_clone(B, (MyGame_Example2_Strange_table_t)u.value));
    default: return MyGame_Example2_SubSystem_SubSystemA_as_NONE();
    }
}

static inline MyGame_Example2_SubSystem_SubSystemB_union_ref_t MyGame_Example2_SubSystem_SubSystemB_as_NONE(void)
{ MyGame_Example2_SubSystem_SubSystemB_union_ref_t uref; uref.type = MyGame_Example2_SubSystem_SubSystemB_NONE; uref.value = 0; return uref; }
static inline MyGame_Example2_SubSystem_SubSystemB_union_ref_t MyGame_Example2_SubSystem_SubSystemB_as_Strange(MyGame_Example2_Strange_ref_t ref)
{ MyGame_Example2_SubSystem_SubSystemB_union_ref_t uref; uref.type = MyGame_Example2_SubSystem_SubSystemB_Strange; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, MyGame_Example2_SubSystem_SubSystemB)

static MyGame_Example2_SubSystem_SubSystemB_union_ref_t MyGame_Example2_SubSystem_SubSystemB_clone(flatbuffers_builder_t *B, MyGame_Example2_SubSystem_SubSystemB_union_t u)
{
    switch (u.type) {
    case 1: return MyGame_Example2_SubSystem_SubSystemB_as_Strange(MyGame_Example2_Strange_clone(B, (MyGame_Example2_Strange_table_t)u.value));
    default: return MyGame_Example2_SubSystem_SubSystemB_as_NONE();
    }
}

static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_NONE(void)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_NONE; uref.value = 0; return uref; }
static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_Monster(MyGame_Example_Monster_ref_t ref)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_Monster; uref.value = ref; return uref; }
static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_TestSimpleTableWithEnum(MyGame_Example_TestSimpleTableWithEnum_ref_t ref)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_TestSimpleTableWithEnum; uref.value = ref; return uref; }
static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_Monster2(MyGame_Example2_Monster_ref_t ref)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_Monster2; uref.value = ref; return uref; }
static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_Alt(MyGame_Example_Alt_ref_t ref)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_Alt; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, MyGame_Example_Any)

static MyGame_Example_Any_union_ref_t MyGame_Example_Any_clone(flatbuffers_builder_t *B, MyGame_Example_Any_union_t u)
{
    switch (u.type) {
    case 1: return MyGame_Example_Any_as_Monster(MyGame_Example_Monster_clone(B, (MyGame_Example_Monster_table_t)u.value));
    case 2: return MyGame_Example_Any_as_TestSimpleTableWithEnum(MyGame_Example_TestSimpleTableWithEnum_clone(B, (MyGame_Example_TestSimpleTableWithEnum_table_t)u.value));
    case 3: return MyGame_Example_Any_as_Monster2(MyGame_Example2_Monster_clone(B, (MyGame_Example2_Monster_table_t)u.value));
    case 4: return MyGame_Example_Any_as_Alt(MyGame_Example_Alt_clone(B, (MyGame_Example_Alt_table_t)u.value));
    default: return MyGame_Example_Any_as_NONE();
    }
}

static inline Fantasy_Character_union_ref_t Fantasy_Character_as_NONE(void)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_NONE; uref.value = 0; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_MuLan(Fantasy_Attacker_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_MuLan; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_Rapunzel(Fantasy_Rapunzel_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_Rapunzel; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_Belle(Fantasy_BookReader_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_Belle; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_BookFan(Fantasy_BookReader_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_BookFan; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_Other(flatbuffers_string_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_Other; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_Unused(flatbuffers_string_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_Unused; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, Fantasy_Character)

static Fantasy_Character_union_ref_t Fantasy_Character_clone(flatbuffers_builder_t *B, Fantasy_Character_union_t u)
{
    switch (u.type) {
    case 2: return Fantasy_Character_as_MuLan(Fantasy_Attacker_clone(B, (Fantasy_Attacker_table_t)u.value));
    case 8: return Fantasy_Character_as_Rapunzel(Fantasy_Rapunzel_clone(B, (Fantasy_Rapunzel_struct_t)u.value));
    case 9: return Fantasy_Character_as_Belle(Fantasy_BookReader_clone(B, (Fantasy_BookReader_struct_t)u.value));
    case 10: return Fantasy_Character_as_BookFan(Fantasy_BookReader_clone(B, (Fantasy_BookReader_struct_t)u.value));
    case 11: return Fantasy_Character_as_Other(flatbuffers_string_clone(B, u.value));
    case 255: return Fantasy_Character_as_Unused(flatbuffers_string_clone(B, u.value));
    default: return Fantasy_Character_as_NONE();
    }
}


static inline MyGame_InParentNamespace_ref_t MyGame_InParentNamespace_create(flatbuffers_builder_t *B __MyGame_InParentNamespace_formal_args)
{
    if (MyGame_InParentNamespace_start(B)) {
        return 0;
    }
    return MyGame_InParentNamespace_end(B);
}

static MyGame_InParentNamespace_ref_t MyGame_InParentNamespace_clone(flatbuffers_builder_t *B, MyGame_InParentNamespace_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_InParentNamespace_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_InParentNamespace_end(B));
}


static inline MyGame_Example2_Monster_ref_t MyGame_Example2_Monster_create(flatbuffers_builder_t *B __MyGame_Example2_Monster_formal_args)
{
    if (MyGame_Example2_Monster_start(B)) {
        return 0;
    }
    return MyGame_Example2_Monster_end(B);
}

static MyGame_Example2_Monster_ref_t MyGame_Example2_Monster_clone(flatbuffers_builder_t *B, MyGame_Example2_Monster_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example2_Monster_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example2_Monster_end(B));
}


static inline MyGame_Example2_Strange_ref_t MyGame_Example2_Strange_create(flatbuffers_builder_t *B __MyGame_Example2_Strange_formal_args)
{
    if (MyGame_Example2_Strange_start(B)) {
        return 0;
    }
    return MyGame_Example2_Strange_end(B);
}

static MyGame_Example2_Strange_ref_t MyGame_Example2_Strange_clone(flatbuffers_builder_t *B, MyGame_Example2_Strange_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example2_Strange_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example2_Strange_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example2_S2_namespace, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example2_S2_table, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example2_S2_struct, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example2_S2_union, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)
__flatbuffers_build_scalar_field(4, flatbuffers_, MyGame_Example2_S2_int, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)

static inline MyGame_Example2_S2_ref_t MyGame_Example2_S2_create(flatbuffers_builder_t *B __MyGame_Example2_S2_formal_args)
{
    if (MyGame_Example2_S2_start(B)
        || MyGame_Example2_S2_namespace_add(B, v0)
        || MyGame_Example2_S2_table_add(B, v1)
        || MyGame_Example2_S2_struct_add(B, v2)
        || MyGame_Example2_S2_union_add(B, v3)
        || MyGame_Example2_S2_int_add(B, v4)) {
        return 0;
    }
    return MyGame_Example2_S2_end(B);
}

static MyGame_Example2_S2_ref_t MyGame_Example2_S2_clone(flatbuffers_builder_t *B, MyGame_Example2_S2_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example2_S2_start(B)
        || MyGame_Example2_S2_namespace_pick(B, t)
        || MyGame_Example2_S2_table_pick(B, t)
        || MyGame_Example2_S2_struct_pick(B, t)
        || MyGame_Example2_S2_union_pick(B, t)
        || MyGame_Example2_S2_int_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example2_S2_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example_TestSimpleTableWithEnum_color, MyGame_Example_Color, MyGame_Example_Color_enum_t, 1, 1, INT8_C(2), MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestSimpleTableWithEnum_color2, MyGame_Example_Color, MyGame_Example_Color_enum_t, 1, 1, INT8_C(2), MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_TestSimpleTableWithEnum_uc, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(2), MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example_TestSimpleTableWithEnum_uc2, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(2), MyGame_Example_TestSimpleTableWithEnum)

static inline MyGame_Example_TestSimpleTableWithEnum_ref_t MyGame_Example_TestSimpleTableWithEnum_create(flatbuffers_builder_t *B __MyGame_Example_TestSimpleTableWithEnum_formal_args)
{
    if (MyGame_Example_TestSimpleTableWithEnum_start(B)
        || MyGame_Example_TestSimpleTableWithEnum_color_add(B, v0)
        || MyGame_Example_TestSimpleTableWithEnum_color2_add(B, v1)
        || MyGame_Example_TestSimpleTableWithEnum_uc_add(B, v2)
        || MyGame_Example_TestSimpleTableWithEnum_uc2_add(B, v3)) {
        return 0;
    }
    return MyGame_Example_TestSimpleTableWithEnum_end(B);
}

static MyGame_Example_TestSimpleTableWithEnum_ref_t MyGame_Example_TestSimpleTableWithEnum_clone(flatbuffers_builder_t *B, MyGame_Example_TestSimpleTableWithEnum_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestSimpleTableWithEnum_start(B)
        || MyGame_Example_TestSimpleTableWithEnum_color_pick(B, t)
        || MyGame_Example_TestSimpleTableWithEnum_color2_pick(B, t)
        || MyGame_Example_TestSimpleTableWithEnum_uc_pick(B, t)
        || MyGame_Example_TestSimpleTableWithEnum_uc2_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestSimpleTableWithEnum_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, MyGame_Example_TestInclude_global, InGlobalNamespace, 1, 1, MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestInclude_incval, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, 8, 8, INT64_C(0), MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_TestInclude_incval2, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, 8, 8, INT64_C(0), MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example_TestInclude_incval3, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(4, flatbuffers_, MyGame_Example_TestInclude_incval4, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, 8, 8, INT64_C(0), MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(5, flatbuffers_, MyGame_Example_TestInclude_incval5, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestInclude)

static inline MyGame_Example_TestInclude_ref_t MyGame_Example_TestInclude_create(flatbuffers_builder_t *B __MyGame_Example_TestInclude_formal_args)
{
    if (MyGame_Example_TestInclude_start(B)
        || MyGame_Example_TestInclude_incval_add(B, v1)
        || MyGame_Example_TestInclude_incval2_add(B, v2)
        || MyGame_Example_TestInclude_incval4_add(B, v4)
        || MyGame_Example_TestInclude_incval5_add(B, v5)
        || MyGame_Example_TestInclude_incval3_add(B, v3)
        || MyGame_Example_TestInclude_global_add(B, v0)) {
        return 0;
    }
    return MyGame_Example_TestInclude_end(B);
}

static MyGame_Example_TestInclude_ref_t MyGame_Example_TestInclude_clone(flatbuffers_builder_t *B, MyGame_Example_TestInclude_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestInclude_start(B)
        || MyGame_Example_TestInclude_incval_pick(B, t)
        || MyGame_Example_TestInclude_incval2_pick(B, t)
        || MyGame_Example_TestInclude_incval4_pick(B, t)
        || MyGame_Example_TestInclude_incval5_pick(B, t)
        || MyGame_Example_TestInclude_incval3_pick(B, t)
        || MyGame_Example_TestInclude_global_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestInclude_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Example_Stat_id, MyGame_Example_Stat)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_Stat_val, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_Stat)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_Stat_count, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), MyGame_Example_Stat)

static inline MyGame_Example_Stat_ref_t MyGame_Example_Stat_create(flatbuffers_builder_t *B __MyGame_Example_Stat_formal_args)
{
    if (MyGame_Example_Stat_start(B)
        || MyGame_Example_Stat_val_add(B, v1)
        || MyGame_Example_Stat_id_add(B, v0)
        || MyGame_Example_Stat_count_add(B, v2)) {
        return 0;
    }
    return MyGame_Example_Stat_end(B);
}

static MyGame_Example_Stat_ref_t MyGame_Example_Stat_clone(flatbuffers_builder_t *B, MyGame_Example_Stat_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_Stat_start(B)
        || MyGame_Example_Stat_val_pick(B, t)
        || MyGame_Example_Stat_id_pick(B, t)
        || MyGame_Example_Stat_count_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_Stat_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, MyGame_Example_Alt_prefix, MyGame_Example_TestJSONPrefix, MyGame_Example_Alt)
__flatbuffers_build_table_field(1, flatbuffers_, MyGame_Example_Alt_movie, Fantasy_Movie, MyGame_Example_Alt)
__flatbuffers_build_union_vector_field(3, flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, MyGame_Example_Alt)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, Monster, MyGame_Example_Monster)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, TestSimpleTableWithEnum, MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, Monster2, MyGame_Example2_Monster)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, Alt, MyGame_Example_Alt)
/* vector has keyed elements */
__flatbuffers_build_table_vector_field(4, flatbuffers_, MyGame_Example_Alt_multik, MyGame_Example_MultipleKeys, MyGame_Example_Alt)
/* vector has keyed elements */
__flatbuffers_build_vector_field(5, flatbuffers_, MyGame_Example_Alt_rapunzels, Fantasy_Rapunzel, Fantasy_Rapunzel_t, MyGame_Example_Alt)
__flatbuffers_build_string_vector_field(6, flatbuffers_, MyGame_Example_Alt_names, MyGame_Example_Alt)
__flatbuffers_build_vector_field(7, flatbuffers_, MyGame_Example_Alt_samples, flatbuffers_float, float, MyGame_Example_Alt)
__flatbuffers_build_struct_field(8, flatbuffers_, MyGame_Example_Alt_fixed_array, MyGame_Example_FooBar, 124, 4, MyGame_Example_Alt)

static inline MyGame_Example_Alt_ref_t MyGame_Example_Alt_create(flatbuffers_builder_t *B __MyGame_Example_Alt_formal_args)
{
    if (MyGame_Example_Alt_start(B)
        || MyGame_Example_Alt_prefix_add(B, v0)
        || MyGame_Example_Alt_movie_add(B, v1)
        || MyGame_Example_Alt_manyany_add(B, v3)
        || MyGame_Example_Alt_multik_add(B, v4)
        || MyGame_Example_Alt_rapunzels_add(B, v5)
        || MyGame_Example_Alt_names_add(B, v6)
        || MyGame_Example_Alt_samples_add(B, v7)
        || MyGame_Example_Alt_fixed_array_add(B, v8)) {
        return 0;
    }
    return MyGame_Example_Alt_end(B);
}

static MyGame_Example_Alt_ref_t MyGame_Example_Alt_clone(flatbuffers_builder_t *B, MyGame_Example_Alt_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_Alt_start(B)
        || MyGame_Example_Alt_prefix_pick(B, t)
        || MyGame_Example_Alt_movie_pick(B, t)
        || MyGame_Example_Alt_manyany_pick(B, t)
        || MyGame_Example_Alt_multik_pick(B, t)
        || MyGame_Example_Alt_rapunzels_pick(B, t)
        || MyGame_Example_Alt_names_pick(B, t)
        || MyGame_Example_Alt_samples_pick(B, t)
        || MyGame_Example_Alt_fixed_array_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_Alt_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, MyGame_Example_TestJSONPrefix_testjsonprefixparsing, MyGame_Example_TestJSONPrefixParsing, MyGame_Example_TestJSONPrefix)
__flatbuffers_build_table_field(1, flatbuffers_, MyGame_Example_TestJSONPrefix_testjsonprefixparsing2, MyGame_Example_TestJSONPrefixParsing2, MyGame_Example_TestJSONPrefix)
__flatbuffers_build_table_field(2, flatbuffers_, MyGame_Example_TestJSONPrefix_testjsonprefixparsing3, MyGame_Example_TestJSONPrefixParsing3, MyGame_Example_TestJSONPrefix)

static inline MyGame_Example_TestJSONPrefix_ref_t MyGame_Example_TestJSONPrefix_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefix_formal_args)
{
    if (MyGame_Example_TestJSONPrefix_start(B)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing_add(B, v0)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing2_add(B, v1)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing3_add(B, v2)) {
        return 0;
    }
    return MyGame_Example_TestJSONPrefix_end(B);
}

static MyGame_Example_TestJSONPrefix_ref_t MyGame_Example_TestJSONPrefix_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefix_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestJSONPrefix_start(B)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing_pick(B, t)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing2_pick(B, t)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing3_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestJSONPrefix_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_aaaa, MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_aaaa12345, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_string_field(2, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_bbbb, MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_bbbb1234, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_string_field(4, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_cccc, MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(5, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_cccc1234, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(6, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_cccc12345, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(7, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_dddd1234, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(8, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_dddd12345, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing)

static inline MyGame_Example_TestJSONPrefixParsing_ref_t MyGame_Example_TestJSONPrefixParsing_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing_formal_args)
{
    if (MyGame_Example_TestJSONPrefixParsing_start(B)
        || MyGame_Example_TestJSONPrefixParsing_bbbb1234_add(B, v3)
        || MyGame_Example_TestJSONPrefixParsing_cccc1234_add(B, v5)
        || MyGame_Example_TestJSONPrefixParsing_dddd1234_add(B, v7)
        || MyGame_Example_TestJSONPrefixParsing_aaaa_add(B, v0)
        || MyGame_Example_TestJSONPrefixParsing_aaaa12345_add(B, v1)
        || MyGame_Example_TestJSONPrefixParsing_bbbb_add(B, v2)
        || MyGame_Example_TestJSONPrefixParsing_cccc_add(B, v4)
        || MyGame_Example_TestJSONPrefixParsing_cccc12345_add(B, v6)
        || MyGame_Example_TestJSONPrefixParsing_dddd12345_add(B, v8)) {
        return 0;
    }
    return MyGame_Example_TestJSONPrefixParsing_end(B);
}

static MyGame_Example_TestJSONPrefixParsing_ref_t MyGame_Example_TestJSONPrefixParsing_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestJSONPrefixParsing_start(B)
        || MyGame_Example_TestJSONPrefixParsing_bbbb1234_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_cccc1234_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_dddd1234_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_aaaa_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_aaaa12345_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_bbbb_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_cccc_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_cccc12345_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_dddd12345_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestJSONPrefixParsing_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_steps, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing2)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_start_, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing2)

static inline MyGame_Example_TestJSONPrefixParsing2_ref_t MyGame_Example_TestJSONPrefixParsing2_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing2_formal_args)
{
    if (MyGame_Example_TestJSONPrefixParsing2_start(B)
        || MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_steps_add(B, v0)
        || MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_start__add(B, v1)) {
        return 0;
    }
    return MyGame_Example_TestJSONPrefixParsing2_end(B);
}

static MyGame_Example_TestJSONPrefixParsing2_ref_t MyGame_Example_TestJSONPrefixParsing2_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing2_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestJSONPrefixParsing2_start(B)
        || MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_steps_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_start__pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestJSONPrefixParsing2_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_steps, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing3)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_start_steps, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing3)

static inline MyGame_Example_TestJSONPrefixParsing3_ref_t MyGame_Example_TestJSONPrefixParsing3_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing3_formal_args)
{
    if (MyGame_Example_TestJSONPrefixParsing3_start(B)
        || MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_steps_add(B, v0)
        || MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_start_steps_add(B, v1)) {
        return 0;
    }
    return MyGame_Example_TestJSONPrefixParsing3_end(B);
}

static MyGame_Example_TestJSONPrefixParsing3_ref_t MyGame_Example_TestJSONPrefixParsing3_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing3_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestJSONPrefixParsing3_start(B)
        || MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_steps_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_start_steps_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestJSONPrefixParsing3_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, MyGame_Example_TestBase64_data, flatbuffers_uint8, uint8_t, MyGame_Example_TestBase64)
__flatbuffers_build_vector_field(1, flatbuffers_, MyGame_Example_TestBase64_urldata, flatbuffers_uint8, uint8_t, MyGame_Example_TestBase64)
__flatbuffers_build_vector_field(2, flatbuffers_, MyGame_Example_TestBase64_nested, flatbuffers_uint8, uint8_t, MyGame_Example_TestBase64)
__flatbuffers_build_nested_table_root(flatbuffers_, MyGame_Example_TestBase64_nested, MyGame_Example_Monster, MyGame_Example_Monster_identifier, MyGame_Example_Monster_type_identifier)

static inline MyGame_Example_TestBase64_ref_t MyGame_Example_TestBase64_create(flatbuffers_builder_t *B __MyGame_Example_TestBase64_formal_args)
{
    if (MyGame_Example_TestBase64_start(B)
        || MyGame_Example_TestBase64_data_add(B, v0)
        || MyGame_Example_TestBase64_urldata_add(B, v1)
        || MyGame_Example_TestBase64_nested_add(B, v2)) {
        return 0;
    }
    return MyGame_Example_TestBase64_end(B);
}

static MyGame_Example_TestBase64_ref_t MyGame_Example_TestBase64_clone(flatbuffers_builder_t *B, MyGame_Example_TestBase64_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestBase64_start(B)
        || MyGame_Example_TestBase64_data_pick(B, t)
        || MyGame_Example_TestBase64_urldata_pick(B, t)
        || MyGame_Example_TestBase64_nested_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestBase64_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Example_MultipleKeys_hello, MyGame_Example_MultipleKeys)
__flatbuffers_build_string_field(1, flatbuffers_, MyGame_Example_MultipleKeys_world, MyGame_Example_MultipleKeys)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_MultipleKeys_foobar, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_MultipleKeys)

static inline MyGame_Example_MultipleKeys_ref_t MyGame_Example_MultipleKeys_create(flatbuffers_builder_t *B __MyGame_Example_MultipleKeys_formal_args)
{
    if (MyGame_Example_MultipleKeys_start(B)
        || MyGame_Example_MultipleKeys_foobar_add(B, v2)
        || MyGame_Example_MultipleKeys_hello_add(B, v0)
        || MyGame_Example_MultipleKeys_world_add(B, v1)) {
        return 0;
    }
    return MyGame_Example_MultipleKeys_end(B);
}

static MyGame_Example_MultipleKeys_ref_t MyGame_Example_MultipleKeys_clone(flatbuffers_builder_t *B, MyGame_Example_MultipleKeys_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_MultipleKeys_start(B)
        || MyGame_Example_MultipleKeys_foobar_pick(B, t)
        || MyGame_Example_MultipleKeys_hello_pick(B, t)
        || MyGame_Example_MultipleKeys_world_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_MultipleKeys_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, MyGame_Example_Monster_pos, MyGame_Example_Vec3, 32, 16, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_Monster_mana, flatbuffers_int16, int16_t, 2, 2, INT16_C(150), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_Monster_hp, flatbuffers_int16, int16_t, 2, 2, INT16_C(100), MyGame_Example_Monster)
__flatbuffers_build_string_field(3, flatbuffers_, MyGame_Example_Monster_name, MyGame_Example_Monster)
/* Skipping build of deprecated field: 'MyGame_Example_Monster_friendly' */

__flatbuffers_build_vector_field(5, flatbuffers_, MyGame_Example_Monster_inventory, flatbuffers_uint8, uint8_t, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(6, flatbuffers_, MyGame_Example_Monster_color, MyGame_Example_Color, MyGame_Example_Color_enum_t, 1, 1, INT8_C(8), MyGame_Example_Monster)
__flatbuffers_build_union_field(8, flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, MyGame_Example_Monster)
__flatbuffers_build_union_table_value_field(flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, Monster, MyGame_Example_Monster)
__flatbuffers_build_union_table_value_field(flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, TestSimpleTableWithEnum, MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_union_table_value_field(flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, Monster2, MyGame_Example2_Monster)
__flatbuffers_build_union_table_value_field(flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, Alt, MyGame_Example_Alt)
__flatbuffers_build_vector_field(9, flatbuffers_, MyGame_Example_Monster_test4, MyGame_Example_Test, MyGame_Example_Test_t, MyGame_Example_Monster)
__flatbuffers_build_string_vector_field(10, flatbuffers_, MyGame_Example_Monster_testarrayofstring, MyGame_Example_Monster)
/* vector has keyed elements */
__flatbuffers_build_table_vector_field(11, flatbuffers_, MyGame_Example_Monster_testarrayoftables, MyGame_Example_Monster, MyGame_Example_Monster)
__flatbuffers_build_table_field(12, flatbuffers_, MyGame_Example_Monster_enemy, MyGame_Example_Monster, MyGame_Example_Monster)
__flatbuffers_build_vector_field(13, flatbuffers_, MyGame_Example_Monster_testnestedflatbuffer, flatbuffers_uint8, uint8_t, MyGame_Example_Monster)
__flatbuffers_build_nested_table_root(flatbuffers_, MyGame_Example_Monster_testnestedflatbuffer, MyGame_Example_Monster, MyGame_Example_Monster_identifier, MyGame_Example_Monster_type_identifier)
__flatbuffers_build_table_field(14, flatbuffers_, MyGame_Example_Monster_testempty, MyGame_Example_Stat, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(15, flatbuffers_, MyGame_Example_Monster_testbool, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(1), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(16, flatbuffers_, MyGame_Example_Monster_testhashs32_fnv1, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(17, flatbuffers_, MyGame_Example_Monster_testhashu32_fnv1, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(18, flatbuffers_, MyGame_Example_Monster_testhashs64_fnv1, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(19, flatbuffers_, MyGame_Example_Monster_testhashu64_fnv1, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(20, flatbuffers_, MyGame_Example_Monster_testhashs32_fnv1a, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(21, flatbuffers_, MyGame_Example_Monster_testhashu32_fnv1a, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(22, flatbuffers_, MyGame_Example_Monster_testhashs64_fnv1a, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(23, flatbuffers_, MyGame_Example_Monster_testhashu64_fnv1a, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), MyGame_Example_Monster)
__flatbuffers_build_vector_field(24, flatbuffers_, MyGame_Example_Monster_testarrayofbools, flatbuffers_bool, flatbuffers_bool_t, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(25, flatbuffers_, MyGame_Example_Monster_testf, flatbuffers_float, float, 4, 4, 314159.000f, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(26, flatbuffers_, MyGame_Example_Monster_testf2, flatbuffers_float, float, 4, 4, 3.00000000f, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(27, flatbuffers_, MyGame_Example_Monster_testf3, flatbuffers_float, float, 4, 4, 0.00000000f, MyGame_Example_Monster)
__flatbuffers_build_string_vector_field(28, flatbuffers_, MyGame_Example_Monster_testarrayofstring2, MyGame_Example_Monster)
/* vector has keyed elements */
__flatbuffers_build_vector_field(29, flatbuffers_, MyGame_Example_Monster_testarrayofsortedstruct, MyGame_Example_Ability, MyGame_Example_Ability_t, MyGame_Example_Monster)
__flatbuffers_build_vector_field(30, flatbuffers_, MyGame_Example_Monster_flex, flatbuffers_uint8, uint8_t, MyGame_Example_Monster)
__flatbuffers_build_vector_field(31, flatbuffers_, MyGame_Example_Monster_test5, MyGame_Example_Test, MyGame_Example_Test_t, MyGame_Example_Monster)
__flatbuffers_build_vector_field(32, flatbuffers_, MyGame_Example_Monster_vector_of_longs, flatbuffers_int64, int64_t, MyGame_Example_Monster)
__flatbuffers_build_vector_field(33, flatbuffers_, MyGame_Example_Monster_vector_of_doubles, flatbuffers_double, double, MyGame_Example_Monster)
__flatbuffers_build_table_field(34, flatbuffers_, MyGame_Example_Monster_parent_namespace_test, MyGame_InParentNamespace, MyGame_Example_Monster)
__flatbuffers_build_table_field(35, flatbuffers_, MyGame_Example_Monster_testbase64, MyGame_Example_TestBase64, MyGame_Example_Monster)

static inline MyGame_Example_Monster_ref_t MyGame_Example_Monster_create(flatbuffers_builder_t *B __MyGame_Example_Monster_formal_args)
{
    if (MyGame_Example_Monster_start(B)
        || MyGame_Example_Monster_pos_add(B, v0)
        || MyGame_Example_Monster_testhashs64_fnv1_add(B, v18)
        || MyGame_Example_Monster_testhashu64_fnv1_add(B, v19)
        || MyGame_Example_Monster_testhashs64_fnv1a_add(B, v22)
        || MyGame_Example_Monster_testhashu64_fnv1a_add(B, v23)
        || MyGame_Example_Monster_name_add(B, v3)
        || MyGame_Example_Monster_inventory_add(B, v5)
        || MyGame_Example_Monster_testarrayoftables_add(B, v11)
        || MyGame_Example_Monster_testarrayofstring_add(B, v10)
        || MyGame_Example_Monster_testarrayofstring2_add(B, v28)
        || MyGame_Example_Monster_testarrayofbools_add(B, v24)
        || MyGame_Example_Monster_testarrayofsortedstruct_add(B, v29)
        || MyGame_Example_Monster_enemy_add(B, v12)
        || MyGame_Example_Monster_test_add_value(B, v8)
        || MyGame_Example_Monster_test4_add(B, v9)
        || MyGame_Example_Monster_test5_add(B, v31)
        || MyGame_Example_Monster_testnestedflatbuffer_add(B, v13)
        || MyGame_Example_Monster_testempty_add(B, v14)
        || MyGame_Example_Monster_testhashs32_fnv1_add(B, v16)
        || MyGame_Example_Monster_testhashu32_fnv1_add(B, v17)
        || MyGame_Example_Monster_testhashs32_fnv1a_add(B, v20)
        || MyGame_Example_Monster_testhashu32_fnv1a_add(B, v21)
        || MyGame_Example_Monster_testf_add(B, v25)
        || MyGame_Example_Monster_testf2_add(B, v26)
        || MyGame_Example_Monster_testf3_add(B, v27)
        || MyGame_Example_Monster_flex_add(B, v30)
        || MyGame_Example_Monster_vector_of_longs_add(B, v32)
        || MyGame_Example_Monster_vector_of_doubles_add(B, v33)
        || MyGame_Example_Monster_parent_namespace_test_add(B, v34)
        || MyGame_Example_Monster_testbase64_add(B, v35)
        || MyGame_Example_Monster_hp_add(B, v2)
        || MyGame_Example_Monster_mana_add(B, v1)
        || MyGame_Example_Monster_color_add(B, v6)
        || MyGame_Example_Monster_testbool_add(B, v15)
        || MyGame_Example_Monster_test_add_type(B, v8.type)) {
        return 0;
    }
    return MyGame_Example_Monster_end(B);
}

static MyGame_Example_Monster_ref_t MyGame_Example_Monster_clone(flatbuffers_builder_t *B, MyGame_Example_Monster_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_Monster_start(B)
        || MyGame_Example_Monster_pos_pick(B, t)
        || MyGame_Example_Monster_testhashs64_fnv1_pick(B, t)
        || MyGame_Example_Monster_testhashu64_fnv1_pick(B, t)
        || MyGame_Example_Monster_testhashs64_fnv1a_pick(B, t)
        || MyGame_Example_Monster_testhashu64_fnv1a_pick(B, t)
        || MyGame_Example_Monster_name_pick(B, t)
        || MyGame_Example_Monster_inventory_pick(B, t)
        || MyGame_Example_Monster_testarrayoftables_pick(B, t)
        || MyGame_Example_Monster_testarrayofstring_pick(B, t)
        || MyGame_Example_Monster_testarrayofstring2_pick(B, t)
        || MyGame_Example_Monster_testarrayofbools_pick(B, t)
        || MyGame_Example_Monster_testarrayofsortedstruct_pick(B, t)
        || MyGame_Example_Monster_enemy_pick(B, t)
        || MyGame_Example_Monster_test_pick(B, t)
        || MyGame_Example_Monster_test4_pick(B, t)
        || MyGame_Example_Monster_test5_pick(B, t)
        || MyGame_Example_Monster_testnestedflatbuffer_pick(B, t)
        || MyGame_Example_Monster_testempty_pick(B, t)
        || MyGame_Example_Monster_testhashs32_fnv1_pick(B, t)
        || MyGame_Example_Monster_testhashu32_fnv1_pick(B, t)
        || MyGame_Example_Monster_testhashs32_fnv1a_pick(B, t)
        || MyGame_Example_Monster_testhashu32_fnv1a_pick(B, t)
        || MyGame_Example_Monster_testf_pick(B, t)
        || MyGame_Example_Monster_testf2_pick(B, t)
        || MyGame_Example_Monster_testf3_pick(B, t)
        || MyGame_Example_Monster_flex_pick(B, t)
        || MyGame_Example_Monster_vector_of_longs_pick(B, t)
        || MyGame_Example_Monster_vector_of_doubles_pick(B, t)
        || MyGame_Example_Monster_parent_namespace_test_pick(B, t)
        || MyGame_Example_Monster_testbase64_pick(B, t)
        || MyGame_Example_Monster_hp_pick(B, t)
        || MyGame_Example_Monster_mana_pick(B, t)
        || MyGame_Example_Monster_color_pick(B, t)
        || MyGame_Example_Monster_testbool_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_Monster_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example_TypeAliases_i8, flatbuffers_int8, int8_t, 1, 1, INT8_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TypeAliases_u8, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_TypeAliases_i16, flatbuffers_int16, int16_t, 2, 2, INT16_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example_TypeAliases_u16, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(4, flatbuffers_, MyGame_Example_TypeAliases_i32, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(5, flatbuffers_, MyGame_Example_TypeAliases_u32, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(6, flatbuffers_, MyGame_Example_TypeAliases_i64, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(7, flatbuffers_, MyGame_Example_TypeAliases_u64, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(8, flatbuffers_, MyGame_Example_TypeAliases_f32, flatbuffers_float, float, 4, 4, 0.00000000f, MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(9, flatbuffers_, MyGame_Example_TypeAliases_f64, flatbuffers_double, double, 8, 8, 0.0000000000000000, MyGame_Example_TypeAliases)
__flatbuffers_build_vector_field(10, flatbuffers_, MyGame_Example_TypeAliases_v8, flatbuffers_int8, int8_t, MyGame_Example_TypeAliases)
__flatbuffers_build_vector_field(11, flatbuffers_, MyGame_Example_TypeAliases_vf64, flatbuffers_double, double, MyGame_Example_TypeAliases)

static inline MyGame_Example_TypeAliases_ref_t MyGame_Example_TypeAliases_create(flatbuffers_builder_t *B __MyGame_Example_TypeAliases_formal_args)
{
    if (MyGame_Example_TypeAliases_start(B)
        || MyGame_Example_TypeAliases_i64_add(B, v6)
        || MyGame_Example_TypeAliases_u64_add(B, v7)
        || MyGame_Example_TypeAliases_f64_add(B, v9)
        || MyGame_Example_TypeAliases_i32_add(B, v4)
        || MyGame_Example_TypeAliases_u32_add(B, v5)
        || MyGame_Example_TypeAliases_f32_add(B, v8)
        || MyGame_Example_TypeAliases_v8_add(B, v10)
        || MyGame_Example_TypeAliases_vf64_add(B, v11)
        || MyGame_Example_TypeAliases_i16_add(B, v2)
        || MyGame_Example_TypeAliases_u16_add(B, v3)
        || MyGame_Example_TypeAliases_i8_add(B, v0)
        || MyGame_Example_TypeAliases_u8_add(B, v1)) {
        return 0;
    }
    return MyGame_Example_TypeAliases_end(B);
}

static MyGame_Example_TypeAliases_ref_t MyGame_Example_TypeAliases_clone(flatbuffers_builder_t *B, MyGame_Example_TypeAliases_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TypeAliases_start(B)
        || MyGame_Example_TypeAliases_i64_pick(B, t)
        || MyGame_Example_TypeAliases_u64_pick(B, t)
        || MyGame_Example_TypeAliases_f64_pick(B, t)
        || MyGame_Example_TypeAliases_i32_pick(B, t)
        || MyGame_Example_TypeAliases_u32_pick(B, t)
        || MyGame_Example_TypeAliases_f32_pick(B, t)
        || MyGame_Example_TypeAliases_v8_pick(B, t)
        || MyGame_Example_TypeAliases_vf64_pick(B, t)
        || MyGame_Example_TypeAliases_i16_pick(B, t)
        || MyGame_Example_TypeAliases_u16_pick(B, t)
        || MyGame_Example_TypeAliases_i8_pick(B, t)
        || MyGame_Example_TypeAliases_u8_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TypeAliases_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Fantasy_Attacker_sword_attack_damage, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), Fantasy_Attacker)

static inline Fantasy_Attacker_ref_t Fantasy_Attacker_create(flatbuffers_builder_t *B __Fantasy_Attacker_formal_args)
{
    if (Fantasy_Attacker_start(B)
        || Fantasy_Attacker_sword_attack_damage_add(B, v0)) {
        return 0;
    }
    return Fantasy_Attacker_end(B);
}

static Fantasy_Attacker_ref_t Fantasy_Attacker_clone(flatbuffers_builder_t *B, Fantasy_Attacker_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Fantasy_Attacker_start(B)
        || Fantasy_Attacker_sword_attack_damage_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Fantasy_Attacker_end(B));
}

__flatbuffers_build_union_field(1, flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Other)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Unused)
__flatbuffers_build_union_field(3, flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Other)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Unused)
__flatbuffers_build_union_field(5, flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Other)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Unused)
__flatbuffers_build_union_field(7, flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Other)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Unused)
__flatbuffers_build_union_vector_field(9, flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Other)
__flatbuffers_build_union_string_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Unused)

static inline Fantasy_Movie_ref_t Fantasy_Movie_create(flatbuffers_builder_t *B __Fantasy_Movie_formal_args)
{
    if (Fantasy_Movie_start(B)
        || Fantasy_Movie_main_character_add_value(B, v1)
        || Fantasy_Movie_antagonist_add_value(B, v3)
        || Fantasy_Movie_side_kick_add_value(B, v5)
        || Fantasy_Movie_cameo_add_value(B, v7)
        || Fantasy_Movie_characters_add(B, v9)
        || Fantasy_Movie_main_character_add_type(B, v1.type)
        || Fantasy_Movie_antagonist_add_type(B, v3.type)
        || Fantasy_Movie_side_kick_add_type(B, v5.type)
        || Fantasy_Movie_cameo_add_type(B, v7.type)) {
        return 0;
    }
    return Fantasy_Movie_end(B);
}

static Fantasy_Movie_ref_t Fantasy_Movie_clone(flatbuffers_builder_t *B, Fantasy_Movie_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Fantasy_Movie_start(B)
        || Fantasy_Movie_main_character_pick(B, t)
        || Fantasy_Movie_antagonist_pick(B, t)
        || Fantasy_Movie_side_kick_pick(B, t)
        || Fantasy_Movie_cameo_pick(B, t)
        || Fantasy_Movie_characters_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Fantasy_Movie_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MONSTER_TEST_BUILDER_H */
