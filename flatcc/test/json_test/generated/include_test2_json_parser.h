#ifndef INCLUDE_TEST2_JSON_PARSER_H
#define INCLUDE_TEST2_JSON_PARSER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#include "flatcc/flatcc_prologue.h"

static const char *MyGame_OtherNameSpace_FromInclude_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_OtherNameSpace_Unused_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *MyGame_OtherNameSpace_Unused_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *include_test2_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test2_local_MyGame_Example_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test2_local_MyGame_Example2_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test2_local_MyGame_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test2_local_Fantasy_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test2_local_MyGame_OtherNameSpace_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test2_local_MyGame_Example2_SubSystem_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test2_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *MyGame_OtherNameSpace_FromInclude_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffff0000000000) == 0x466f6f0000000000) { /* "Foo" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
        if (buf != mark) {
            *value = UINT64_C(17), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "Foo" */
        goto pfguard1;
    } /* "Foo" */
    goto endpfguard1;
pfguard1:
    if (w == 0x496e636c75646556) { /* descend "IncludeV" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffff000000000000) == 0x616c000000000000) { /* "al" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "al" */
            return unmatched;
        } /* "al" */
    } else { /* descend "IncludeV" */
        return unmatched;
    } /* descend "IncludeV" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *MyGame_OtherNameSpace_Unused_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffff0000) == 0x756e757365640000) { /* "unused" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
            if (mark != buf) {
                int8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        include_test2_local_MyGame_OtherNameSpace_json_parser_enum,
                        include_test2_global_json_parser_enum, 0 };
                pval = (void *)((size_t)struct_base + 0);
                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                flatbuffers_int8_write_to_pe(pval, val);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "unused" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "unused" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *MyGame_OtherNameSpace_Unused_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 1, 1))) goto failed;
    buf = MyGame_OtherNameSpace_Unused_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_OtherNameSpace_Unused_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_OtherNameSpace_Unused_parse_json_struct);
}

static const char *include_test2_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test2_local_MyGame_Example_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test2_local_MyGame_Example2_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test2_local_MyGame_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test2_local_Fantasy_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test2_local_MyGame_OtherNameSpace_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x46726f6d496e636c) { /* descend "FromIncl" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffff0000000000) == 0x7564650000000000) { /* "ude" */
            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
            if (buf != mark) {
                buf = MyGame_OtherNameSpace_FromInclude_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
            } else {
                return unmatched;
            }
        } else { /* "ude" */
            return unmatched;
        } /* "ude" */
    } else { /* descend "FromIncl" */
        return unmatched;
    } /* descend "FromIncl" */
    return buf;
}

static const char *include_test2_local_MyGame_Example2_SubSystem_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test2_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x4d7947616d652e4f) { /* descend "MyGame.O" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x746865724e616d65) { /* descend "therName" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x53706163652e4672) { /* descend "Space.Fr" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x6f6d496e636c7564) { /* descend "omInclud" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                        if (buf != mark) {
                            buf = MyGame_OtherNameSpace_FromInclude_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "e" */
                        return unmatched;
                    } /* "e" */
                } else { /* descend "omInclud" */
                    return unmatched;
                } /* descend "omInclud" */
            } else { /* descend "Space.Fr" */
                return unmatched;
            } /* descend "Space.Fr" */
        } else { /* descend "therName" */
            return unmatched;
        } /* descend "therName" */
    } else { /* descend "MyGame.O" */
        return unmatched;
    } /* descend "MyGame.O" */
    return buf;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* INCLUDE_TEST2_JSON_PARSER_H */
