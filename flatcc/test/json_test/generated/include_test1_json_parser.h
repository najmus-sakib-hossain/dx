#ifndef INCLUDE_TEST1_JSON_PARSER_H
#define INCLUDE_TEST1_JSON_PARSER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#ifndef INCLUDE_TEST2_JSON_PARSER_H
#include "include_test2_json_parser.h"
#endif
#include "flatcc/flatcc_prologue.h"

static const char *include_test1_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test1_local_MyGame_Example_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test1_local_MyGame_Example2_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test1_local_MyGame_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test1_local_Fantasy_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test1_local_MyGame_OtherNameSpace_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test1_local_MyGame_Example2_SubSystem_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *include_test1_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *include_test1_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test1_local_MyGame_Example_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test1_local_MyGame_Example2_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test1_local_MyGame_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test1_local_Fantasy_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test1_local_MyGame_OtherNameSpace_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x46726f6d496e636c) { /* descend "FromIncl" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffff0000000000) == 0x7564650000000000) { /* "ude" */
            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
            if (buf != mark) {
                buf = MyGame_OtherNameSpace_FromInclude_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
            } else {
                return unmatched;
            }
        } else { /* "ude" */
            return unmatched;
        } /* "ude" */
    } else { /* descend "FromIncl" */
        return unmatched;
    } /* descend "FromIncl" */
    return buf;
}

static const char *include_test1_local_MyGame_Example2_SubSystem_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *include_test1_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x4d7947616d652e4f) { /* descend "MyGame.O" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x746865724e616d65) { /* descend "therName" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x53706163652e4672) { /* descend "Space.Fr" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x6f6d496e636c7564) { /* descend "omInclud" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                        if (buf != mark) {
                            buf = MyGame_OtherNameSpace_FromInclude_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "e" */
                        return unmatched;
                    } /* "e" */
                } else { /* descend "omInclud" */
                    return unmatched;
                } /* descend "omInclud" */
            } else { /* descend "Space.Fr" */
                return unmatched;
            } /* descend "Space.Fr" */
        } else { /* descend "therName" */
            return unmatched;
        } /* descend "therName" */
    } else { /* descend "MyGame.O" */
        return unmatched;
    } /* descend "MyGame.O" */
    return buf;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* INCLUDE_TEST1_JSON_PARSER_H */
