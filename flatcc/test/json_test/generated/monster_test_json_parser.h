#ifndef MONSTER_TEST_JSON_PARSER_H
#define MONSTER_TEST_JSON_PARSER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#ifndef INCLUDE_TEST1_JSON_PARSER_H
#include "include_test1_json_parser.h"
#endif
#ifndef ATTRIBUTES_JSON_PARSER_H
#include "attributes_json_parser.h"
#endif
#include "flatcc/flatcc_prologue.h"

/*
 * Parses the default root table or struct of the schema and constructs a FlatBuffer.
 *
 * Builder `B` must be initialized. `ctx` can be null but will hold
 * hold detailed error info on return when available.
 * Returns 0 on success, or error code.
 * `flags` : 0 by default, `flatcc_json_parser_f_skip_unknown` silently
 * ignores unknown table and structs fields, and union types.
 */
static int monster_test_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags);

static const char *InGlobalNamespace_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *InGlobalNamespace_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_InParentNamespace_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example2_Monster_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example2_Strange_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example2_S2_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example2_foo_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example_Foo_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int MyGame_Example_Foo_json_union_accept_type(uint8_t type);
static const char *MyGame_Example_Foo_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example2_SubSystem_SubSystemA_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int MyGame_Example2_SubSystem_SubSystemA_json_union_accept_type(uint8_t type);
static const char *MyGame_Example2_SubSystem_SubSystemA_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example2_SubSystem_SubSystemB_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int MyGame_Example2_SubSystem_SubSystemB_json_union_accept_type(uint8_t type);
static const char *MyGame_Example2_SubSystem_SubSystemB_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example_neg_enum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example_int_enum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example_hex_enum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example_Color_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example_Any_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int MyGame_Example_Any_json_union_accept_type(uint8_t type);
static const char *MyGame_Example_Any_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example_Test_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *MyGame_Example_Test_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_notemptyenum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *MyGame_Example_TestSimpleTableWithEnum_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_TestInclude_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_Vec3_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *MyGame_Example_Vec3_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_Ability_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *MyGame_Example_Ability_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_Stat_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_FooBar_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *MyGame_Example_FooBar_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_Alt_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_TestJSONPrefix_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_TestJSONPrefixParsing_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_TestJSONPrefixParsing2_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_TestJSONPrefixParsing3_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_TestBase64_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_MultipleKeys_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_Monster_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *MyGame_Example_TypeAliases_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *Fantasy_Attacker_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *Fantasy_Rapunzel_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *Fantasy_Rapunzel_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *Fantasy_BookReader_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *Fantasy_BookReader_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *Fantasy_Character_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int Fantasy_Character_json_union_accept_type(uint8_t type);
static const char *Fantasy_Character_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *Fantasy_Movie_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *Fantasy_ReorderedEnum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *Fantasy_ReorderedColor_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *monster_test_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *monster_test_local_MyGame_Example_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *monster_test_local_MyGame_Example2_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *monster_test_local_MyGame_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *monster_test_local_Fantasy_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *monster_test_local_MyGame_OtherNameSpace_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *monster_test_local_MyGame_Example2_SubSystem_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *monster_test_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *InGlobalNamespace_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffff0000) == 0x756e757365640000) { /* "unused" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
            if (mark != buf) {
                int8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        monster_test_local_json_parser_enum,
                        monster_test_global_json_parser_enum, 0 };
                pval = (void *)((size_t)struct_base + 0);
                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                flatbuffers_int8_write_to_pe(pval, val);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "unused" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "unused" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *InGlobalNamespace_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 1, 1))) goto failed;
    buf = InGlobalNamespace_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int InGlobalNamespace_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, InGlobalNamespace_parse_json_struct);
}

static const char *MyGame_InParentNamespace_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_InParentNamespace_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_InParentNamespace_parse_json_table);
}

static const char *MyGame_Example2_Monster_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example2_Monster_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example2_Monster_parse_json_table);
}

static const char *MyGame_Example2_Strange_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example2_Strange_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example2_Strange_parse_json_table);
}

static const char *MyGame_Example2_S2_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 5)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x7374727563740000) { /* branch "struct" */
            if ((w & 0xffffff0000000000) == 0x696e740000000000) { /* "int" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_MyGame_Example2_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    goto pfguard1;
                }
            } else { /* "int" */
                goto pfguard1;
            } /* "int" */
            goto endpfguard1;
pfguard1:
            if (w == 0x6e616d6573706163) { /* descend "namespac" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example2_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "e" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "e" */
            } else { /* descend "namespac" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "namespac" */
endpfguard1:
            (void)0;
        } else { /* branch "struct" */
            if (w < 0x7461626c65000000) { /* branch "table" */
                if ((w & 0xffffffffffff0000) == 0x7374727563740000) { /* "struct" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example2_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "struct" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "struct" */
            } else { /* branch "table" */
                if ((w & 0xffffffffff000000) == 0x756e696f6e000000) { /* "union" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example2_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "union" */
                    if ((w & 0xffffffffff000000) == 0x7461626c65000000) { /* "table" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example2_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "table" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "table" */
                } /* "union" */
            } /* branch "table" */
        } /* branch "struct" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example2_S2_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example2_S2_parse_json_table);
}

static const char *MyGame_Example2_foo_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x7800000000000000) { /* branch "x" */
        if ((w & 0xffffffffff000000) == 0x7461626c65000000) { /* "table" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
            if (buf != mark) {
                *value = UINT64_C(2), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "table" */
            return unmatched;
        } /* "table" */
    } else { /* branch "x" */
        if ((w & 0xff00000000000000) == 0x7900000000000000) { /* "y" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "y" */
            if ((w & 0xff00000000000000) == 0x7800000000000000) { /* "x" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(0), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "x" */
                return unmatched;
            } /* "x" */
        } /* "y" */
    } /* branch "x" */
    return buf;
}

static const char *MyGame_Example_Foo_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* InParentNamespace */
        buf = MyGame_InParentNamespace_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int MyGame_Example_Foo_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* InParentNamespace */
    default: return 0;
    }
}

static const char *MyGame_Example_Foo_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x496e506172656e74) { /* descend "InParent" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x4e616d6573706163) { /* descend "Namespac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "e" */
                return unmatched;
            } /* "e" */
        } else { /* descend "Namespac" */
            return unmatched;
        } /* descend "Namespac" */
    } else { /* descend "InParent" */
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NONE" */
            return unmatched;
        } /* "NONE" */
    } /* descend "InParent" */
    return buf;
}

static const char *MyGame_Example2_SubSystem_SubSystemA_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* Strange */
        buf = MyGame_Example2_Strange_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int MyGame_Example2_SubSystem_SubSystemA_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* Strange */
    default: return 0;
    }
}

static const char *MyGame_Example2_SubSystem_SubSystemA_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffffffffff00) == 0x537472616e676500) { /* "Strange" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
        if (buf != mark) {
            *value = UINT64_C(1), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "Strange" */
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NONE" */
            return unmatched;
        } /* "NONE" */
    } /* "Strange" */
    return buf;
}

static const char *MyGame_Example2_SubSystem_SubSystemB_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* Strange */
        buf = MyGame_Example2_Strange_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int MyGame_Example2_SubSystem_SubSystemB_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* Strange */
    default: return 0;
    }
}

static const char *MyGame_Example2_SubSystem_SubSystemB_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffffffffff00) == 0x537472616e676500) { /* "Strange" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
        if (buf != mark) {
            *value = UINT64_C(1), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "Strange" */
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NONE" */
            return unmatched;
        } /* "NONE" */
    } /* "Strange" */
    return buf;
}

static const char *MyGame_Example_neg_enum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x6e65673200000000) { /* branch "neg2" */
        if ((w & 0xffffffff00000000) == 0x6e65673100000000) { /* "neg1" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(18446744073709551604), *value_sign = 1;
            } else {
                return unmatched;
            }
        } else { /* "neg1" */
            return unmatched;
        } /* "neg1" */
    } else { /* branch "neg2" */
        if ((w & 0xffffffff00000000) == 0x6e65673300000000) { /* "neg3" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(18446744073709551606), *value_sign = 1;
            } else {
                return unmatched;
            }
        } else { /* "neg3" */
            if ((w & 0xffffffff00000000) == 0x6e65673200000000) { /* "neg2" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(18446744073709551605), *value_sign = 1;
                } else {
                    return unmatched;
                }
            } else { /* "neg2" */
                return unmatched;
            } /* "neg2" */
        } /* "neg3" */
    } /* branch "neg2" */
    return buf;
}

static const char *MyGame_Example_int_enum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x696e743200000000) { /* branch "int2" */
        if ((w & 0xffffffff00000000) == 0x696e743100000000) { /* "int1" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(2), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "int1" */
            return unmatched;
        } /* "int1" */
    } else { /* branch "int2" */
        if (w < 0x696e746e65670000) { /* branch "intneg" */
            if ((w & 0xffffffff00000000) == 0x696e743200000000) { /* "int2" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(42), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "int2" */
                return unmatched;
            } /* "int2" */
        } else { /* branch "intneg" */
            if ((w & 0xffffffffffffff00) == 0x696e746e65673200) { /* "intneg2" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(18446744073709551615), *value_sign = 1;
                } else {
                    return unmatched;
                }
            } else { /* "intneg2" */
                if ((w & 0xffffffffffff0000) == 0x696e746e65670000) { /* "intneg" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(18446744073709551614), *value_sign = 1;
                    } else {
                        return unmatched;
                    }
                } else { /* "intneg" */
                    return unmatched;
                } /* "intneg" */
            } /* "intneg2" */
        } /* branch "intneg" */
    } /* branch "int2" */
    return buf;
}

static const char *MyGame_Example_hex_enum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x6865783200000000) { /* branch "hex2" */
        if ((w & 0xffffffff00000000) == 0x6865783100000000) { /* "hex1" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(3), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "hex1" */
            return unmatched;
        } /* "hex1" */
    } else { /* branch "hex2" */
        if ((w & 0xffffffffffff0000) == 0x6865786e65670000) { /* "hexneg" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
            if (buf != mark) {
                *value = UINT64_C(18446744073709551614), *value_sign = 1;
            } else {
                return unmatched;
            }
        } else { /* "hexneg" */
            if ((w & 0xffffffff00000000) == 0x6865783200000000) { /* "hex2" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2125446831), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "hex2" */
                return unmatched;
            } /* "hex2" */
        } /* "hexneg" */
    } /* branch "hex2" */
    return buf;
}

static const char *MyGame_Example_Color_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x477265656e000000) { /* branch "Green" */
        if ((w & 0xffffffff00000000) == 0x426c756500000000) { /* "Blue" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(8), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Blue" */
            return unmatched;
        } /* "Blue" */
    } else { /* branch "Green" */
        if ((w & 0xffffff0000000000) == 0x5265640000000000) { /* "Red" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Red" */
            if ((w & 0xffffffffff000000) == 0x477265656e000000) { /* "Green" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "Green" */
                return unmatched;
            } /* "Green" */
        } /* "Red" */
    } /* branch "Green" */
    return buf;
}

static const char *MyGame_Example_Any_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* Monster */
        buf = MyGame_Example_Monster_parse_json_table(ctx, buf, end, result);
        break;
    case 2: /* TestSimpleTableWithEnum */
        buf = MyGame_Example_TestSimpleTableWithEnum_parse_json_table(ctx, buf, end, result);
        break;
    case 3: /* Monster2 */
        buf = MyGame_Example2_Monster_parse_json_table(ctx, buf, end, result);
        break;
    case 4: /* Alt */
        buf = MyGame_Example_Alt_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int MyGame_Example_Any_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* Monster */
    case 2: return 1; /* TestSimpleTableWithEnum */
    case 3: return 1; /* Monster2 */
    case 4: return 1; /* Alt */
    default: return 0;
    }
}

static const char *MyGame_Example_Any_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x4d6f6e7374657200) { /* branch "Monster" */
        if ((w & 0xffffff0000000000) == 0x416c740000000000) { /* "Alt" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
            if (buf != mark) {
                *value = UINT64_C(4), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Alt" */
            return unmatched;
        } /* "Alt" */
    } else { /* branch "Monster" */
        if (w == 0x4d6f6e7374657232) { /* "Monster2" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
            if (buf != mark) {
                *value = UINT64_C(3), *value_sign = 0;
            } else {
                goto pfguard1;
            }
        } else { /* "Monster2" */
            if ((w & 0xffffffffffffff00) == 0x4d6f6e7374657200) { /* "Monster" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    goto pfguard1;
                }
            } else { /* "Monster" */
                goto pfguard1;
            } /* "Monster" */
        } /* "Monster2" */
        goto endpfguard1;
pfguard1:
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                goto pfguard2;
            }
        } else { /* "NONE" */
            goto pfguard2;
        } /* "NONE" */
        goto endpfguard2;
pfguard2:
        if (w == 0x5465737453696d70) { /* descend "TestSimp" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x6c655461626c6557) { /* descend "leTableW" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffffff00) == 0x697468456e756d00) { /* "ithEnum" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(2), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "ithEnum" */
                    return unmatched;
                } /* "ithEnum" */
            } else { /* descend "leTableW" */
                return unmatched;
            } /* descend "leTableW" */
        } else { /* descend "TestSimp" */
            return unmatched;
        } /* descend "TestSimp" */
endpfguard2:
        (void)0;
endpfguard1:
        (void)0;
    } /* branch "Monster" */
    return buf;
}

static const char *MyGame_Example_Test_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xff00000000000000) == 0x6200000000000000) { /* "b" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
            if (mark != buf) {
                int8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        monster_test_local_MyGame_Example_json_parser_enum,
                        monster_test_global_json_parser_enum, 0 };
                pval = (void *)((size_t)struct_base + 2);
                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                flatbuffers_int8_write_to_pe(pval, val);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "b" */
            if ((w & 0xff00000000000000) == 0x6100000000000000) { /* "a" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                if (mark != buf) {
                    int16_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 0);
                    buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_int16_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "a" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "a" */
        } /* "b" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *MyGame_Example_Test_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 4, 2))) goto failed;
    buf = MyGame_Example_Test_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_Test_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_Test_parse_json_struct);
}

static const char *MyGame_Example_notemptyenum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xff00000000000000) == 0x7800000000000000) { /* "x" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "x" */
        return unmatched;
    } /* "x" */
    return buf;
}

static const char *MyGame_Example_TestSimpleTableWithEnum_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 4)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffff0000) == 0x636f6c6f72320000) { /* "color2" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
            if (mark != buf) {
                int8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        MyGame_Example_Color_parse_json_enum,
                        monster_test_local_MyGame_Example_json_parser_enum,
                        monster_test_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != INT8_C(2) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                    flatbuffers_int8_write_to_pe(pval, val);
                }
            } else {
                goto pfguard1;
            }
        } else { /* "color2" */
            if ((w & 0xffffffffff000000) == 0x636f6c6f72000000) { /* "color" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    int8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            MyGame_Example_Color_parse_json_enum,
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT8_C(2) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_int8_write_to_pe(pval, val);
                    }
                } else {
                    goto pfguard1;
                }
            } else { /* "color" */
                goto pfguard1;
            } /* "color" */
        } /* "color2" */
        goto endpfguard1;
pfguard1:
        if ((w & 0xffffff0000000000) == 0x7563320000000000) { /* "uc2" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
            if (mark != buf) {
                uint8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        monster_test_local_MyGame_Example_json_parser_enum,
                        monster_test_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != UINT8_C(2) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 1, 1))) goto failed;
                    flatbuffers_uint8_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "uc2" */
            if ((w & 0xffff000000000000) == 0x7563000000000000) { /* "uc" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != UINT8_C(2) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 1, 1))) goto failed;
                        flatbuffers_uint8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "uc" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "uc" */
        } /* "uc2" */
endpfguard1:
        (void)0;
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_TestSimpleTableWithEnum_parse_json_table);
}

static const char *MyGame_Example_TestInclude_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 6)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x696e6376616c0000) { /* branch "incval" */
            if ((w & 0xffffffffffff0000) == 0x676c6f62616c0000) { /* "global" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                    buf = InGlobalNamespace_parse_json_struct_inline(ctx, buf, end, pval);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "global" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "global" */
        } else { /* branch "incval" */
            if (w < 0x696e6376616c3300) { /* branch "incval3" */
                if ((w & 0xffffffffffffff00) == 0x696e6376616c3200) { /* "incval2" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        int64_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                MyGame_OtherNameSpace_FromInclude_parse_json_enum,
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 8, 8))) goto failed;
                            flatbuffers_int64_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "incval2" */
                    if ((w & 0xffffffffffff0000) == 0x696e6376616c0000) { /* "incval" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                        if (mark != buf) {
                            int64_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    MyGame_OtherNameSpace_FromInclude_parse_json_enum,
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 8, 8))) goto failed;
                                flatbuffers_int64_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "incval" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "incval" */
                } /* "incval2" */
            } else { /* branch "incval3" */
                if (w < 0x696e6376616c3400) { /* branch "incval4" */
                    if ((w & 0xffffffffffffff00) == 0x696e6376616c3300) { /* "incval3" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "incval3" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "incval3" */
                } else { /* branch "incval4" */
                    if ((w & 0xffffffffffffff00) == 0x696e6376616c3500) { /* "incval5" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            int64_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 8, 8))) goto failed;
                                flatbuffers_int64_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "incval5" */
                        if ((w & 0xffffffffffffff00) == 0x696e6376616c3400) { /* "incval4" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                int64_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        MyGame_OtherNameSpace_FromInclude_parse_json_enum,
                                        monster_test_local_MyGame_Example_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 8, 8))) goto failed;
                                    flatbuffers_int64_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "incval4" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "incval4" */
                    } /* "incval5" */
                } /* branch "incval4" */
            } /* branch "incval3" */
        } /* branch "incval" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_TestInclude_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_TestInclude_parse_json_table);
}

static const char *MyGame_Example_Vec3_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x7465737433000000) { /* branch "test3" */
            if ((w & 0xffffffffff000000) == 0x7465737432000000) { /* "test2" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    int8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            MyGame_Example_Color_parse_json_enum,
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 24);
                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_int8_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "test2" */
                if ((w & 0xffffffffff000000) == 0x7465737431000000) { /* "test1" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        double val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        pval = (void *)((size_t)struct_base + 16);
                        buf = flatcc_json_parser_double(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_double(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        flatbuffers_double_write_to_pe(pval, val);
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "test1" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "test1" */
            } /* "test2" */
        } else { /* branch "test3" */
            if (w < 0x7800000000000000) { /* branch "x" */
                if ((w & 0xffffffffff000000) == 0x7465737433000000) { /* "test3" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        pval = (void *)((size_t)struct_base + 26);
                        buf = MyGame_Example_Test_parse_json_struct_inline(ctx, buf, end, pval);
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "test3" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "test3" */
            } else { /* branch "x" */
                if (w < 0x7900000000000000) { /* branch "y" */
                    if ((w & 0xff00000000000000) == 0x7800000000000000) { /* "x" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            pval = (void *)((size_t)struct_base + 0);
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_float_write_to_pe(pval, val);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "x" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "x" */
                } else { /* branch "y" */
                    if ((w & 0xff00000000000000) == 0x7a00000000000000) { /* "z" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            pval = (void *)((size_t)struct_base + 8);
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_float_write_to_pe(pval, val);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "z" */
                        if ((w & 0xff00000000000000) == 0x7900000000000000) { /* "y" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                float val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        monster_test_local_MyGame_Example_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                pval = (void *)((size_t)struct_base + 4);
                                buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_float_write_to_pe(pval, val);
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "y" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "y" */
                    } /* "z" */
                } /* branch "y" */
            } /* branch "x" */
        } /* branch "test3" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *MyGame_Example_Vec3_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 32, 16))) goto failed;
    buf = MyGame_Example_Vec3_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_Vec3_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_Vec3_parse_json_struct);
}

static const char *MyGame_Example_Ability_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffff000000000000) == 0x6964000000000000) { /* "id" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
            if (mark != buf) {
                uint32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        monster_test_local_MyGame_Example_json_parser_enum,
                        monster_test_global_json_parser_enum, 0 };
                pval = (void *)((size_t)struct_base + 0);
                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                flatbuffers_uint32_write_to_pe(pval, val);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "id" */
            if (w == 0x64697374616e6365) { /* "distance" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 4);
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_uint32_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "distance" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "distance" */
        } /* "id" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *MyGame_Example_Ability_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 8, 4))) goto failed;
    buf = MyGame_Example_Ability_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_Ability_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_Ability_parse_json_struct);
}

static const char *MyGame_Example_Stat_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6964000000000000) { /* branch "id" */
            if ((w & 0xffffffffff000000) == 0x636f756e74000000) { /* "count" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    uint16_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != UINT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 2, 2))) goto failed;
                        flatbuffers_uint16_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "count" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "count" */
        } else { /* branch "id" */
            if ((w & 0xffffff0000000000) == 0x76616c0000000000) { /* "val" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    int64_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 8, 8))) goto failed;
                        flatbuffers_int64_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "val" */
                if ((w & 0xffff000000000000) == 0x6964000000000000) { /* "id" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "id" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "id" */
            } /* "val" */
        } /* branch "id" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_Stat_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_Stat_parse_json_table);
}

static const char *MyGame_Example_FooBar_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x666f6f0000000000) { /* branch "foo" */
            if ((w & 0xffffff0000000000) == 0x636f6c0000000000) { /* "col" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    size_t count = 3;
                    int8_t *base = (int8_t *)((size_t)struct_base + 104);
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        int8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                MyGame_Example_Color_parse_json_enum,
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (count) {
                            flatbuffers_int8_write_to_pe(base, val);
                            --count;
                            ++base;
                        } else if (!(ctx->flags & flatcc_json_parser_f_skip_array_overflow)) {
                            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_array_overflow);
                        }
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    if (count) {
                        if (ctx->flags & flatcc_json_parser_f_reject_array_underflow) {
                            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_array_underflow);
                        }
                        memset(base, 0, count * sizeof(*base));
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "col" */
                if ((w & 0xffffff0000000000) == 0x6261720000000000) { /* "bar" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        size_t count = 10;
                        int32_t *base = (int32_t *)((size_t)struct_base + 64);
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (count) {
                                flatbuffers_int32_write_to_pe(base, val);
                                --count;
                                ++base;
                            } else if (!(ctx->flags & flatcc_json_parser_f_skip_array_overflow)) {
                                return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_array_overflow);
                            }
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        if (count) {
                            if (ctx->flags & flatcc_json_parser_f_reject_array_underflow) {
                                return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_array_underflow);
                            }
                            memset(base, 0, count * sizeof(*base));
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "bar" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "bar" */
            } /* "col" */
        } else { /* branch "foo" */
            if (w < 0x7465737473000000) { /* branch "tests" */
                if ((w & 0xffffff0000000000) == 0x666f6f0000000000) { /* "foo" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        size_t count = 16;
                        float *base = (float *)((size_t)struct_base + 0);
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (count) {
                                flatbuffers_float_write_to_pe(base, val);
                                --count;
                                ++base;
                            } else if (!(ctx->flags & flatcc_json_parser_f_skip_array_overflow)) {
                                return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_array_overflow);
                            }
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        if (count) {
                            if (ctx->flags & flatcc_json_parser_f_reject_array_underflow) {
                                return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_array_underflow);
                            }
                            memset(base, 0, count * sizeof(*base));
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "foo" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "foo" */
            } else { /* branch "tests" */
                if ((w & 0xffffffff00000000) == 0x7465787400000000) { /* "text" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        char *base = (char *)((size_t)struct_base + 116);
                        buf = flatcc_json_parser_char_array(ctx, buf, end, base, 5);
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "text" */
                    if ((w & 0xffffffffff000000) == 0x7465737473000000) { /* "tests" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            size_t count = 2;
                            void *base = (void *)((size_t)struct_base + 108);
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                if (count) {
                                    buf = MyGame_Example_Test_parse_json_struct_inline(ctx, buf, end, base);
                                    --count;
                                    base = (void *)((size_t)base + 4);
                                } else if (!(ctx->flags & flatcc_json_parser_f_skip_array_overflow)) {
                                    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_array_overflow);
                                }
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            if (count) {
                                if (ctx->flags & flatcc_json_parser_f_reject_array_underflow) {
                                    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_array_underflow);
                                }
                                memset(base, 0, count * 4);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "tests" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "tests" */
                } /* "text" */
            } /* branch "tests" */
        } /* branch "foo" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *MyGame_Example_FooBar_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 124, 4))) goto failed;
    buf = MyGame_Example_FooBar_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_FooBar_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_FooBar_parse_json_struct);
}

static const char *MyGame_Example_Alt_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 9)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6d756c74696b0000) { /* branch "multik" */
            if (w < 0x6d616e79616e7900) { /* branch "manyany" */
                if (w == 0x66697865645f6172) { /* descend "fixed_ar" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffff0000000000) == 0x7261790000000000) { /* "ray" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 8, 124, 4))) goto failed;
                            buf = MyGame_Example_FooBar_parse_json_struct_inline(ctx, buf, end, pval);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ray" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "ray" */
                } else { /* descend "fixed_ar" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "fixed_ar" */
            } else { /* branch "manyany" */
                if (w == 0x6d616e79616e795f) { /* descend "manyany_" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    MyGame_Example_Any_parse_json_enum,
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_union_type_vector(ctx, buf, end, 0, 3, h_unions, symbolic_parsers, MyGame_Example_Any_parse_json_union, MyGame_Example_Any_json_union_accept_type);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "type" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "type" */
                } else { /* descend "manyany_" */
                    if ((w & 0xffffffffffffff00) == 0x6d616e79616e7900) { /* "manyany" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            buf = flatcc_json_parser_union_vector(ctx, buf, end, 0, 3, h_unions, MyGame_Example_Any_parse_json_union);
                        } else {
                            goto pfguard1;
                        }
                    } else { /* "manyany" */
                        goto pfguard1;
                    } /* "manyany" */
                    goto endpfguard1;
pfguard1:
                    if ((w & 0xffffffffff000000) == 0x6d6f766965000000) { /* "movie" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            buf = Fantasy_Movie_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "movie" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "movie" */
endpfguard1:
                    (void)0;
                } /* descend "manyany_" */
            } /* branch "manyany" */
        } else { /* branch "multik" */
            if (w < 0x7072656669780000) { /* branch "prefix" */
                if ((w & 0xffffffffff000000) == 0x6e616d6573000000) { /* "names" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 6))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "names" */
                    if ((w & 0xffffffffffff0000) == 0x6d756c74696b0000) { /* "multik" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                        if (mark != buf) {
                            if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                buf = MyGame_Example_MultipleKeys_parse_json_table(ctx, buf, end, &ref);
                                if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                *pref = ref;
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_offset_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 4))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "multik" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "multik" */
                } /* "names" */
            } else { /* branch "prefix" */
                if (w < 0x726170756e7a656c) { /* branch "rapunzel" */
                    if ((w & 0xffffffffffff0000) == 0x7072656669780000) { /* "prefix" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                        if (mark != buf) {
                            buf = MyGame_Example_TestJSONPrefix_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "prefix" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "prefix" */
                } else { /* branch "rapunzel" */
                    if (w == 0x726170756e7a656c) { /* descend "rapunzel" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 8, 4, UINT64_C(536870911))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = Fantasy_Rapunzel_parse_json_struct_inline(ctx, buf, end, pval);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 5))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "s" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "s" */
                    } else { /* descend "rapunzel" */
                        if ((w & 0xffffffffffffff00) == 0x73616d706c657300) { /* "samples" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    float val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            monster_test_local_MyGame_Example_json_parser_enum,
                                            monster_test_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_float_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 7))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "samples" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "samples" */
                    } /* descend "rapunzel" */
                } /* branch "rapunzel" */
            } /* branch "prefix" */
        } /* branch "multik" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_Alt_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_Alt_parse_json_table);
}

static const char *MyGame_Example_TestJSONPrefix_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x746573746a736f6e) { /* descend "testjson" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7072656669787061) { /* descend "prefixpa" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffff0000) == 0x7273696e67320000) { /* "rsing2" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        buf = MyGame_Example_TestJSONPrefixParsing2_parse_json_table(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        goto pfguard1;
                    }
                } else { /* "rsing2" */
                    if ((w & 0xffffffffff000000) == 0x7273696e67000000) { /* "rsing" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            buf = MyGame_Example_TestJSONPrefixParsing_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                            *pref = ref;
                        } else {
                            goto pfguard1;
                        }
                    } else { /* "rsing" */
                        goto pfguard1;
                    } /* "rsing" */
                } /* "rsing2" */
                goto endpfguard1;
pfguard1:
                if ((w & 0xffffffffffff0000) == 0x7273696e67330000) { /* "rsing3" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        buf = MyGame_Example_TestJSONPrefixParsing3_parse_json_table(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "rsing3" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "rsing3" */
endpfguard1:
                (void)0;
            } else { /* descend "prefixpa" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "prefixpa" */
        } else { /* descend "testjson" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "testjson" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_TestJSONPrefix_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_TestJSONPrefix_parse_json_table);
}

static const char *MyGame_Example_TestJSONPrefixParsing_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 9)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6363636300000000) { /* branch "cccc" */
            if (w == 0x6161616131323334) { /* descend "aaaa1234" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x3500000000000000) { /* "5" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        uint32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_uint32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "5" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "5" */
            } else { /* descend "aaaa1234" */
                if ((w & 0xffffffff00000000) == 0x6161616100000000) { /* "aaaa" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        goto pfguard1;
                    }
                } else { /* "aaaa" */
                    goto pfguard1;
                } /* "aaaa" */
                goto endpfguard1;
pfguard1:
                if (w == 0x6262626231323334) { /* "bbbb1234" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        int64_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 8, 8))) goto failed;
                            flatbuffers_int64_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "bbbb1234" */
                    if ((w & 0xffffffff00000000) == 0x6262626200000000) { /* "bbbb" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "bbbb" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "bbbb" */
                } /* "bbbb1234" */
endpfguard1:
                (void)0;
            } /* descend "aaaa1234" */
        } else { /* branch "cccc" */
            if (w == 0x6363636331323334) { /* descend "cccc1234" */
                /* descend prefix key "cccc1234" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                if (mark != buf) {
                    int64_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 8, 8))) goto failed;
                        flatbuffers_int64_write_to_pe(pval, val);
                    }
                } else {
                    /* descend suffix "cccc1234" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x3500000000000000) { /* "5" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            uint32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 4, 4))) goto failed;
                                flatbuffers_uint32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "5" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "5" */
                } /* desend suffix "cccc1234" */
            } else { /* descend "cccc1234" */
                if ((w & 0xffffffff00000000) == 0x6363636300000000) { /* "cccc" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 4))) goto failed;
                        *pref = ref;
                    } else {
                        goto pfguard2;
                    }
                } else { /* "cccc" */
                    goto pfguard2;
                } /* "cccc" */
                goto endpfguard2;
pfguard2:
                if (w == 0x6464646431323334) { /* descend "dddd1234" */
                    /* descend prefix key "dddd1234" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        int64_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 7, 8, 8))) goto failed;
                            flatbuffers_int64_write_to_pe(pval, val);
                        }
                    } else {
                        /* descend suffix "dddd1234" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x3500000000000000) { /* "5" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                uint32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        monster_test_local_MyGame_Example_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 8, 4, 4))) goto failed;
                                    flatbuffers_uint32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "5" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "5" */
                    } /* desend suffix "dddd1234" */
                } else { /* descend "dddd1234" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "dddd1234" */
endpfguard2:
                (void)0;
            } /* descend "cccc1234" */
        } /* branch "cccc" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_TestJSONPrefixParsing_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_TestJSONPrefixParsing_parse_json_table);
}

static const char *MyGame_Example_TestJSONPrefixParsing2_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x616161615f626262) { /* descend "aaaa_bbb" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffffff00) == 0x625f737465707300) { /* "b_steps" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    int64_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 8, 8))) goto failed;
                        flatbuffers_int64_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "b_steps" */
                if (w == 0x625f73746172745f) { /* "b_start_" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        uint32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_uint32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "b_start_" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "b_start_" */
            } /* "b_steps" */
        } else { /* descend "aaaa_bbb" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "aaaa_bbb" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_TestJSONPrefixParsing2_parse_json_table);
}

static const char *MyGame_Example_TestJSONPrefixParsing3_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x616161615f626262) { /* descend "aaaa_bbb" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x625f73746172745f) { /* descend "b_start_" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x7374657073000000) { /* "steps" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        uint32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_uint32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "steps" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "steps" */
            } else { /* descend "b_start_" */
                if ((w & 0xffffffffffffff00) == 0x625f737465707300) { /* "b_steps" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        int64_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 8, 8))) goto failed;
                            flatbuffers_int64_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "b_steps" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "b_steps" */
            } /* descend "b_start_" */
        } else { /* descend "aaaa_bbb" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "aaaa_bbb" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_TestJSONPrefixParsing3_parse_json_table);
}

static const char *MyGame_Example_TestBase64_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6e65737465640000) { /* branch "nested" */
            if ((w & 0xffffffff00000000) == 0x6461746100000000) { /* "data" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_uint8_vector_base64(ctx, buf, end, &ref, 0);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "data" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "data" */
        } else { /* branch "nested" */
            if ((w & 0xffffffffffffff00) == 0x75726c6461746100) { /* "urldata" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_uint8_vector_base64(ctx, buf, end, &ref, 1);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "urldata" */
                if ((w & 0xffffffffffff0000) == 0x6e65737465640000) { /* "nested" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_uint8_vector_base64(ctx, buf, end, &ref, 0);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "nested" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "nested" */
            } /* "urldata" */
        } /* branch "nested" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_TestBase64_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_TestBase64_parse_json_table);
}

static const char *MyGame_Example_MultipleKeys_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x68656c6c6f000000) { /* branch "hello" */
            if ((w & 0xffffffffffff0000) == 0x666f6f6261720000) { /* "foobar" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    int64_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_MyGame_Example_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 8, 8))) goto failed;
                        flatbuffers_int64_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "foobar" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "foobar" */
        } else { /* branch "hello" */
            if ((w & 0xffffffffff000000) == 0x776f726c64000000) { /* "world" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "world" */
                if ((w & 0xffffffffff000000) == 0x68656c6c6f000000) { /* "hello" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "hello" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "hello" */
            } /* "world" */
        } /* branch "hello" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_MultipleKeys_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_MultipleKeys_parse_json_table);
}

static const char *MyGame_Example_Monster_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 36)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x7465737461727261) { /* branch "testarra" */
            if (w < 0x6e616d6500000000) { /* branch "name" */
                if (w < 0x666c657800000000) { /* branch "flex" */
                    if ((w & 0xffffffffff000000) == 0x656e656d79000000) { /* "enemy" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            buf = MyGame_Example_Monster_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 12))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "enemy" */
                        if ((w & 0xffffffffff000000) == 0x636f6c6f72000000) { /* "color" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                            if (mark != buf) {
                                int8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        MyGame_Example_Color_parse_json_enum,
                                        monster_test_local_MyGame_Example_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != INT8_C(8) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 1, 1))) goto failed;
                                    flatbuffers_int8_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "color" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "color" */
                    } /* "enemy" */
                } else { /* branch "flex" */
                    if (w < 0x6870000000000000) { /* branch "hp" */
                        if ((w & 0xffffffff00000000) == 0x666c657800000000) { /* "flex" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            monster_test_local_MyGame_Example_json_parser_enum,
                                            monster_test_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_uint8_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 30))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "flex" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "flex" */
                    } else { /* branch "hp" */
                        if (w < 0x696e76656e746f72) { /* branch "inventor" */
                            if ((w & 0xffff000000000000) == 0x6870000000000000) { /* "hp" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                if (mark != buf) {
                                    int16_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            monster_test_local_MyGame_Example_json_parser_enum,
                                            monster_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != INT16_C(100) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 2, 2))) goto failed;
                                        flatbuffers_int16_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "hp" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "hp" */
                        } else { /* branch "inventor" */
                            if (w == 0x696e76656e746f72) { /* descend "inventor" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x7900000000000000) { /* "y" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                        while (more) {
                                            uint8_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    monster_test_local_MyGame_Example_json_parser_enum,
                                                    monster_test_global_json_parser_enum, 0 };
                                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                            buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            flatbuffers_uint8_write_to_pe(pval, val);
                                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                        }
                                        ref = flatcc_builder_end_vector(ctx->ctx);
                                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 5))) goto failed;
                                        *pref = ref;
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "y" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "y" */
                            } else { /* descend "inventor" */
                                if ((w & 0xffffffff00000000) == 0x6d616e6100000000) { /* "mana" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                    if (mark != buf) {
                                        int16_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                monster_test_local_MyGame_Example_json_parser_enum,
                                                monster_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != INT16_C(150) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 2, 2))) goto failed;
                                            flatbuffers_int16_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "mana" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "mana" */
                            } /* descend "inventor" */
                        } /* branch "inventor" */
                    } /* branch "hp" */
                } /* branch "flex" */
            } else { /* branch "name" */
                if (w < 0x7465737400000000) { /* branch "test" */
                    if (w < 0x706172656e745f6e) { /* branch "parent_n" */
                        if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "name" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "name" */
                    } else { /* branch "parent_n" */
                        if (w == 0x706172656e745f6e) { /* descend "parent_n" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x616d657370616365) { /* descend "amespace" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffff000000) == 0x5f74657374000000) { /* "_test" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                                    if (mark != buf) {
                                        buf = MyGame_InParentNamespace_parse_json_table(ctx, buf, end, &ref);
                                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 34))) goto failed;
                                        *pref = ref;
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "_test" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "_test" */
                            } else { /* descend "amespace" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "amespace" */
                        } else { /* descend "parent_n" */
                            if ((w & 0xffffff0000000000) == 0x706f730000000000) { /* "pos" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                if (mark != buf) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 32, 16))) goto failed;
                                    buf = MyGame_Example_Vec3_parse_json_struct_inline(ctx, buf, end, pval);
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "pos" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "pos" */
                        } /* descend "parent_n" */
                    } /* branch "parent_n" */
                } else { /* branch "test" */
                    if ((w & 0xffffffffff000000) == 0x7465737434000000) { /* "test4" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 4, 2, UINT64_C(1073741823))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = MyGame_Example_Test_parse_json_struct_inline(ctx, buf, end, pval);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 9))) goto failed;
                            *pref = ref;
                        } else {
                            goto pfguard1;
                        }
                    } else { /* "test4" */
                        if ((w & 0xffffffff00000000) == 0x7465737400000000) { /* "test" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                buf = flatcc_json_parser_union(ctx, buf, end, 0, 8, h_unions, MyGame_Example_Any_parse_json_union);
                            } else {
                                goto pfguard1;
                            }
                        } else { /* "test" */
                            goto pfguard1;
                        } /* "test" */
                    } /* "test4" */
                    goto endpfguard1;
pfguard1:
                    if ((w & 0xffffffffff000000) == 0x7465737435000000) { /* "test5" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 4, 2, UINT64_C(1073741823))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = MyGame_Example_Test_parse_json_struct_inline(ctx, buf, end, pval);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 31))) goto failed;
                            *pref = ref;
                        } else {
                            goto pfguard2;
                        }
                    } else { /* "test5" */
                        goto pfguard2;
                    } /* "test5" */
                    goto endpfguard2;
pfguard2:
                    if (w == 0x746573745f747970) { /* descend "test_typ" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        MyGame_Example_Any_parse_json_enum,
                                        monster_test_local_MyGame_Example_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 8, h_unions, symbolic_parsers, MyGame_Example_Any_parse_json_union);
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "e" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "e" */
                    } else { /* descend "test_typ" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "test_typ" */
endpfguard2:
                    (void)0;
endpfguard1:
                    (void)0;
                } /* branch "test" */
            } /* branch "name" */
        } else { /* branch "testarra" */
            if (w < 0x7465737466330000) { /* branch "testf3" */
                if (w == 0x7465737461727261) { /* descend "testarra" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w < 0x796f66737472696e) { /* branch "yofstrin" */
                        if (w == 0x796f66626f6f6c73) { /* "yofbools" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            monster_test_local_MyGame_Example_json_parser_enum,
                                            monster_test_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_bool_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 24))) goto failed;
                                *pref = ref;
                            } else {
                                goto pfguard3;
                            }
                        } else { /* "yofbools" */
                            goto pfguard3;
                        } /* "yofbools" */
                        goto endpfguard3;
pfguard3:
                        if (w == 0x796f66736f727465) { /* descend "yofsorte" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffffff00) == 0x6473747275637400) { /* "dstruct" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                                if (mark != buf) {
                                    if (flatcc_builder_start_vector(ctx->ctx, 8, 4, UINT64_C(536870911))) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                        buf = MyGame_Example_Ability_parse_json_struct_inline(ctx, buf, end, pval);
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 29))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "dstruct" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "dstruct" */
                        } else { /* descend "yofsorte" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "yofsorte" */
endpfguard3:
                        (void)0;
                    } else { /* branch "yofstrin" */
                        if (w == 0x796f66737472696e) { /* descend "yofstrin" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x6732000000000000) { /* "g2" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                if (mark != buf) {
                                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                                        if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                        *pref = ref;
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 28))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "g2" */
                                if ((w & 0xff00000000000000) == 0x6700000000000000) { /* "g" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                        while (more) {
                                            buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                            *pref = ref;
                                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                        }
                                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 10))) goto failed;
                                        *pref = ref;
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "g" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "g" */
                            } /* "g2" */
                        } else { /* descend "yofstrin" */
                            if (w == 0x796f667461626c65) { /* descend "yoftable" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                        while (more) {
                                            buf = MyGame_Example_Monster_parse_json_table(ctx, buf, end, &ref);
                                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                            *pref = ref;
                                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                        }
                                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 11))) goto failed;
                                        *pref = ref;
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "s" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "s" */
                            } else { /* descend "yoftable" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "yoftable" */
                        } /* descend "yofstrin" */
                    } /* branch "yofstrin" */
                } else { /* descend "testarra" */
                    if (w < 0x74657374656d7074) { /* branch "testempt" */
                        if (w == 0x7465737462617365) { /* descend "testbase" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x3634000000000000) { /* "64" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                if (mark != buf) {
                                    buf = MyGame_Example_TestBase64_parse_json_table(ctx, buf, end, &ref);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 35))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "64" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "64" */
                        } else { /* descend "testbase" */
                            if (w == 0x74657374626f6f6c) { /* "testbool" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            monster_test_local_MyGame_Example_json_parser_enum,
                                            monster_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT8_C(1) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 15, 1, 1))) goto failed;
                                        flatbuffers_bool_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "testbool" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "testbool" */
                        } /* descend "testbase" */
                    } else { /* branch "testempt" */
                        if (w < 0x7465737466000000) { /* branch "testf" */
                            if (w == 0x74657374656d7074) { /* descend "testempt" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x7900000000000000) { /* "y" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        buf = MyGame_Example_Stat_parse_json_table(ctx, buf, end, &ref);
                                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 14))) goto failed;
                                        *pref = ref;
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "y" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "y" */
                            } else { /* descend "testempt" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "testempt" */
                        } else { /* branch "testf" */
                            if ((w & 0xffffffffffff0000) == 0x7465737466320000) { /* "testf2" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                                if (mark != buf) {
                                    float val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            monster_test_local_MyGame_Example_json_parser_enum,
                                            monster_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 3.00000000f || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 26, 4, 4))) goto failed;
                                        flatbuffers_float_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "testf2" */
                                if ((w & 0xffffffffff000000) == 0x7465737466000000) { /* "testf" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                                    if (mark != buf) {
                                        float val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                monster_test_local_MyGame_Example_json_parser_enum,
                                                monster_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != 314159.000f || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 25, 4, 4))) goto failed;
                                            flatbuffers_float_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "testf" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "testf" */
                            } /* "testf2" */
                        } /* branch "testf" */
                    } /* branch "testempt" */
                } /* descend "testarra" */
            } else { /* branch "testf3" */
                if (w < 0x7465737468617368) { /* branch "testhash" */
                    if ((w & 0xffffffffffff0000) == 0x7465737466330000) { /* "testf3" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                        if (mark != buf) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0.00000000f || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 27, 4, 4))) goto failed;
                                flatbuffers_float_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "testf3" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "testf3" */
                } else { /* branch "testhash" */
                    if (w == 0x7465737468617368) { /* descend "testhash" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w < 0x7336345f666e7631) { /* branch "s64_fnv1" */
                            if (w == 0x7333325f666e7631) { /* descend "s32_fnv1" */
                                /* descend prefix key "s32_fnv1" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    int32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            monster_test_local_MyGame_Example_json_parser_enum,
                                            monster_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 16, 4, 4))) goto failed;
                                        flatbuffers_int32_write_to_pe(pval, val);
                                    }
                                } else {
                                    /* descend suffix "s32_fnv1" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x6100000000000000) { /* "a" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                        if (mark != buf) {
                                            int32_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    monster_test_local_MyGame_Example_json_parser_enum,
                                                    monster_test_global_json_parser_enum, 0 };
                                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 20, 4, 4))) goto failed;
                                                flatbuffers_int32_write_to_pe(pval, val);
                                            }
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "a" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "a" */
                                } /* desend suffix "s32_fnv1" */
                            } else { /* descend "s32_fnv1" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "s32_fnv1" */
                        } else { /* branch "s64_fnv1" */
                            if (w < 0x7533325f666e7631) { /* branch "u32_fnv1" */
                                if (w == 0x7336345f666e7631) { /* descend "s64_fnv1" */
                                    /* descend prefix key "s64_fnv1" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                    if (mark != buf) {
                                        int64_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                monster_test_local_MyGame_Example_json_parser_enum,
                                                monster_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 18, 8, 8))) goto failed;
                                            flatbuffers_int64_write_to_pe(pval, val);
                                        }
                                    } else {
                                        /* descend suffix "s64_fnv1" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xff00000000000000) == 0x6100000000000000) { /* "a" */
                                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                            if (mark != buf) {
                                                int64_t val = 0;
                                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                        monster_test_local_MyGame_Example_json_parser_enum,
                                                        monster_test_global_json_parser_enum, 0 };
                                                buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                                                if (mark == buf) {
                                                    buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                    if (buf == mark || buf == end) goto failed;
                                                }
                                                if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 22, 8, 8))) goto failed;
                                                    flatbuffers_int64_write_to_pe(pval, val);
                                                }
                                            } else {
                                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                            }
                                        } else { /* "a" */
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        } /* "a" */
                                    } /* desend suffix "s64_fnv1" */
                                } else { /* descend "s64_fnv1" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* descend "s64_fnv1" */
                            } else { /* branch "u32_fnv1" */
                                if (w == 0x7533325f666e7631) { /* descend "u32_fnv1" */
                                    /* descend prefix key "u32_fnv1" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                    if (mark != buf) {
                                        uint32_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                monster_test_local_MyGame_Example_json_parser_enum,
                                                monster_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 17, 4, 4))) goto failed;
                                            flatbuffers_uint32_write_to_pe(pval, val);
                                        }
                                    } else {
                                        /* descend suffix "u32_fnv1" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xff00000000000000) == 0x6100000000000000) { /* "a" */
                                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                            if (mark != buf) {
                                                uint32_t val = 0;
                                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                        monster_test_local_MyGame_Example_json_parser_enum,
                                                        monster_test_global_json_parser_enum, 0 };
                                                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                                if (mark == buf) {
                                                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                    if (buf == mark || buf == end) goto failed;
                                                }
                                                if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 21, 4, 4))) goto failed;
                                                    flatbuffers_uint32_write_to_pe(pval, val);
                                                }
                                            } else {
                                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                            }
                                        } else { /* "a" */
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        } /* "a" */
                                    } /* desend suffix "u32_fnv1" */
                                } else { /* descend "u32_fnv1" */
                                    if (w == 0x7536345f666e7631) { /* descend "u64_fnv1" */
                                        /* descend prefix key "u64_fnv1" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                        if (mark != buf) {
                                            uint64_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    monster_test_local_MyGame_Example_json_parser_enum,
                                                    monster_test_global_json_parser_enum, 0 };
                                            buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            if (val != UINT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 19, 8, 8))) goto failed;
                                                flatbuffers_uint64_write_to_pe(pval, val);
                                            }
                                        } else {
                                            /* descend suffix "u64_fnv1" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xff00000000000000) == 0x6100000000000000) { /* "a" */
                                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                                if (mark != buf) {
                                                    uint64_t val = 0;
                                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                            monster_test_local_MyGame_Example_json_parser_enum,
                                                            monster_test_global_json_parser_enum, 0 };
                                                    buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                                    if (mark == buf) {
                                                        buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                        if (buf == mark || buf == end) goto failed;
                                                    }
                                                    if (val != UINT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 23, 8, 8))) goto failed;
                                                        flatbuffers_uint64_write_to_pe(pval, val);
                                                    }
                                                } else {
                                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                                }
                                            } else { /* "a" */
                                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                            } /* "a" */
                                        } /* desend suffix "u64_fnv1" */
                                    } else { /* descend "u64_fnv1" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* descend "u64_fnv1" */
                                } /* descend "u32_fnv1" */
                            } /* branch "u32_fnv1" */
                        } /* branch "s64_fnv1" */
                    } else { /* descend "testhash" */
                        if (w < 0x766563746f725f6f) { /* branch "vector_o" */
                            if (w == 0x746573746e657374) { /* descend "testnest" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x6564666c61746275) { /* descend "edflatbu" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffff00000000) == 0x6666657200000000) { /* "ffer" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                        if (mark != buf) {
                                            if (buf != end && *buf == '[') { /* begin nested */
                                                if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                                while (more) {
                                                    uint8_t val = 0;
                                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                            monster_test_local_MyGame_Example_json_parser_enum,
                                                            monster_test_global_json_parser_enum, 0 };
                                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                                    if (mark == buf) {
                                                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                        if (buf == mark || buf == end) goto failed;
                                                    }
                                                    flatbuffers_uint8_write_to_pe(pval, val);
                                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                                }
                                                ref = flatcc_builder_end_vector(ctx->ctx);
                                            } else { /* nested */
                                                if (flatcc_builder_start_buffer(ctx->ctx, 0, 0, 0)) goto failed;
                                                buf = MyGame_Example_Monster_parse_json_table(ctx, buf, end, &ref);
                                                if (!ref) goto failed;
                                                ref = flatcc_builder_end_buffer(ctx->ctx, ref);
                                            } /* end nested */
                                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 13))) goto failed;
                                            *pref = ref;
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "ffer" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "ffer" */
                                } else { /* descend "edflatbu" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* descend "edflatbu" */
                            } else { /* descend "testnest" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "testnest" */
                        } else { /* branch "vector_o" */
                            if (w == 0x766563746f725f6f) { /* descend "vector_o" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x665f646f75626c65) { /* descend "f_double" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                        if (mark != buf) {
                                            if (flatcc_builder_start_vector(ctx->ctx, 8, 8, UINT64_C(536870911))) goto failed;
                                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                            while (more) {
                                                double val = 0;
                                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                        monster_test_local_MyGame_Example_json_parser_enum,
                                                        monster_test_global_json_parser_enum, 0 };
                                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                                buf = flatcc_json_parser_double(ctx, (mark = buf), end, &val);
                                                if (mark == buf) {
                                                    buf = flatcc_json_parser_symbolic_double(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                    if (buf == mark || buf == end) goto failed;
                                                }
                                                flatbuffers_double_write_to_pe(pval, val);
                                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                            }
                                            ref = flatcc_builder_end_vector(ctx->ctx);
                                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 33))) goto failed;
                                            *pref = ref;
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "s" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "s" */
                                } else { /* descend "f_double" */
                                    if ((w & 0xffffffffffffff00) == 0x665f6c6f6e677300) { /* "f_longs" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                                        if (mark != buf) {
                                            if (flatcc_builder_start_vector(ctx->ctx, 8, 8, UINT64_C(536870911))) goto failed;
                                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                            while (more) {
                                                int64_t val = 0;
                                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                        monster_test_local_MyGame_Example_json_parser_enum,
                                                        monster_test_global_json_parser_enum, 0 };
                                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                                buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                                                if (mark == buf) {
                                                    buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                    if (buf == mark || buf == end) goto failed;
                                                }
                                                flatbuffers_int64_write_to_pe(pval, val);
                                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                            }
                                            ref = flatcc_builder_end_vector(ctx->ctx);
                                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 32))) goto failed;
                                            *pref = ref;
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "f_longs" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "f_longs" */
                                } /* descend "f_double" */
                            } else { /* descend "vector_o" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "vector_o" */
                        } /* branch "vector_o" */
                    } /* descend "testhash" */
                } /* branch "testhash" */
            } /* branch "testf3" */
        } /* branch "testarra" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!flatcc_builder_check_required_field(ctx->ctx, 3)
    ) {
        buf = flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_required);
        goto failed;
    }
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_Monster_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_Monster_parse_json_table);
}

static const char *MyGame_Example_TypeAliases_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 12)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6938000000000000) { /* branch "i8" */
            if (w < 0x6931360000000000) { /* branch "i16" */
                if ((w & 0xffffff0000000000) == 0x6636340000000000) { /* "f64" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        double val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_MyGame_Example_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_double(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_double(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0.0000000000000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 9, 8, 8))) goto failed;
                            flatbuffers_double_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "f64" */
                    if ((w & 0xffffff0000000000) == 0x6633320000000000) { /* "f32" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0.00000000f || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 8, 4, 4))) goto failed;
                                flatbuffers_float_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "f32" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "f32" */
                } /* "f64" */
            } else { /* branch "i16" */
                if (w < 0x6933320000000000) { /* branch "i32" */
                    if ((w & 0xffffff0000000000) == 0x6931360000000000) { /* "i16" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            int16_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 2, 2))) goto failed;
                                flatbuffers_int16_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "i16" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "i16" */
                } else { /* branch "i32" */
                    if ((w & 0xffffff0000000000) == 0x6936340000000000) { /* "i64" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            int64_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 8, 8))) goto failed;
                                flatbuffers_int64_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "i64" */
                        if ((w & 0xffffff0000000000) == 0x6933320000000000) { /* "i32" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                            if (mark != buf) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        monster_test_local_MyGame_Example_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 4, 4))) goto failed;
                                    flatbuffers_int32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "i32" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "i32" */
                    } /* "i64" */
                } /* branch "i32" */
            } /* branch "i16" */
        } else { /* branch "i8" */
            if (w < 0x7536340000000000) { /* branch "u64" */
                if (w < 0x7531360000000000) { /* branch "u16" */
                    if ((w & 0xffff000000000000) == 0x6938000000000000) { /* "i8" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "i8" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "i8" */
                } else { /* branch "u16" */
                    if ((w & 0xffffff0000000000) == 0x7533320000000000) { /* "u32" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            uint32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 4, 4))) goto failed;
                                flatbuffers_uint32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "u32" */
                        if ((w & 0xffffff0000000000) == 0x7531360000000000) { /* "u16" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                            if (mark != buf) {
                                uint16_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        monster_test_local_MyGame_Example_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 2, 2))) goto failed;
                                    flatbuffers_uint16_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "u16" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "u16" */
                    } /* "u32" */
                } /* branch "u16" */
            } else { /* branch "u64" */
                if (w < 0x7538000000000000) { /* branch "u8" */
                    if ((w & 0xffffff0000000000) == 0x7536340000000000) { /* "u64" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            uint64_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    monster_test_local_MyGame_Example_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != UINT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 7, 8, 8))) goto failed;
                                flatbuffers_uint64_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "u64" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "u64" */
                } else { /* branch "u8" */
                    if (w < 0x7638000000000000) { /* branch "v8" */
                        if ((w & 0xffff000000000000) == 0x7538000000000000) { /* "u8" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        monster_test_local_MyGame_Example_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                                    flatbuffers_uint8_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "u8" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "u8" */
                    } else { /* branch "v8" */
                        if ((w & 0xffffffff00000000) == 0x7666363400000000) { /* "vf64" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 8, 8, UINT64_C(536870911))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    double val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            monster_test_local_MyGame_Example_json_parser_enum,
                                            monster_test_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_double(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_double(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_double_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 11))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "vf64" */
                            if ((w & 0xffff000000000000) == 0x7638000000000000) { /* "v8" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                if (mark != buf) {
                                    if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        int8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                monster_test_local_MyGame_Example_json_parser_enum,
                                                monster_test_global_json_parser_enum, 0 };
                                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                        buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        flatbuffers_int8_write_to_pe(pval, val);
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 10))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "v8" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "v8" */
                        } /* "vf64" */
                    } /* branch "v8" */
                } /* branch "u8" */
            } /* branch "u64" */
        } /* branch "i8" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int MyGame_Example_TypeAliases_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, MyGame_Example_TypeAliases_parse_json_table);
}

static const char *Fantasy_Attacker_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x73776f72645f6174) { /* descend "sword_at" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7461636b5f64616d) { /* descend "tack_dam" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x6167650000000000) { /* "age" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                monster_test_local_Fantasy_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "age" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "age" */
            } else { /* descend "tack_dam" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tack_dam" */
        } else { /* descend "sword_at" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "sword_at" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int Fantasy_Attacker_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, Fantasy_Attacker_parse_json_table);
}

static const char *Fantasy_Rapunzel_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x686169725f6c656e) { /* descend "hair_len" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x6774680000000000) { /* "gth" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    uint16_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_Fantasy_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 0);
                    buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_uint16_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "gth" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "gth" */
        } else { /* descend "hair_len" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "hair_len" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *Fantasy_Rapunzel_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 8, 4))) goto failed;
    buf = Fantasy_Rapunzel_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int Fantasy_Rapunzel_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, Fantasy_Rapunzel_parse_json_struct);
}

static const char *Fantasy_BookReader_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x626f6f6b735f7265) { /* descend "books_re" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x6164000000000000) { /* "ad" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            monster_test_local_Fantasy_json_parser_enum,
                            monster_test_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 0);
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_int32_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ad" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ad" */
        } else { /* descend "books_re" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "books_re" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *Fantasy_BookReader_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 4, 4))) goto failed;
    buf = Fantasy_BookReader_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int Fantasy_BookReader_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, Fantasy_BookReader_parse_json_struct);
}

static const char *Fantasy_Character_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 2: /* MuLan */
        buf = Fantasy_Attacker_parse_json_table(ctx, buf, end, result);
        break;
    case 8: /* Rapunzel */
        buf = Fantasy_Rapunzel_parse_json_struct(ctx, buf, end, result);
        break;
    case 9: /* Belle */
        buf = Fantasy_BookReader_parse_json_struct(ctx, buf, end, result);
        break;
    case 10: /* BookFan */
        buf = Fantasy_BookReader_parse_json_struct(ctx, buf, end, result);
        break;
    case 11: /* Other */
        buf = flatcc_json_parser_build_string(ctx, buf, end, result);
        break;
    case 255: /* Unused */
        buf = flatcc_json_parser_build_string(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int Fantasy_Character_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 2: return 1; /* MuLan */
    case 8: return 1; /* Rapunzel */
    case 9: return 1; /* Belle */
    case 10: return 1; /* BookFan */
    case 11: return 1; /* Other */
    case 255: return 1; /* Unused */
    default: return 0;
    }
}

static const char *Fantasy_Character_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x4e4f4e4500000000) { /* branch "NONE" */
        if (w < 0x426f6f6b46616e00) { /* branch "BookFan" */
            if ((w & 0xffffffffff000000) == 0x42656c6c65000000) { /* "Belle" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(9), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "Belle" */
                return unmatched;
            } /* "Belle" */
        } else { /* branch "BookFan" */
            if ((w & 0xffffffffff000000) == 0x4d754c616e000000) { /* "MuLan" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "MuLan" */
                if ((w & 0xffffffffffffff00) == 0x426f6f6b46616e00) { /* "BookFan" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(10), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "BookFan" */
                    return unmatched;
                } /* "BookFan" */
            } /* "MuLan" */
        } /* branch "BookFan" */
    } else { /* branch "NONE" */
        if (w < 0x4f74686572000000) { /* branch "Other" */
            if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(0), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "NONE" */
                return unmatched;
            } /* "NONE" */
        } else { /* branch "Other" */
            if (w < 0x526170756e7a656c) { /* branch "Rapunzel" */
                if ((w & 0xffffffffff000000) == 0x4f74686572000000) { /* "Other" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(11), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "Other" */
                    return unmatched;
                } /* "Other" */
            } else { /* branch "Rapunzel" */
                if ((w & 0xffffffffffff0000) == 0x556e757365640000) { /* "Unused" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(255), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "Unused" */
                    if (w == 0x526170756e7a656c) { /* "Rapunzel" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(8), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "Rapunzel" */
                        return unmatched;
                    } /* "Rapunzel" */
                } /* "Unused" */
            } /* branch "Rapunzel" */
        } /* branch "Other" */
    } /* branch "NONE" */
    return buf;
}

static const char *Fantasy_Movie_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 10)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 5, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6368617261637465) { /* branch "characte" */
            if (w == 0x616e7461676f6e69) { /* descend "antagoni" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffffff00) == 0x73745f7479706500) { /* "st_type" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                Fantasy_Character_parse_json_enum,
                                monster_test_local_Fantasy_json_parser_enum,
                                monster_test_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_union_type(ctx, buf, end, 1, 3, h_unions, symbolic_parsers, Fantasy_Character_parse_json_union);
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "st_type" */
                    if ((w & 0xffff000000000000) == 0x7374000000000000) { /* "st" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                        if (mark != buf) {
                            buf = flatcc_json_parser_union(ctx, buf, end, 1, 3, h_unions, Fantasy_Character_parse_json_union);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "st" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "st" */
                } /* "st_type" */
            } else { /* descend "antagoni" */
                if (w == 0x63616d656f5f7479) { /* descend "cameo_ty" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffff000000000000) == 0x7065000000000000) { /* "pe" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                        if (mark != buf) {
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    Fantasy_Character_parse_json_enum,
                                    monster_test_local_Fantasy_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_union_type(ctx, buf, end, 3, 7, h_unions, symbolic_parsers, Fantasy_Character_parse_json_union);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "pe" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "pe" */
                } else { /* descend "cameo_ty" */
                    if ((w & 0xffffffffff000000) == 0x63616d656f000000) { /* "cameo" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            buf = flatcc_json_parser_union(ctx, buf, end, 3, 7, h_unions, Fantasy_Character_parse_json_union);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "cameo" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "cameo" */
                } /* descend "cameo_ty" */
            } /* descend "antagoni" */
        } else { /* branch "characte" */
            if (w < 0x6d61696e5f636861) { /* branch "main_cha" */
                if (w == 0x6368617261637465) { /* descend "characte" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffffff00) == 0x72735f7479706500) { /* "rs_type" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    Fantasy_Character_parse_json_enum,
                                    monster_test_local_Fantasy_json_parser_enum,
                                    monster_test_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_union_type_vector(ctx, buf, end, 4, 9, h_unions, symbolic_parsers, Fantasy_Character_parse_json_union, Fantasy_Character_json_union_accept_type);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "rs_type" */
                        if ((w & 0xffff000000000000) == 0x7273000000000000) { /* "rs" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                buf = flatcc_json_parser_union_vector(ctx, buf, end, 4, 9, h_unions, Fantasy_Character_parse_json_union);
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "rs" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "rs" */
                    } /* "rs_type" */
                } else { /* descend "characte" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "characte" */
            } else { /* branch "main_cha" */
                if (w == 0x6d61696e5f636861) { /* descend "main_cha" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x7261637465725f74) { /* descend "racter_t" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffff0000000000) == 0x7970650000000000) { /* "ype" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                            if (mark != buf) {
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        Fantasy_Character_parse_json_enum,
                                        monster_test_local_Fantasy_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, Fantasy_Character_parse_json_union);
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "ype" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "ype" */
                    } else { /* descend "racter_t" */
                        if ((w & 0xffffffffffff0000) == 0x7261637465720000) { /* "racter" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                            if (mark != buf) {
                                buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, Fantasy_Character_parse_json_union);
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "racter" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "racter" */
                    } /* descend "racter_t" */
                } else { /* descend "main_cha" */
                    if (w == 0x736964655f6b6963) { /* descend "side_kic" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffff0000) == 0x6b5f747970650000) { /* "k_type" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                            if (mark != buf) {
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        Fantasy_Character_parse_json_enum,
                                        monster_test_local_Fantasy_json_parser_enum,
                                        monster_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_union_type(ctx, buf, end, 2, 5, h_unions, symbolic_parsers, Fantasy_Character_parse_json_union);
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "k_type" */
                            if ((w & 0xff00000000000000) == 0x6b00000000000000) { /* "k" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    buf = flatcc_json_parser_union(ctx, buf, end, 2, 5, h_unions, Fantasy_Character_parse_json_union);
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "k" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "k" */
                        } /* "k_type" */
                    } else { /* descend "side_kic" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "side_kic" */
                } /* descend "main_cha" */
            } /* branch "main_cha" */
        } /* branch "characte" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int Fantasy_Movie_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, Fantasy_Movie_parse_json_table);
}

static const char *Fantasy_ReorderedEnum_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x7279000000000000) { /* branch "ry" */
        if ((w & 0xffff000000000000) == 0x7278000000000000) { /* "rx" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
            if (buf != mark) {
                *value = UINT64_C(10), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "rx" */
            return unmatched;
        } /* "rx" */
    } else { /* branch "ry" */
        if ((w & 0xffff000000000000) == 0x727a000000000000) { /* "rz" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
            if (buf != mark) {
                *value = UINT64_C(9), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "rz" */
            if ((w & 0xffff000000000000) == 0x7279000000000000) { /* "ry" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "ry" */
                return unmatched;
            } /* "ry" */
        } /* "rz" */
    } /* branch "ry" */
    return buf;
}

static const char *Fantasy_ReorderedColor_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x52477265656e0000) { /* branch "RGreen" */
        if ((w & 0xffffffffff000000) == 0x52426c7565000000) { /* "RBlue" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
            if (buf != mark) {
                *value = UINT64_C(8), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "RBlue" */
            return unmatched;
        } /* "RBlue" */
    } else { /* branch "RGreen" */
        if ((w & 0xffffffff00000000) == 0x5252656400000000) { /* "RRed" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "RRed" */
            if ((w & 0xffffffffffff0000) == 0x52477265656e0000) { /* "RGreen" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "RGreen" */
                return unmatched;
            } /* "RGreen" */
        } /* "RRed" */
    } /* branch "RGreen" */
    return buf;
}

static const char *monster_test_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *monster_test_local_MyGame_Example_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x6865785f656e756d) { /* branch "hex_enum" */
        if (w < 0x436f6c6f72000000) { /* branch "Color" */
            if ((w & 0xffffff0000000000) == 0x416e790000000000) { /* "Any" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                if (buf != mark) {
                    buf = MyGame_Example_Any_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "Any" */
                return unmatched;
            } /* "Any" */
        } else { /* branch "Color" */
            if ((w & 0xffffff0000000000) == 0x466f6f0000000000) { /* "Foo" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                if (buf != mark) {
                    buf = MyGame_Example_Foo_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "Foo" */
                if ((w & 0xffffffffff000000) == 0x436f6c6f72000000) { /* "Color" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                    if (buf != mark) {
                        buf = MyGame_Example_Color_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "Color" */
                    return unmatched;
                } /* "Color" */
            } /* "Foo" */
        } /* branch "Color" */
    } else { /* branch "hex_enum" */
        if (w < 0x696e745f656e756d) { /* branch "int_enum" */
            if (w == 0x6865785f656e756d) { /* "hex_enum" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                if (buf != mark) {
                    buf = MyGame_Example_hex_enum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "hex_enum" */
                return unmatched;
            } /* "hex_enum" */
        } else { /* branch "int_enum" */
            if (w < 0x6e65675f656e756d) { /* branch "neg_enum" */
                if (w == 0x696e745f656e756d) { /* "int_enum" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                    if (buf != mark) {
                        buf = MyGame_Example_int_enum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "int_enum" */
                    return unmatched;
                } /* "int_enum" */
            } else { /* branch "neg_enum" */
                if (w == 0x6e65675f656e756d) { /* "neg_enum" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                    if (buf != mark) {
                        buf = MyGame_Example_neg_enum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        goto pfguard1;
                    }
                } else { /* "neg_enum" */
                    goto pfguard1;
                } /* "neg_enum" */
                goto endpfguard1;
pfguard1:
                if (w == 0x6e6f74656d707479) { /* descend "notempty" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x656e756d00000000) { /* "enum" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
                        if (buf != mark) {
                            buf = MyGame_Example_notemptyenum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "enum" */
                        return unmatched;
                    } /* "enum" */
                } else { /* descend "notempty" */
                    return unmatched;
                } /* descend "notempty" */
endpfguard1:
                (void)0;
            } /* branch "neg_enum" */
        } /* branch "int_enum" */
    } /* branch "hex_enum" */
    return buf;
}

static const char *monster_test_local_MyGame_Example2_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffff0000000000) == 0x666f6f0000000000) { /* "foo" */
        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
        if (buf != mark) {
            buf = MyGame_Example2_foo_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
        } else {
            return unmatched;
        }
    } else { /* "foo" */
        return unmatched;
    } /* "foo" */
    return buf;
}

static const char *monster_test_local_MyGame_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *monster_test_local_Fantasy_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x52656f7264657265) { /* branch "Reordere" */
        if (w == 0x4368617261637465) { /* descend "Characte" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x7200000000000000) { /* "r" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                if (buf != mark) {
                    buf = Fantasy_Character_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "r" */
                return unmatched;
            } /* "r" */
        } else { /* descend "Characte" */
            return unmatched;
        } /* descend "Characte" */
    } else { /* branch "Reordere" */
        if (w == 0x52656f7264657265) { /* descend "Reordere" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffff000000) == 0x64456e756d000000) { /* "dEnum" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                if (buf != mark) {
                    buf = Fantasy_ReorderedEnum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "dEnum" */
                if ((w & 0xffffffffffff0000) == 0x64436f6c6f720000) { /* "dColor" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                    if (buf != mark) {
                        buf = Fantasy_ReorderedColor_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "dColor" */
                    return unmatched;
                } /* "dColor" */
            } /* "dEnum" */
        } else { /* descend "Reordere" */
            return unmatched;
        } /* descend "Reordere" */
    } /* branch "Reordere" */
    return buf;
}

static const char *monster_test_local_MyGame_OtherNameSpace_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x46726f6d496e636c) { /* descend "FromIncl" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffff0000000000) == 0x7564650000000000) { /* "ude" */
            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
            if (buf != mark) {
                buf = MyGame_OtherNameSpace_FromInclude_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
            } else {
                return unmatched;
            }
        } else { /* "ude" */
            return unmatched;
        } /* "ude" */
    } else { /* descend "FromIncl" */
        return unmatched;
    } /* descend "FromIncl" */
    return buf;
}

static const char *monster_test_local_MyGame_Example2_SubSystem_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x5375625379737465) { /* descend "SubSyste" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffff000000000000) == 0x6d42000000000000) { /* "mB" */
            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
            if (buf != mark) {
                buf = MyGame_Example2_SubSystem_SubSystemB_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
            } else {
                return unmatched;
            }
        } else { /* "mB" */
            if ((w & 0xffff000000000000) == 0x6d41000000000000) { /* "mA" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                if (buf != mark) {
                    buf = MyGame_Example2_SubSystem_SubSystemA_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "mA" */
                return unmatched;
            } /* "mA" */
        } /* "mB" */
    } else { /* descend "SubSyste" */
        return unmatched;
    } /* descend "SubSyste" */
    return buf;
}

static const char *monster_test_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x4d7947616d652e45) { /* branch "MyGame.E" */
        if (w == 0x46616e746173792e) { /* descend "Fantasy." */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w < 0x52656f7264657265) { /* branch "Reordere" */
                if (w == 0x4368617261637465) { /* descend "Characte" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x7200000000000000) { /* "r" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                        if (buf != mark) {
                            buf = Fantasy_Character_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "r" */
                        return unmatched;
                    } /* "r" */
                } else { /* descend "Characte" */
                    return unmatched;
                } /* descend "Characte" */
            } else { /* branch "Reordere" */
                if (w == 0x52656f7264657265) { /* descend "Reordere" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x64456e756d000000) { /* "dEnum" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                        if (buf != mark) {
                            buf = Fantasy_ReorderedEnum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "dEnum" */
                        if ((w & 0xffffffffffff0000) == 0x64436f6c6f720000) { /* "dColor" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                            if (buf != mark) {
                                buf = Fantasy_ReorderedColor_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "dColor" */
                            return unmatched;
                        } /* "dColor" */
                    } /* "dEnum" */
                } else { /* descend "Reordere" */
                    return unmatched;
                } /* descend "Reordere" */
            } /* branch "Reordere" */
        } else { /* descend "Fantasy." */
            return unmatched;
        } /* descend "Fantasy." */
    } else { /* branch "MyGame.E" */
        if (w == 0x4d7947616d652e45) { /* descend "MyGame.E" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w < 0x78616d706c652e69) { /* branch "xample.i" */
                if (w < 0x78616d706c652e43) { /* branch "xample.C" */
                    if (w == 0x78616d706c652e41) { /* descend "xample.A" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffff000000000000) == 0x6e79000000000000) { /* "ny" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                            if (buf != mark) {
                                buf = MyGame_Example_Any_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "ny" */
                            return unmatched;
                        } /* "ny" */
                    } else { /* descend "xample.A" */
                        return unmatched;
                    } /* descend "xample.A" */
                } else { /* branch "xample.C" */
                    if (w < 0x78616d706c652e46) { /* branch "xample.F" */
                        if (w == 0x78616d706c652e43) { /* descend "xample.C" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffff00000000) == 0x6f6c6f7200000000) { /* "olor" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
                                if (buf != mark) {
                                    buf = MyGame_Example_Color_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "olor" */
                                return unmatched;
                            } /* "olor" */
                        } else { /* descend "xample.C" */
                            return unmatched;
                        } /* descend "xample.C" */
                    } else { /* branch "xample.F" */
                        if (w == 0x78616d706c652e46) { /* descend "xample.F" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x6f6f000000000000) { /* "oo" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                                if (buf != mark) {
                                    buf = MyGame_Example_Foo_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "oo" */
                                return unmatched;
                            } /* "oo" */
                        } else { /* descend "xample.F" */
                            if (w == 0x78616d706c652e68) { /* descend "xample.h" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffffffff00) == 0x65785f656e756d00) { /* "ex_enum" */
                                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                                    if (buf != mark) {
                                        buf = MyGame_Example_hex_enum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ex_enum" */
                                    return unmatched;
                                } /* "ex_enum" */
                            } else { /* descend "xample.h" */
                                return unmatched;
                            } /* descend "xample.h" */
                        } /* descend "xample.F" */
                    } /* branch "xample.F" */
                } /* branch "xample.C" */
            } else { /* branch "xample.i" */
                if (w < 0x78616d706c652e6e) { /* branch "xample.n" */
                    if (w == 0x78616d706c652e69) { /* descend "xample.i" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffffff00) == 0x6e745f656e756d00) { /* "nt_enum" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                            if (buf != mark) {
                                buf = MyGame_Example_int_enum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "nt_enum" */
                            return unmatched;
                        } /* "nt_enum" */
                    } else { /* descend "xample.i" */
                        return unmatched;
                    } /* descend "xample.i" */
                } else { /* branch "xample.n" */
                    if (w < 0x78616d706c65322e) { /* branch "xample2." */
                        if (w == 0x78616d706c652e6e) { /* descend "xample.n" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffffff00) == 0x65675f656e756d00) { /* "eg_enum" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                                if (buf != mark) {
                                    buf = MyGame_Example_neg_enum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    goto pfguard1;
                                }
                            } else { /* "eg_enum" */
                                goto pfguard1;
                            } /* "eg_enum" */
                            goto endpfguard1;
pfguard1:
                            if (w == 0x6f74656d70747965) { /* descend "otemptye" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffff0000000000) == 0x6e756d0000000000) { /* "num" */
                                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                                    if (buf != mark) {
                                        buf = MyGame_Example_notemptyenum_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "num" */
                                    return unmatched;
                                } /* "num" */
                            } else { /* descend "otemptye" */
                                return unmatched;
                            } /* descend "otemptye" */
endpfguard1:
                            (void)0;
                        } else { /* descend "xample.n" */
                            return unmatched;
                        } /* descend "xample.n" */
                    } else { /* branch "xample2." */
                        if (w == 0x78616d706c65322e) { /* descend "xample2." */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x5375625379737465) { /* descend "SubSyste" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x6d2e537562537973) { /* descend "m.SubSys" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffff00000000) == 0x74656d4200000000) { /* "temB" */
                                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
                                        if (buf != mark) {
                                            buf = MyGame_Example2_SubSystem_SubSystemB_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "temB" */
                                        if ((w & 0xffffffff00000000) == 0x74656d4100000000) { /* "temA" */
                                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
                                            if (buf != mark) {
                                                buf = MyGame_Example2_SubSystem_SubSystemA_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "temA" */
                                            return unmatched;
                                        } /* "temA" */
                                    } /* "temB" */
                                } else { /* descend "m.SubSys" */
                                    return unmatched;
                                } /* descend "m.SubSys" */
                            } else { /* descend "SubSyste" */
                                if ((w & 0xffffff0000000000) == 0x666f6f0000000000) { /* "foo" */
                                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                                    if (buf != mark) {
                                        buf = MyGame_Example2_foo_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "foo" */
                                    return unmatched;
                                } /* "foo" */
                            } /* descend "SubSyste" */
                        } else { /* descend "xample2." */
                            return unmatched;
                        } /* descend "xample2." */
                    } /* branch "xample2." */
                } /* branch "xample.n" */
            } /* branch "xample.i" */
        } else { /* descend "MyGame.E" */
            if (w == 0x4d7947616d652e4f) { /* descend "MyGame.O" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x746865724e616d65) { /* descend "therName" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x53706163652e4672) { /* descend "Space.Fr" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x6f6d496e636c7564) { /* descend "omInclud" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                                if (buf != mark) {
                                    buf = MyGame_OtherNameSpace_FromInclude_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "e" */
                                return unmatched;
                            } /* "e" */
                        } else { /* descend "omInclud" */
                            return unmatched;
                        } /* descend "omInclud" */
                    } else { /* descend "Space.Fr" */
                        return unmatched;
                    } /* descend "Space.Fr" */
                } else { /* descend "therName" */
                    return unmatched;
                } /* descend "therName" */
            } else { /* descend "MyGame.O" */
                return unmatched;
            } /* descend "MyGame.O" */
        } /* descend "MyGame.E" */
    } /* branch "MyGame.E" */
    return buf;
}

static int monster_test_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags)
{
    flatcc_json_parser_t parser;
    flatcc_builder_ref_t root;

    ctx = ctx ? ctx : &parser;
    flatcc_json_parser_init(ctx, B, buf, buf + bufsiz, flags);
    if (flatcc_builder_start_buffer(B, "MONS", 0, 0)) return -1;
    MyGame_Example_Monster_parse_json_table(ctx, buf, buf + bufsiz, &root);
    if (ctx->error) {
        return ctx->error;
    }
    if (!flatcc_builder_end_buffer(B, root)) return -1;
    ctx->end_loc = buf;
    return 0;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MONSTER_TEST_JSON_PARSER_H */
