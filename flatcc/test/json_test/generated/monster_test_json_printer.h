#ifndef MONSTER_TEST_JSON_PRINTER_H
#define MONSTER_TEST_JSON_PRINTER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_printer.h"
#ifndef INCLUDE_TEST1_JSON_PRINTER_H
#include "include_test1_json_printer.h"
#endif
#ifndef ATTRIBUTES_JSON_PRINTER_H
#include "attributes_json_printer.h"
#endif
#include "flatcc/flatcc_prologue.h"

/*
 * Prints the default root table or struct from a buffer which must have
 * the schema declared file identifier, if any. It is also possible to
 * call the type specific `print_json_as_root` function wich accepts an
 * optional identifier (or 0) as argument. The printer `ctx` object must
 * be initialized with the appropriate output type, or it can be 0 which
 * defaults to stdout. NOTE: `ctx` is not generally allowed to be null, only
 * here for a simplified interface.
 */
static int monster_test_print_json(flatcc_json_printer_t *ctx, const char *buf, size_t bufsiz);

static void InGlobalNamespace_print_json_struct(flatcc_json_printer_t *ctx, const void *p);
static void MyGame_InParentNamespace_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example2_Monster_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example2_Strange_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example2_S2_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_Foo_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type);
static void MyGame_Example_Foo_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud);
static void MyGame_Example2_SubSystem_SubSystemA_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type);
static void MyGame_Example2_SubSystem_SubSystemA_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud);
static void MyGame_Example2_SubSystem_SubSystemB_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type);
static void MyGame_Example2_SubSystem_SubSystemB_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud);
static void MyGame_Example_Any_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type);
static void MyGame_Example_Any_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud);
static void MyGame_Example_Test_print_json_struct(flatcc_json_printer_t *ctx, const void *p);
static void MyGame_Example_TestSimpleTableWithEnum_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_TestInclude_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_Vec3_print_json_struct(flatcc_json_printer_t *ctx, const void *p);
static void MyGame_Example_Ability_print_json_struct(flatcc_json_printer_t *ctx, const void *p);
static void MyGame_Example_Stat_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_FooBar_print_json_struct(flatcc_json_printer_t *ctx, const void *p);
static void MyGame_Example_Alt_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_TestJSONPrefix_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_TestJSONPrefixParsing_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_TestJSONPrefixParsing2_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_TestJSONPrefixParsing3_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_TestBase64_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_MultipleKeys_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_Monster_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void MyGame_Example_TypeAliases_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void Fantasy_Attacker_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void Fantasy_Rapunzel_print_json_struct(flatcc_json_printer_t *ctx, const void *p);
static void Fantasy_BookReader_print_json_struct(flatcc_json_printer_t *ctx, const void *p);
static void Fantasy_Character_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type);
static void Fantasy_Character_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud);
static void Fantasy_Movie_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);

static void MyGame_Example2_foo_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (0): flatcc_json_printer_enum(ctx, "x", 1); break;
    case (1): flatcc_json_printer_enum(ctx, "y", 1); break;
    case (2): flatcc_json_printer_enum(ctx, "table", 5); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void MyGame_Example_neg_enum_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (-12): flatcc_json_printer_enum(ctx, "neg1", 4); break;
    case (-11): flatcc_json_printer_enum(ctx, "neg2", 4); break;
    case (-10): flatcc_json_printer_enum(ctx, "neg3", 4); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void MyGame_Example_int_enum_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (-2): flatcc_json_printer_enum(ctx, "intneg", 6); break;
    case (-1): flatcc_json_printer_enum(ctx, "intneg2", 7); break;
    case (2): flatcc_json_printer_enum(ctx, "int1", 4); break;
    case (42): flatcc_json_printer_enum(ctx, "int2", 4); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void MyGame_Example_hex_enum_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (-2): flatcc_json_printer_enum(ctx, "hexneg", 6); break;
    case (3): flatcc_json_printer_enum(ctx, "hex1", 4); break;
    case (2125446831): flatcc_json_printer_enum(ctx, "hex2", 4); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void MyGame_Example_Color_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{
    uint8_t x = (uint8_t)v;
    int multiple = 0 != (x & (x - 1));
    int i = 0;

    if ((x & UINT8_C(0xf4)) || x == 0) {
        flatcc_json_printer_int8(ctx, v);
        return;
    }
    flatcc_json_printer_delimit_enum_flags(ctx, multiple);
    if (x & UINT8_C(0x1)) flatcc_json_printer_enum_flag(ctx, i++, "Red", 3);
    if (x & UINT8_C(0x2)) flatcc_json_printer_enum_flag(ctx, i++, "Green", 5);
    if (x & UINT8_C(0x8)) flatcc_json_printer_enum_flag(ctx, i++, "Blue", 4);
    flatcc_json_printer_delimit_enum_flags(ctx, multiple);
}

static void MyGame_Example_notemptyenum_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (0): flatcc_json_printer_enum(ctx, "x", 1); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void Fantasy_ReorderedEnum_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (10): flatcc_json_printer_enum(ctx, "rx", 2); break;
    case (1): flatcc_json_printer_enum(ctx, "ry", 2); break;
    case (9): flatcc_json_printer_enum(ctx, "rz", 2); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void Fantasy_ReorderedColor_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{
    uint8_t x = (uint8_t)v;
    int multiple = 0 != (x & (x - 1));
    int i = 0;

    if ((x & UINT8_C(0xf4)) || x == 0) {
        flatcc_json_printer_int8(ctx, v);
        return;
    }
    flatcc_json_printer_delimit_enum_flags(ctx, multiple);
    if (x & UINT8_C(0x8)) flatcc_json_printer_enum_flag(ctx, i++, "RBlue", 5);
    if (x & UINT8_C(0x1)) flatcc_json_printer_enum_flag(ctx, i++, "RRed", 4);
    if (x & UINT8_C(0x2)) flatcc_json_printer_enum_flag(ctx, i++, "RGreen", 6);
    flatcc_json_printer_delimit_enum_flags(ctx, multiple);
}

static void MyGame_Example_Foo_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type)
{
    switch (type) {
    case 1:
        flatcc_json_printer_enum(ctx, "InParentNamespace", 17);
        break;
    default:
        flatcc_json_printer_enum(ctx, "NONE", 4);
        break;
    }
}

static void MyGame_Example_Foo_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud)
{
    switch (ud->type) {
    case 1:
        flatcc_json_printer_union_table(ctx, ud, MyGame_InParentNamespace_print_json_table);
        break;
    default:
        break;
    }
}

static void MyGame_Example2_SubSystem_SubSystemA_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type)
{
    switch (type) {
    case 1:
        flatcc_json_printer_enum(ctx, "Strange", 7);
        break;
    default:
        flatcc_json_printer_enum(ctx, "NONE", 4);
        break;
    }
}

static void MyGame_Example2_SubSystem_SubSystemA_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud)
{
    switch (ud->type) {
    case 1:
        flatcc_json_printer_union_table(ctx, ud, MyGame_Example2_Strange_print_json_table);
        break;
    default:
        break;
    }
}

static void MyGame_Example2_SubSystem_SubSystemB_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type)
{
    switch (type) {
    case 1:
        flatcc_json_printer_enum(ctx, "Strange", 7);
        break;
    default:
        flatcc_json_printer_enum(ctx, "NONE", 4);
        break;
    }
}

static void MyGame_Example2_SubSystem_SubSystemB_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud)
{
    switch (ud->type) {
    case 1:
        flatcc_json_printer_union_table(ctx, ud, MyGame_Example2_Strange_print_json_table);
        break;
    default:
        break;
    }
}

static void MyGame_Example_Any_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type)
{
    switch (type) {
    case 1:
        flatcc_json_printer_enum(ctx, "Monster", 7);
        break;
    case 2:
        flatcc_json_printer_enum(ctx, "TestSimpleTableWithEnum", 23);
        break;
    case 3:
        flatcc_json_printer_enum(ctx, "Monster2", 8);
        break;
    case 4:
        flatcc_json_printer_enum(ctx, "Alt", 3);
        break;
    default:
        flatcc_json_printer_enum(ctx, "NONE", 4);
        break;
    }
}

static void MyGame_Example_Any_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud)
{
    switch (ud->type) {
    case 1:
        flatcc_json_printer_union_table(ctx, ud, MyGame_Example_Monster_print_json_table);
        break;
    case 2:
        flatcc_json_printer_union_table(ctx, ud, MyGame_Example_TestSimpleTableWithEnum_print_json_table);
        break;
    case 3:
        flatcc_json_printer_union_table(ctx, ud, MyGame_Example2_Monster_print_json_table);
        break;
    case 4:
        flatcc_json_printer_union_table(ctx, ud, MyGame_Example_Alt_print_json_table);
        break;
    default:
        break;
    }
}

static void Fantasy_Character_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type)
{
    switch (type) {
    case 2:
        flatcc_json_printer_enum(ctx, "MuLan", 5);
        break;
    case 8:
        flatcc_json_printer_enum(ctx, "Rapunzel", 8);
        break;
    case 9:
        flatcc_json_printer_enum(ctx, "Belle", 5);
        break;
    case 10:
        flatcc_json_printer_enum(ctx, "BookFan", 7);
        break;
    case 11:
        flatcc_json_printer_enum(ctx, "Other", 5);
        break;
    case 255:
        flatcc_json_printer_enum(ctx, "Unused", 6);
        break;
    default:
        flatcc_json_printer_enum(ctx, "NONE", 4);
        break;
    }
}

static void Fantasy_Character_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud)
{
    switch (ud->type) {
    case 2:
        flatcc_json_printer_union_table(ctx, ud, Fantasy_Attacker_print_json_table);
        break;
    case 8:
        flatcc_json_printer_union_struct(ctx, ud, Fantasy_Rapunzel_print_json_struct);
        break;
    case 9:
        flatcc_json_printer_union_struct(ctx, ud, Fantasy_BookReader_print_json_struct);
        break;
    case 10:
        flatcc_json_printer_union_struct(ctx, ud, Fantasy_BookReader_print_json_struct);
        break;
    case 11:
        flatcc_json_printer_union_string(ctx, ud);
        break;
    case 255:
        flatcc_json_printer_union_string(ctx, ud);
        break;
    default:
        break;
    }
}

static void InGlobalNamespace_print_json_struct(flatcc_json_printer_t *ctx, const void *p)
{
    flatcc_json_printer_int8_struct_field(ctx, 0, p, 0, "unused", 6);
}

static inline int InGlobalNamespace_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_struct_as_root(ctx, buf, bufsiz, fid, InGlobalNamespace_print_json_struct);
}

static void MyGame_Example_Test_print_json_struct(flatcc_json_printer_t *ctx, const void *p)
{
    flatcc_json_printer_int16_struct_field(ctx, 0, p, 0, "a", 1);
    flatcc_json_printer_int8_struct_field(ctx, 1, p, 2, "b", 1);
}

static inline int MyGame_Example_Test_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_struct_as_root(ctx, buf, bufsiz, fid, MyGame_Example_Test_print_json_struct);
}

static void MyGame_Example_Vec3_print_json_struct(flatcc_json_printer_t *ctx, const void *p)
{
    flatcc_json_printer_float_struct_field(ctx, 0, p, 0, "x", 1);
    flatcc_json_printer_float_struct_field(ctx, 1, p, 4, "y", 1);
    flatcc_json_printer_float_struct_field(ctx, 2, p, 8, "z", 1);
    flatcc_json_printer_double_struct_field(ctx, 3, p, 16, "test1", 5);
    flatcc_json_printer_int8_enum_struct_field(ctx, 4, p, 24, "test2", 5, MyGame_Example_Color_print_json_enum);
    flatcc_json_printer_embedded_struct_field(ctx, 5, p, 26, "test3", 5, MyGame_Example_Test_print_json_struct);
}

static inline int MyGame_Example_Vec3_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_struct_as_root(ctx, buf, bufsiz, fid, MyGame_Example_Vec3_print_json_struct);
}

static void MyGame_Example_Ability_print_json_struct(flatcc_json_printer_t *ctx, const void *p)
{
    flatcc_json_printer_uint32_struct_field(ctx, 0, p, 0, "id", 2);
    flatcc_json_printer_uint32_struct_field(ctx, 1, p, 4, "distance", 8);
}

static inline int MyGame_Example_Ability_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_struct_as_root(ctx, buf, bufsiz, fid, MyGame_Example_Ability_print_json_struct);
}

static void MyGame_Example_FooBar_print_json_struct(flatcc_json_printer_t *ctx, const void *p)
{
    flatcc_json_printer_float_array_struct_field(ctx, 0, p, 0, "foo", 3, 16);
    flatcc_json_printer_int32_array_struct_field(ctx, 1, p, 64, "bar", 3, 10);
    flatcc_json_printer_int8_enum_array_struct_field(ctx, 2, p, 104, "col", 3, 3, MyGame_Example_Color_print_json_enum);
    flatcc_json_printer_embedded_struct_array_field(ctx, 3, p, 108, "tests", 5, 4, 2, MyGame_Example_Test_print_json_struct);
    flatcc_json_printer_char_array_struct_field(ctx, 4, p, 116, "text", 4, 5);
}

static inline int MyGame_Example_FooBar_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_struct_as_root(ctx, buf, bufsiz, fid, MyGame_Example_FooBar_print_json_struct);
}

static void Fantasy_Rapunzel_print_json_struct(flatcc_json_printer_t *ctx, const void *p)
{
    flatcc_json_printer_uint16_struct_field(ctx, 0, p, 0, "hair_length", 11);
}

static inline int Fantasy_Rapunzel_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_struct_as_root(ctx, buf, bufsiz, fid, Fantasy_Rapunzel_print_json_struct);
}

static void Fantasy_BookReader_print_json_struct(flatcc_json_printer_t *ctx, const void *p)
{
    flatcc_json_printer_int32_struct_field(ctx, 0, p, 0, "books_read", 10);
}

static inline int Fantasy_BookReader_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_struct_as_root(ctx, buf, bufsiz, fid, Fantasy_BookReader_print_json_struct);
}

static void MyGame_InParentNamespace_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int MyGame_InParentNamespace_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_InParentNamespace_print_json_table);
}

static void MyGame_Example2_Monster_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int MyGame_Example2_Monster_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example2_Monster_print_json_table);
}

static void MyGame_Example2_Strange_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int MyGame_Example2_Strange_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example2_Strange_print_json_table);
}

static void MyGame_Example2_S2_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "namespace", 9, INT32_C(0));
    flatcc_json_printer_int32_field(ctx, td, 1, "table", 5, INT32_C(0));
    flatcc_json_printer_int32_field(ctx, td, 2, "struct", 6, INT32_C(0));
    flatcc_json_printer_int32_field(ctx, td, 3, "union", 5, INT32_C(0));
    flatcc_json_printer_int32_field(ctx, td, 4, "int", 3, INT32_C(0));
}

static inline int MyGame_Example2_S2_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example2_S2_print_json_table);
}

static void MyGame_Example_TestSimpleTableWithEnum_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "color", 5, INT8_C(2), MyGame_Example_Color_print_json_enum);
    flatcc_json_printer_int8_enum_field(ctx, td, 1, "color2", 6, INT8_C(2), MyGame_Example_Color_print_json_enum);
    flatcc_json_printer_uint8_field(ctx, td, 2, "uc", 2, UINT8_C(2));
    flatcc_json_printer_uint8_field(ctx, td, 3, "uc2", 3, UINT8_C(2));
}

static inline int MyGame_Example_TestSimpleTableWithEnum_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_TestSimpleTableWithEnum_print_json_table);
}

static void MyGame_Example_TestInclude_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_struct_field(ctx, td, 0, "global", 6, InGlobalNamespace_print_json_struct);
    flatcc_json_printer_int64_enum_field(ctx, td, 1, "incval", 6, INT64_C(0), MyGame_OtherNameSpace_FromInclude_print_json_enum);
    flatcc_json_printer_int64_enum_field(ctx, td, 2, "incval2", 7, INT64_C(0), MyGame_OtherNameSpace_FromInclude_print_json_enum);
    flatcc_json_printer_int32_field(ctx, td, 3, "incval3", 7, INT32_C(0));
    flatcc_json_printer_int64_enum_field(ctx, td, 4, "incval4", 7, INT64_C(0), MyGame_OtherNameSpace_FromInclude_print_json_enum);
    flatcc_json_printer_int64_field(ctx, td, 5, "incval5", 7, INT64_C(0));
}

static inline int MyGame_Example_TestInclude_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_TestInclude_print_json_table);
}

static void MyGame_Example_Stat_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "id", 2);
    flatcc_json_printer_int64_field(ctx, td, 1, "val", 3, INT64_C(0));
    flatcc_json_printer_uint16_field(ctx, td, 2, "count", 5, UINT16_C(0));
}

static inline int MyGame_Example_Stat_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_Stat_print_json_table);
}

static void MyGame_Example_Alt_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_field(ctx, td, 0, "prefix", 6, MyGame_Example_TestJSONPrefix_print_json_table);
    flatcc_json_printer_table_field(ctx, td, 1, "movie", 5, Fantasy_Movie_print_json_table);
    flatcc_json_printer_union_vector_field(ctx, td, 3, "manyany", 7, MyGame_Example_Any_print_json_union_type, MyGame_Example_Any_print_json_union);
    flatcc_json_printer_table_vector_field(ctx, td, 4, "multik", 6, MyGame_Example_MultipleKeys_print_json_table);
    flatcc_json_printer_struct_vector_field(ctx, td, 5, "rapunzels", 9, 8, Fantasy_Rapunzel_print_json_struct);
    flatcc_json_printer_string_vector_field(ctx, td, 6, "names", 5);
    flatcc_json_printer_float_vector_field(ctx, td, 7, "samples", 7);
    flatcc_json_printer_struct_field(ctx, td, 8, "fixed_array", 11, MyGame_Example_FooBar_print_json_struct);
}

static inline int MyGame_Example_Alt_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_Alt_print_json_table);
}

static void MyGame_Example_TestJSONPrefix_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_field(ctx, td, 0, "testjsonprefixparsing", 21, MyGame_Example_TestJSONPrefixParsing_print_json_table);
    flatcc_json_printer_table_field(ctx, td, 1, "testjsonprefixparsing2", 22, MyGame_Example_TestJSONPrefixParsing2_print_json_table);
    flatcc_json_printer_table_field(ctx, td, 2, "testjsonprefixparsing3", 22, MyGame_Example_TestJSONPrefixParsing3_print_json_table);
}

static inline int MyGame_Example_TestJSONPrefix_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_TestJSONPrefix_print_json_table);
}

static void MyGame_Example_TestJSONPrefixParsing_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "aaaa", 4);
    flatcc_json_printer_uint32_field(ctx, td, 1, "aaaa12345", 9, UINT32_C(0));
    flatcc_json_printer_string_field(ctx, td, 2, "bbbb", 4);
    flatcc_json_printer_int64_field(ctx, td, 3, "bbbb1234", 8, INT64_C(0));
    flatcc_json_printer_string_field(ctx, td, 4, "cccc", 4);
    flatcc_json_printer_int64_field(ctx, td, 5, "cccc1234", 8, INT64_C(0));
    flatcc_json_printer_uint32_field(ctx, td, 6, "cccc12345", 9, UINT32_C(0));
    flatcc_json_printer_int64_field(ctx, td, 7, "dddd1234", 8, INT64_C(0));
    flatcc_json_printer_uint32_field(ctx, td, 8, "dddd12345", 9, UINT32_C(0));
}

static inline int MyGame_Example_TestJSONPrefixParsing_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_TestJSONPrefixParsing_print_json_table);
}

static void MyGame_Example_TestJSONPrefixParsing2_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int64_field(ctx, td, 0, "aaaa_bbbb_steps", 15, INT64_C(0));
    flatcc_json_printer_uint32_field(ctx, td, 1, "aaaa_bbbb_start_", 16, UINT32_C(0));
}

static inline int MyGame_Example_TestJSONPrefixParsing2_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_TestJSONPrefixParsing2_print_json_table);
}

static void MyGame_Example_TestJSONPrefixParsing3_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int64_field(ctx, td, 0, "aaaa_bbbb_steps", 15, INT64_C(0));
    flatcc_json_printer_uint32_field(ctx, td, 1, "aaaa_bbbb_start_steps", 21, UINT32_C(0));
}

static inline int MyGame_Example_TestJSONPrefixParsing3_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_TestJSONPrefixParsing3_print_json_table);
}

static void MyGame_Example_TestBase64_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint8_vector_base64_field(ctx, td, 0, "data", 4, 0);
    flatcc_json_printer_uint8_vector_base64_field(ctx, td, 1, "urldata", 7, 1);
    flatcc_json_printer_uint8_vector_base64_field(ctx, td, 2, "nested", 6, 0);
}

static inline int MyGame_Example_TestBase64_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_TestBase64_print_json_table);
}

static void MyGame_Example_MultipleKeys_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "hello", 5);
    flatcc_json_printer_string_field(ctx, td, 1, "world", 5);
    flatcc_json_printer_int64_field(ctx, td, 2, "foobar", 6, INT64_C(0));
}

static inline int MyGame_Example_MultipleKeys_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_MultipleKeys_print_json_table);
}

static void MyGame_Example_Monster_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_struct_field(ctx, td, 0, "pos", 3, MyGame_Example_Vec3_print_json_struct);
    flatcc_json_printer_int16_field(ctx, td, 1, "mana", 4, INT16_C(150));
    flatcc_json_printer_int16_field(ctx, td, 2, "hp", 2, INT16_C(100));
    flatcc_json_printer_string_field(ctx, td, 3, "name", 4);
    flatcc_json_printer_uint8_vector_field(ctx, td, 5, "inventory", 9);
    flatcc_json_printer_int8_enum_field(ctx, td, 6, "color", 5, INT8_C(8), MyGame_Example_Color_print_json_enum);
    flatcc_json_printer_union_field(ctx, td, 8, "test", 4, MyGame_Example_Any_print_json_union_type, MyGame_Example_Any_print_json_union);
    flatcc_json_printer_struct_vector_field(ctx, td, 9, "test4", 5, 4, MyGame_Example_Test_print_json_struct);
    flatcc_json_printer_string_vector_field(ctx, td, 10, "testarrayofstring", 17);
    flatcc_json_printer_table_vector_field(ctx, td, 11, "testarrayoftables", 17, MyGame_Example_Monster_print_json_table);
    flatcc_json_printer_table_field(ctx, td, 12, "enemy", 5, MyGame_Example_Monster_print_json_table);
    flatcc_json_printer_table_as_nested_root(ctx, td, 13, "testnestedflatbuffer", 20, 0, MyGame_Example_Monster_print_json_table);
    flatcc_json_printer_table_field(ctx, td, 14, "testempty", 9, MyGame_Example_Stat_print_json_table);
    flatcc_json_printer_bool_field(ctx, td, 15, "testbool", 8, UINT8_C(1));
    flatcc_json_printer_int32_field(ctx, td, 16, "testhashs32_fnv1", 16, INT32_C(0));
    flatcc_json_printer_uint32_field(ctx, td, 17, "testhashu32_fnv1", 16, UINT32_C(0));
    flatcc_json_printer_int64_field(ctx, td, 18, "testhashs64_fnv1", 16, INT64_C(0));
    flatcc_json_printer_uint64_field(ctx, td, 19, "testhashu64_fnv1", 16, UINT64_C(0));
    flatcc_json_printer_int32_field(ctx, td, 20, "testhashs32_fnv1a", 17, INT32_C(0));
    flatcc_json_printer_uint32_field(ctx, td, 21, "testhashu32_fnv1a", 17, UINT32_C(0));
    flatcc_json_printer_int64_field(ctx, td, 22, "testhashs64_fnv1a", 17, INT64_C(0));
    flatcc_json_printer_uint64_field(ctx, td, 23, "testhashu64_fnv1a", 17, UINT64_C(0));
    flatcc_json_printer_bool_vector_field(ctx, td, 24, "testarrayofbools", 16);
    flatcc_json_printer_float_field(ctx, td, 25, "testf", 5, 314159.000f);
    flatcc_json_printer_float_field(ctx, td, 26, "testf2", 6, 3.00000000f);
    flatcc_json_printer_float_field(ctx, td, 27, "testf3", 6, 0.00000000f);
    flatcc_json_printer_string_vector_field(ctx, td, 28, "testarrayofstring2", 18);
    flatcc_json_printer_struct_vector_field(ctx, td, 29, "testarrayofsortedstruct", 23, 8, MyGame_Example_Ability_print_json_struct);
    flatcc_json_printer_uint8_vector_field(ctx, td, 30, "flex", 4);
    flatcc_json_printer_struct_vector_field(ctx, td, 31, "test5", 5, 4, MyGame_Example_Test_print_json_struct);
    flatcc_json_printer_int64_vector_field(ctx, td, 32, "vector_of_longs", 15);
    flatcc_json_printer_double_vector_field(ctx, td, 33, "vector_of_doubles", 17);
    flatcc_json_printer_table_field(ctx, td, 34, "parent_namespace_test", 21, MyGame_InParentNamespace_print_json_table);
    flatcc_json_printer_table_field(ctx, td, 35, "testbase64", 10, MyGame_Example_TestBase64_print_json_table);
}

static inline int MyGame_Example_Monster_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_Monster_print_json_table);
}

static void MyGame_Example_TypeAliases_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_field(ctx, td, 0, "i8", 2, INT8_C(0));
    flatcc_json_printer_uint8_field(ctx, td, 1, "u8", 2, UINT8_C(0));
    flatcc_json_printer_int16_field(ctx, td, 2, "i16", 3, INT16_C(0));
    flatcc_json_printer_uint16_field(ctx, td, 3, "u16", 3, UINT16_C(0));
    flatcc_json_printer_int32_field(ctx, td, 4, "i32", 3, INT32_C(0));
    flatcc_json_printer_uint32_field(ctx, td, 5, "u32", 3, UINT32_C(0));
    flatcc_json_printer_int64_field(ctx, td, 6, "i64", 3, INT64_C(0));
    flatcc_json_printer_uint64_field(ctx, td, 7, "u64", 3, UINT64_C(0));
    flatcc_json_printer_float_field(ctx, td, 8, "f32", 3, 0.00000000f);
    flatcc_json_printer_double_field(ctx, td, 9, "f64", 3, 0.0000000000000000);
    flatcc_json_printer_int8_vector_field(ctx, td, 10, "v8", 2);
    flatcc_json_printer_double_vector_field(ctx, td, 11, "vf64", 4);
}

static inline int MyGame_Example_TypeAliases_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, MyGame_Example_TypeAliases_print_json_table);
}

static void Fantasy_Attacker_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "sword_attack_damage", 19, INT32_C(0));
}

static inline int Fantasy_Attacker_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, Fantasy_Attacker_print_json_table);
}

static void Fantasy_Movie_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_union_field(ctx, td, 1, "main_character", 14, Fantasy_Character_print_json_union_type, Fantasy_Character_print_json_union);
    flatcc_json_printer_union_field(ctx, td, 3, "antagonist", 10, Fantasy_Character_print_json_union_type, Fantasy_Character_print_json_union);
    flatcc_json_printer_union_field(ctx, td, 5, "side_kick", 9, Fantasy_Character_print_json_union_type, Fantasy_Character_print_json_union);
    flatcc_json_printer_union_field(ctx, td, 7, "cameo", 5, Fantasy_Character_print_json_union_type, Fantasy_Character_print_json_union);
    flatcc_json_printer_union_vector_field(ctx, td, 9, "characters", 10, Fantasy_Character_print_json_union_type, Fantasy_Character_print_json_union);
}

static inline int Fantasy_Movie_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, Fantasy_Movie_print_json_table);
}

static int monster_test_print_json(flatcc_json_printer_t *ctx, const char *buf, size_t bufsiz)
{
    flatcc_json_printer_t printer;

    if (ctx == 0) {
        ctx = &printer;
        flatcc_json_printer_init(ctx, 0);
    }
    return MyGame_Example_Monster_print_json_as_root(ctx, buf, bufsiz, "MONS");
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MONSTER_TEST_JSON_PRINTER_H */
