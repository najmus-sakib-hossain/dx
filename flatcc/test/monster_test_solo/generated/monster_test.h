#ifndef FLATBUFFERS_COMMON_READER_H
#define FLATBUFFERS_COMMON_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

/* Common FlatBuffers read functionality for C. */

#include "flatcc/flatcc_prologue.h"
#include "flatcc/flatcc_flatbuffers.h"


#define __flatbuffers_read_scalar_at_byteoffset(N, p, o) N ## _read_from_pe((uint8_t *)(p) + (o))
#define __flatbuffers_read_scalar(N, p) N ## _read_from_pe(p)
#define __flatbuffers_read_vt(ID, offset, t)\
flatbuffers_voffset_t offset = 0;\
{   flatbuffers_voffset_t id__tmp, *vt__tmp;\
    FLATCC_ASSERT(t != 0 && "null pointer table access");\
    id__tmp = ID;\
    vt__tmp = (flatbuffers_voffset_t *)((uint8_t *)(t) -\
        __flatbuffers_soffset_read_from_pe(t));\
    if (__flatbuffers_voffset_read_from_pe(vt__tmp) >= sizeof(vt__tmp[0]) * (id__tmp + 3u)) {\
        offset = __flatbuffers_voffset_read_from_pe(vt__tmp + id__tmp + 2);\
    }\
}
#define __flatbuffers_field_present(ID, t) { __flatbuffers_read_vt(ID, offset__tmp, t) return offset__tmp != 0; }
#define __flatbuffers_scalar_field(T, ID, t)\
{\
    __flatbuffers_read_vt(ID, offset__tmp, t)\
    if (offset__tmp) {\
        return (const T *)((uint8_t *)(t) + offset__tmp);\
    }\
    return 0;\
}
#define __flatbuffers_define_scalar_field(ID, N, NK, TK, T, V)\
static inline T N ## _ ## NK ## _get(N ## _table_t t__tmp)\
{ __flatbuffers_read_vt(ID, offset__tmp, t__tmp)\
  return offset__tmp ? __flatbuffers_read_scalar_at_byteoffset(TK, t__tmp, offset__tmp) : V;\
}\
static inline T N ## _ ## NK(N ## _table_t t__tmp)\
{ __flatbuffers_read_vt(ID, offset__tmp, t__tmp)\
  return offset__tmp ? __flatbuffers_read_scalar_at_byteoffset(TK, t__tmp, offset__tmp) : V;\
}\
static inline const T *N ## _ ## NK ## _get_ptr(N ## _table_t t__tmp)\
__flatbuffers_scalar_field(T, ID, t__tmp)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)\
__flatbuffers_define_scan_by_scalar_field(N, NK, T)
#define __flatbuffers_define_scalar_optional_field(ID, N, NK, TK, T, V)\
__flatbuffers_define_scalar_field(ID, N, NK, TK, T, V)\
static inline TK ## _option_t N ## _ ## NK ## _option(N ## _table_t t__tmp)\
{ TK ## _option_t ret; __flatbuffers_read_vt(ID, offset__tmp, t__tmp)\
  ret.is_null = offset__tmp == 0; ret.value = offset__tmp ?\
  __flatbuffers_read_scalar_at_byteoffset(TK, t__tmp, offset__tmp) : V;\
  return ret; }
#define __flatbuffers_struct_field(T, ID, t, r)\
{\
    __flatbuffers_read_vt(ID, offset__tmp, t)\
    if (offset__tmp) {\
        return (T)((uint8_t *)(t) + offset__tmp);\
    }\
    FLATCC_ASSERT(!(r) && "required field missing");\
    return 0;\
}
#define __flatbuffers_offset_field(T, ID, t, r, adjust)\
{\
    flatbuffers_uoffset_t *elem__tmp;\
    __flatbuffers_read_vt(ID, offset__tmp, t)\
    if (offset__tmp) {\
        elem__tmp = (flatbuffers_uoffset_t *)((uint8_t *)(t) + offset__tmp);\
        /* Add sizeof so C api can have raw access past header field. */\
        return (T)((uint8_t *)(elem__tmp) + adjust +\
              __flatbuffers_uoffset_read_from_pe(elem__tmp));\
    }\
    FLATCC_ASSERT(!(r) && "required field missing");\
    return 0;\
}
#define __flatbuffers_vector_field(T, ID, t, r) __flatbuffers_offset_field(T, ID, t, r, sizeof(flatbuffers_uoffset_t))
#define __flatbuffers_table_field(T, ID, t, r) __flatbuffers_offset_field(T, ID, t, r, 0)
#define __flatbuffers_define_struct_field(ID, N, NK, T, r)\
static inline T N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__flatbuffers_struct_field(T, ID, t__tmp, r)\
static inline T N ## _ ## NK(N ## _table_t t__tmp)\
__flatbuffers_struct_field(T, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)
#define __flatbuffers_define_vector_field(ID, N, NK, T, r)\
static inline T N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__flatbuffers_vector_field(T, ID, t__tmp, r)\
static inline T N ## _ ## NK(N ## _table_t t__tmp)\
__flatbuffers_vector_field(T, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)
#define __flatbuffers_define_table_field(ID, N, NK, T, r)\
static inline T N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__flatbuffers_table_field(T, ID, t__tmp, r)\
static inline T N ## _ ## NK(N ## _table_t t__tmp)\
__flatbuffers_table_field(T, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)
#define __flatbuffers_define_string_field(ID, N, NK, r)\
static inline flatbuffers_string_t N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__flatbuffers_vector_field(flatbuffers_string_t, ID, t__tmp, r)\
static inline flatbuffers_string_t N ## _ ## NK(N ## _table_t t__tmp)\
__flatbuffers_vector_field(flatbuffers_string_t, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)\
__flatbuffers_define_scan_by_string_field(N, NK)
#define __flatbuffers_vec_len(vec)\
{ return (vec) ? (size_t)__flatbuffers_uoffset_read_from_pe((flatbuffers_uoffset_t *)vec - 1) : 0; }
#define __flatbuffers_string_len(s) __flatbuffers_vec_len(s)
static inline size_t flatbuffers_vec_len(const void *vec)
__flatbuffers_vec_len(vec)
#define __flatbuffers_scalar_vec_at(N, vec, i)\
{ FLATCC_ASSERT(flatbuffers_vec_len(vec) > (i) && "index out of range");\
  return __flatbuffers_read_scalar(N, &(vec)[i]); }
#define __flatbuffers_struct_vec_at(vec, i)\
{ FLATCC_ASSERT(flatbuffers_vec_len(vec) > (i) && "index out of range"); return (vec) + (i); }
/* `adjust` skips past the header for string vectors. */
#define __flatbuffers_offset_vec_at(T, vec, i, adjust)\
{ const flatbuffers_uoffset_t *elem__tmp = (vec) + (i);\
  FLATCC_ASSERT(flatbuffers_vec_len(vec) > (i) && "index out of range");\
  return (T)((uint8_t *)(elem__tmp) + (size_t)__flatbuffers_uoffset_read_from_pe(elem__tmp) + (adjust)); }
#define __flatbuffers_define_scalar_vec_len(N)\
static inline size_t N ## _vec_len(N ##_vec_t vec__tmp)\
{ return flatbuffers_vec_len(vec__tmp); }
#define __flatbuffers_define_scalar_vec_at(N, T) \
static inline T N ## _vec_at(N ## _vec_t vec__tmp, size_t i__tmp)\
__flatbuffers_scalar_vec_at(N, vec__tmp, i__tmp)
typedef const char *flatbuffers_string_t;
static inline size_t flatbuffers_string_len(flatbuffers_string_t s)
__flatbuffers_string_len(s)
typedef const flatbuffers_uoffset_t *flatbuffers_string_vec_t;
typedef flatbuffers_uoffset_t *flatbuffers_string_mutable_vec_t;
static inline size_t flatbuffers_string_vec_len(flatbuffers_string_vec_t vec)
__flatbuffers_vec_len(vec)
static inline flatbuffers_string_t flatbuffers_string_vec_at(flatbuffers_string_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(flatbuffers_string_t, vec, i, sizeof(vec[0]))
typedef const void *flatbuffers_generic_t;
typedef void *flatbuffers_mutable_generic_t;
static inline flatbuffers_string_t flatbuffers_string_cast_from_generic(const flatbuffers_generic_t p)
{ return p ? ((const char *)p) + __flatbuffers_uoffset__size() : 0; }
typedef const flatbuffers_uoffset_t *flatbuffers_generic_vec_t;
typedef flatbuffers_uoffset_t *flatbuffers_generic_table_mutable_vec_t;
static inline size_t flatbuffers_generic_vec_len(flatbuffers_generic_vec_t vec)
__flatbuffers_vec_len(vec)
static inline flatbuffers_generic_t flatbuffers_generic_vec_at(flatbuffers_generic_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(flatbuffers_generic_t, vec, i, 0)
static inline flatbuffers_generic_t flatbuffers_generic_vec_at_as_string(flatbuffers_generic_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(flatbuffers_generic_t, vec, i, sizeof(vec[0]))
typedef struct flatbuffers_union {
    flatbuffers_union_type_t type;
    flatbuffers_generic_t value;
} flatbuffers_union_t;
typedef struct flatbuffers_union_vec {
    const flatbuffers_union_type_t *type;
    const flatbuffers_uoffset_t *value;
} flatbuffers_union_vec_t;
typedef struct flatbuffers_mutable_union {
    flatbuffers_union_type_t type;
    flatbuffers_mutable_generic_t value;
} flatbuffers_mutable_union_t;
typedef struct flatbuffers_mutable_union_vec {
    flatbuffers_union_type_t *type;
    flatbuffers_uoffset_t *value;
} flatbuffers_mutable_union_vec_t;
static inline flatbuffers_mutable_union_t flatbuffers_mutable_union_cast(flatbuffers_union_t u__tmp)\
{ flatbuffers_mutable_union_t mu = { u__tmp.type, (flatbuffers_mutable_generic_t)u__tmp.value };\
  return mu; }
static inline flatbuffers_mutable_union_vec_t flatbuffers_mutable_union_vec_cast(flatbuffers_union_vec_t uv__tmp)\
{ flatbuffers_mutable_union_vec_t muv =\
  { (flatbuffers_union_type_t *)uv__tmp.type, (flatbuffers_uoffset_t *)uv__tmp.value }; return muv; }
#define __flatbuffers_union_type_field(ID, t)\
{\
    __flatbuffers_read_vt(ID, offset__tmp, t)\
    return offset__tmp ? __flatbuffers_read_scalar_at_byteoffset(__flatbuffers_utype, t, offset__tmp) : 0;\
}
static inline flatbuffers_string_t flatbuffers_string_cast_from_union(const flatbuffers_union_t u__tmp)\
{ return flatbuffers_string_cast_from_generic(u__tmp.value); }
#define __flatbuffers_define_union_field(NS, ID, N, NK, T, r)\
static inline T ## _union_type_t N ## _ ## NK ## _type_get(N ## _table_t t__tmp)\
__## NS ## union_type_field(((ID) - 1), t__tmp)\
static inline NS ## generic_t N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__## NS ## table_field(NS ## generic_t, ID, t__tmp, r)\
static inline T ## _union_type_t N ## _ ## NK ## _type(N ## _table_t t__tmp)\
__## NS ## union_type_field(((ID) - 1), t__tmp)\
static inline NS ## generic_t N ## _ ## NK(N ## _table_t t__tmp)\
__## NS ## table_field(NS ## generic_t, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__## NS ## field_present(ID, t__tmp)\
static inline T ## _union_t N ## _ ## NK ## _union(N ## _table_t t__tmp)\
{ T ## _union_t u__tmp = { 0, 0 }; u__tmp.type = N ## _ ## NK ## _type_get(t__tmp);\
  if (u__tmp.type == 0) { return u__tmp; } u__tmp.value = N ## _ ## NK ## _get(t__tmp); return u__tmp; }\
static inline NS ## string_t N ## _ ## NK ## _as_string(N ## _table_t t__tmp)\
{ return NS ## string_cast_from_generic(N ## _ ## NK ## _get(t__tmp)); }\

#define __flatbuffers_define_union_vector_ops(NS, T)\
static inline size_t T ## _union_vec_len(T ## _union_vec_t uv__tmp)\
{ return NS ## vec_len(uv__tmp.type); }\
static inline T ## _union_t T ## _union_vec_at(T ## _union_vec_t uv__tmp, size_t i__tmp)\
{ T ## _union_t u__tmp = { 0, 0 }; size_t n__tmp = NS ## vec_len(uv__tmp.type);\
  FLATCC_ASSERT(n__tmp > (i__tmp) && "index out of range"); u__tmp.type = uv__tmp.type[i__tmp];\
  /* Unknown type is treated as NONE for schema evolution. */\
  if (u__tmp.type == 0) return u__tmp;\
  u__tmp.value = NS ## generic_vec_at(uv__tmp.value, i__tmp); return u__tmp; }\
static inline NS ## string_t T ## _union_vec_at_as_string(T ## _union_vec_t uv__tmp, size_t i__tmp)\
{ return (NS ## string_t) NS ## generic_vec_at_as_string(uv__tmp.value, i__tmp); }\

#define __flatbuffers_define_union_vector(NS, T)\
typedef NS ## union_vec_t T ## _union_vec_t;\
typedef NS ## mutable_union_vec_t T ## _mutable_union_vec_t;\
static inline T ## _mutable_union_vec_t T ## _mutable_union_vec_cast(T ## _union_vec_t u__tmp)\
{ return NS ## mutable_union_vec_cast(u__tmp); }\
__## NS ## define_union_vector_ops(NS, T)
#define __flatbuffers_define_union(NS, T)\
typedef NS ## union_t T ## _union_t;\
typedef NS ## mutable_union_t T ## _mutable_union_t;\
static inline T ## _mutable_union_t T ## _mutable_union_cast(T ## _union_t u__tmp)\
{ return NS ## mutable_union_cast(u__tmp); }\
__## NS ## define_union_vector(NS, T)
#define __flatbuffers_define_union_vector_field(NS, ID, N, NK, T, r)\
__## NS ## define_vector_field(ID - 1, N, NK ## _type, T ## _vec_t, r)\
__## NS ## define_vector_field(ID, N, NK, flatbuffers_generic_vec_t, r)\
static inline T ## _union_vec_t N ## _ ## NK ## _union(N ## _table_t t__tmp)\
{ T ## _union_vec_t uv__tmp; uv__tmp.type = N ## _ ## NK ## _type_get(t__tmp);\
  uv__tmp.value = N ## _ ## NK(t__tmp);\
  FLATCC_ASSERT(NS ## vec_len(uv__tmp.type) == NS ## vec_len(uv__tmp.value)\
  && "union vector type length mismatch"); return uv__tmp; }
#include <string.h>
static const size_t flatbuffers_not_found = (size_t)-1;
static const size_t flatbuffers_end = (size_t)-1;
#define __flatbuffers_identity(n) (n)
#define __flatbuffers_min(a, b) ((a) < (b) ? (a) : (b))
/* Subtraction doesn't work for unsigned types. */
#define __flatbuffers_scalar_cmp(x, y, n) ((x) < (y) ? -1 : (x) > (y))
static inline int __flatbuffers_string_n_cmp(flatbuffers_string_t v, const char *s, size_t n)
{ size_t nv = flatbuffers_string_len(v); int x = strncmp(v, s, nv < n ? nv : n);
  return x != 0 ? x : nv < n ? -1 : nv > n; }
/* `n` arg unused, but needed by string find macro expansion. */
static inline int __flatbuffers_string_cmp(flatbuffers_string_t v, const char *s, size_t n) { (void)n; return strcmp(v, s); }
/* A = identity if searching scalar vectors rather than key fields. */
/* Returns lowest matching index or not_found. */
#define __flatbuffers_find_by_field(A, V, E, L, K, Kn, T, D)\
{ T v__tmp; size_t a__tmp = 0, b__tmp, m__tmp; if (!(b__tmp = L(V))) { return flatbuffers_not_found; }\
  --b__tmp;\
  while (a__tmp < b__tmp) {\
    m__tmp = a__tmp + ((b__tmp - a__tmp) >> 1);\
    v__tmp = A(E(V, m__tmp));\
    if ((D(v__tmp, (K), (Kn))) < 0) {\
      a__tmp = m__tmp + 1;\
    } else {\
      b__tmp = m__tmp;\
    }\
  }\
  if (a__tmp == b__tmp) {\
    v__tmp = A(E(V, a__tmp));\
    if (D(v__tmp, (K), (Kn)) == 0) {\
       return a__tmp;\
    }\
  }\
  return flatbuffers_not_found;\
}
#define __flatbuffers_find_by_scalar_field(A, V, E, L, K, T)\
__flatbuffers_find_by_field(A, V, E, L, K, 0, T, __flatbuffers_scalar_cmp)
#define __flatbuffers_find_by_string_field(A, V, E, L, K)\
__flatbuffers_find_by_field(A, V, E, L, K, 0, flatbuffers_string_t, __flatbuffers_string_cmp)
#define __flatbuffers_find_by_string_n_field(A, V, E, L, K, Kn)\
__flatbuffers_find_by_field(A, V, E, L, K, Kn, flatbuffers_string_t, __flatbuffers_string_n_cmp)
#define __flatbuffers_define_find_by_scalar_field(N, NK, TK)\
static inline size_t N ## _vec_find_by_ ## NK(N ## _vec_t vec__tmp, TK key__tmp)\
__flatbuffers_find_by_scalar_field(N ## _ ## NK, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, TK)
#define __flatbuffers_define_scalar_find(N, T)\
static inline size_t N ## _vec_find(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_find_by_scalar_field(__flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)
#define __flatbuffers_define_find_by_string_field(N, NK) \
/* Note: find only works on vectors sorted by this field. */\
static inline size_t N ## _vec_find_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp)\
__flatbuffers_find_by_string_field(N ## _ ## NK, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_find_n_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_find_by_string_n_field(N ## _ ## NK, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)
#define __flatbuffers_define_default_find_by_scalar_field(N, NK, TK)\
static inline size_t N ## _vec_find(N ## _vec_t vec__tmp, TK key__tmp)\
{ return N ## _vec_find_by_ ## NK(vec__tmp, key__tmp); }
#define __flatbuffers_define_default_find_by_string_field(N, NK) \
static inline size_t N ## _vec_find(N ## _vec_t vec__tmp, const char *s__tmp)\
{ return N ## _vec_find_by_ ## NK(vec__tmp, s__tmp); }\
static inline size_t N ## _vec_find_n(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_find_n_by_ ## NK(vec__tmp, s__tmp, n__tmp); }
/* A = identity if searching scalar vectors rather than key fields. */
/* Returns lowest matching index or not_found. */
#define __flatbuffers_scan_by_field(b, e, A, V, E, L, K, Kn, T, D)\
{ T v__tmp; size_t i__tmp;\
  for (i__tmp = b; i__tmp < e; ++i__tmp) {\
    v__tmp = A(E(V, i__tmp));\
    if (D(v__tmp, (K), (Kn)) == 0) {\
       return i__tmp;\
    }\
  }\
  return flatbuffers_not_found;\
}
#define __flatbuffers_rscan_by_field(b, e, A, V, E, L, K, Kn, T, D)\
{ T v__tmp; size_t i__tmp = e;\
  while (i__tmp-- > b) {\
    v__tmp = A(E(V, i__tmp));\
    if (D(v__tmp, (K), (Kn)) == 0) {\
       return i__tmp;\
    }\
  }\
  return flatbuffers_not_found;\
}
#define __flatbuffers_scan_by_scalar_field(b, e, A, V, E, L, K, T)\
__flatbuffers_scan_by_field(b, e, A, V, E, L, K, 0, T, __flatbuffers_scalar_cmp)
#define __flatbuffers_scan_by_string_field(b, e, A, V, E, L, K)\
__flatbuffers_scan_by_field(b, e, A, V, E, L, K, 0, flatbuffers_string_t, __flatbuffers_string_cmp)
#define __flatbuffers_scan_by_string_n_field(b, e, A, V, E, L, K, Kn)\
__flatbuffers_scan_by_field(b, e, A, V, E, L, K, Kn, flatbuffers_string_t, __flatbuffers_string_n_cmp)
#define __flatbuffers_rscan_by_scalar_field(b, e, A, V, E, L, K, T)\
__flatbuffers_rscan_by_field(b, e, A, V, E, L, K, 0, T, __flatbuffers_scalar_cmp)
#define __flatbuffers_rscan_by_string_field(b, e, A, V, E, L, K)\
__flatbuffers_rscan_by_field(b, e, A, V, E, L, K, 0, flatbuffers_string_t, __flatbuffers_string_cmp)
#define __flatbuffers_rscan_by_string_n_field(b, e, A, V, E, L, K, Kn)\
__flatbuffers_rscan_by_field(b, e, A, V, E, L, K, Kn, flatbuffers_string_t, __flatbuffers_string_n_cmp)
#define __flatbuffers_define_scan_by_scalar_field(N, NK, T)\
static inline size_t N ## _vec_scan_by_ ## NK(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_scan_by_scalar_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_scan_ex_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, T key__tmp)\
__flatbuffers_scan_by_scalar_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_rscan_by_ ## NK(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_rscan_by_scalar_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_rscan_ex_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, T key__tmp)\
__flatbuffers_rscan_by_scalar_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)
#define __flatbuffers_define_scalar_scan(N, T)\
static inline size_t N ## _vec_scan(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_scan_by_scalar_field(0, N ## _vec_len(vec__tmp), __flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_scan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, T key__tmp)\
__flatbuffers_scan_by_scalar_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), __flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_rscan(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_rscan_by_scalar_field(0, N ## _vec_len(vec__tmp), __flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_rscan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, T key__tmp)\
__flatbuffers_rscan_by_scalar_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), __flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)
#define __flatbuffers_define_scan_by_string_field(N, NK) \
static inline size_t N ## _vec_scan_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp)\
__flatbuffers_scan_by_string_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_scan_n_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_scan_by_string_n_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)\
static inline size_t N ## _vec_scan_ex_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp)\
__flatbuffers_scan_by_string_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_scan_ex_n_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_scan_by_string_n_field(begin__tmp, __flatbuffers_min( end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)\
static inline size_t N ## _vec_rscan_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp)\
__flatbuffers_rscan_by_string_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_rscan_n_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_rscan_by_string_n_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)\
static inline size_t N ## _vec_rscan_ex_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp)\
__flatbuffers_rscan_by_string_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_rscan_ex_n_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_rscan_by_string_n_field(begin__tmp, __flatbuffers_min( end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)
#define __flatbuffers_define_default_scan_by_scalar_field(N, NK, TK)\
static inline size_t N ## _vec_scan(N ## _vec_t vec__tmp, TK key__tmp)\
{ return N ## _vec_scan_by_ ## NK(vec__tmp, key__tmp); }\
static inline size_t N ## _vec_scan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, TK key__tmp)\
{ return N ## _vec_scan_ex_by_ ## NK(vec__tmp, begin__tmp, end__tmp, key__tmp); }\
static inline size_t N ## _vec_rscan(N ## _vec_t vec__tmp, TK key__tmp)\
{ return N ## _vec_rscan_by_ ## NK(vec__tmp, key__tmp); }\
static inline size_t N ## _vec_rscan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, TK key__tmp)\
{ return N ## _vec_rscan_ex_by_ ## NK(vec__tmp, begin__tmp, end__tmp, key__tmp); }
#define __flatbuffers_define_default_scan_by_string_field(N, NK) \
static inline size_t N ## _vec_scan(N ## _vec_t vec__tmp, const char *s__tmp)\
{ return N ## _vec_scan_by_ ## NK(vec__tmp, s__tmp); }\
static inline size_t N ## _vec_scan_n(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_scan_n_by_ ## NK(vec__tmp, s__tmp, n__tmp); }\
static inline size_t N ## _vec_scan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp)\
{ return N ## _vec_scan_ex_by_ ## NK(vec__tmp, begin__tmp, end__tmp, s__tmp); }\
static inline size_t N ## _vec_scan_ex_n(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_scan_ex_n_by_ ## NK(vec__tmp, begin__tmp, end__tmp, s__tmp, n__tmp); }\
static inline size_t N ## _vec_rscan(N ## _vec_t vec__tmp, const char *s__tmp)\
{ return N ## _vec_rscan_by_ ## NK(vec__tmp, s__tmp); }\
static inline size_t N ## _vec_rscan_n(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_rscan_n_by_ ## NK(vec__tmp, s__tmp, n__tmp); }\
static inline size_t N ## _vec_rscan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp)\
{ return N ## _vec_rscan_ex_by_ ## NK(vec__tmp, begin__tmp, end__tmp, s__tmp); }\
static inline size_t N ## _vec_rscan_ex_n(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_rscan_ex_n_by_ ## NK(vec__tmp, begin__tmp, end__tmp, s__tmp, n__tmp); }
#define __flatbuffers_heap_sort(N, X, A, E, L, TK, TE, D, S)\
static inline void __ ## N ## X ## __heap_sift_down(\
        N ## _mutable_vec_t vec__tmp, size_t start__tmp, size_t end__tmp)\
{ size_t child__tmp, root__tmp; TK v1__tmp, v2__tmp, vroot__tmp;\
  root__tmp = start__tmp;\
  while ((root__tmp << 1) <= end__tmp) {\
    child__tmp = root__tmp << 1;\
    if (child__tmp < end__tmp) {\
      v1__tmp = A(E(vec__tmp, child__tmp));\
      v2__tmp = A(E(vec__tmp, child__tmp + 1));\
      if (D(v1__tmp, v2__tmp) < 0) {\
        child__tmp++;\
      }\
    }\
    vroot__tmp = A(E(vec__tmp, root__tmp));\
    v1__tmp = A(E(vec__tmp, child__tmp));\
    if (D(vroot__tmp, v1__tmp) < 0) {\
      S(vec__tmp, root__tmp, child__tmp, TE);\
      root__tmp = child__tmp;\
    } else {\
      return;\
    }\
  }\
}\
static inline void __ ## N ## X ## __heap_sort(N ## _mutable_vec_t vec__tmp)\
{ size_t start__tmp, end__tmp, size__tmp;\
  size__tmp = L(vec__tmp); if (size__tmp == 0) return; end__tmp = size__tmp - 1; start__tmp = size__tmp >> 1;\
  do { __ ## N ## X ## __heap_sift_down(vec__tmp, start__tmp, end__tmp); } while (start__tmp--);\
  while (end__tmp > 0) { \
    S(vec__tmp, 0, end__tmp, TE);\
    __ ## N ## X ## __heap_sift_down(vec__tmp, 0, --end__tmp); } }
#define __flatbuffers_define_sort_by_field(N, NK, TK, TE, D, S)\
  __flatbuffers_heap_sort(N, _sort_by_ ## NK, N ## _ ## NK ## _get, N ## _vec_at, N ## _vec_len, TK, TE, D, S)\
static inline void N ## _vec_sort_by_ ## NK(N ## _mutable_vec_t vec__tmp)\
{ __ ## N ## _sort_by_ ## NK ## __heap_sort(vec__tmp); }
#define __flatbuffers_define_sort(N, TK, TE, D, S)\
__flatbuffers_heap_sort(N, , __flatbuffers_identity, N ## _vec_at, N ## _vec_len, TK, TE, D, S)\
static inline void N ## _vec_sort(N ## _mutable_vec_t vec__tmp) { __ ## N ## __heap_sort(vec__tmp); }
#define __flatbuffers_scalar_diff(x, y) ((x) < (y) ? -1 : (x) > (y))
#define __flatbuffers_string_diff(x, y) __flatbuffers_string_n_cmp((x), (const char *)(y), flatbuffers_string_len(y))
#define __flatbuffers_value_swap(vec, a, b, TE) { TE x__tmp = vec[b]; vec[b] = vec[a]; vec[a] = x__tmp; }
#define __flatbuffers_uoffset_swap(vec, a, b, TE)\
{ TE ta__tmp, tb__tmp, d__tmp;\
  d__tmp = (TE)((a - b) * sizeof(vec[0]));\
  ta__tmp =  __flatbuffers_uoffset_read_from_pe(vec + b) - d__tmp;\
  tb__tmp =  __flatbuffers_uoffset_read_from_pe(vec + a) + d__tmp;\
  __flatbuffers_uoffset_write_to_pe(vec + a, ta__tmp);\
  __flatbuffers_uoffset_write_to_pe(vec + b, tb__tmp); }
#define __flatbuffers_scalar_swap(vec, a, b, TE) __flatbuffers_value_swap(vec, a, b, TE)
#define __flatbuffers_string_swap(vec, a, b, TE) __flatbuffers_uoffset_swap(vec, a, b, TE)
#define __flatbuffers_struct_swap(vec, a, b, TE) __flatbuffers_value_swap(vec, a, b, TE)
#define __flatbuffers_table_swap(vec, a, b, TE) __flatbuffers_uoffset_swap(vec, a, b, TE)
#define __flatbuffers_define_struct_sort_by_scalar_field(N, NK, TK, TE)\
  __flatbuffers_define_sort_by_field(N, NK, TK, TE, __flatbuffers_scalar_diff, __flatbuffers_struct_swap)
#define __flatbuffers_define_table_sort_by_scalar_field(N, NK, TK)\
  __flatbuffers_define_sort_by_field(N, NK, TK, flatbuffers_uoffset_t, __flatbuffers_scalar_diff, __flatbuffers_table_swap)
#define __flatbuffers_define_table_sort_by_string_field(N, NK)\
  __flatbuffers_define_sort_by_field(N, NK, flatbuffers_string_t, flatbuffers_uoffset_t, __flatbuffers_string_diff, __flatbuffers_table_swap)
#define __flatbuffers_define_scalar_sort(N, T) __flatbuffers_define_sort(N, T, T, __flatbuffers_scalar_diff, __flatbuffers_scalar_swap)
#define __flatbuffers_define_string_sort() __flatbuffers_define_sort(flatbuffers_string, flatbuffers_string_t, flatbuffers_uoffset_t, __flatbuffers_string_diff, __flatbuffers_string_swap)
#define __flatbuffers_sort_vector_field(N, NK, T, t)\
{ T ## _mutable_vec_t v__tmp = (T ## _mutable_vec_t) N ## _ ## NK ## _get(t);\
  if (v__tmp) T ## _vec_sort(v__tmp); }
#define __flatbuffers_sort_table_field(N, NK, T, t)\
{ T ## _sort((T ## _mutable_table_t)N ## _ ## NK ## _get(t)); }
#define __flatbuffers_sort_union_field(N, NK, T, t)\
{ T ## _sort(T ## _mutable_union_cast(N ## _ ## NK ## _union(t))); }
#define __flatbuffers_sort_table_vector_field_elements(N, NK, T, t)\
{ T ## _vec_t v__tmp = N ## _ ## NK ## _get(t); size_t i__tmp, n__tmp;\
  n__tmp = T ## _vec_len(v__tmp); for (i__tmp = 0; i__tmp < n__tmp; ++i__tmp) {\
  T ## _sort((T ## _mutable_table_t)T ## _vec_at(v__tmp, i__tmp)); }}
#define __flatbuffers_sort_union_vector_field_elements(N, NK, T, t)\
{ T ## _union_vec_t v__tmp = N ## _ ## NK ## _union(t); size_t i__tmp, n__tmp;\
  n__tmp = T ## _union_vec_len(v__tmp); for (i__tmp = 0; i__tmp < n__tmp; ++i__tmp) {\
  T ## _sort(T ## _mutable_union_cast(T ## _union_vec_at(v__tmp, i__tmp))); }}
#define __flatbuffers_define_scalar_vector(N, T)\
typedef const T *N ## _vec_t;\
typedef T *N ## _mutable_vec_t;\
__flatbuffers_define_scalar_vec_len(N)\
__flatbuffers_define_scalar_vec_at(N, T)\
__flatbuffers_define_scalar_find(N, T)\
__flatbuffers_define_scalar_scan(N, T)\
__flatbuffers_define_scalar_sort(N, T)

#define __flatbuffers_define_integer_type(N, T, W)\
__flatcc_define_integer_accessors(N, T, W, flatbuffers_endian)\
__flatbuffers_define_scalar_vector(N, T)
__flatbuffers_define_scalar_vector(flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_scalar_vector(flatbuffers_char, char)
__flatbuffers_define_scalar_vector(flatbuffers_uint8, uint8_t)
__flatbuffers_define_scalar_vector(flatbuffers_int8, int8_t)
__flatbuffers_define_scalar_vector(flatbuffers_uint16, uint16_t)
__flatbuffers_define_scalar_vector(flatbuffers_int16, int16_t)
__flatbuffers_define_scalar_vector(flatbuffers_uint32, uint32_t)
__flatbuffers_define_scalar_vector(flatbuffers_int32, int32_t)
__flatbuffers_define_scalar_vector(flatbuffers_uint64, uint64_t)
__flatbuffers_define_scalar_vector(flatbuffers_int64, int64_t)
__flatbuffers_define_scalar_vector(flatbuffers_float, float)
__flatbuffers_define_scalar_vector(flatbuffers_double, double)
__flatbuffers_define_scalar_vector(flatbuffers_union_type, flatbuffers_union_type_t)
static inline size_t flatbuffers_string_vec_find(flatbuffers_string_vec_t vec, const char *s)
__flatbuffers_find_by_string_field(__flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_find_n(flatbuffers_string_vec_t vec, const char *s, size_t n)
__flatbuffers_find_by_string_n_field(__flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
static inline size_t flatbuffers_string_vec_scan(flatbuffers_string_vec_t vec, const char *s)
__flatbuffers_scan_by_string_field(0, flatbuffers_string_vec_len(vec), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_scan_n(flatbuffers_string_vec_t vec, const char *s, size_t n)
__flatbuffers_scan_by_string_n_field(0, flatbuffers_string_vec_len(vec), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
static inline size_t flatbuffers_string_vec_scan_ex(flatbuffers_string_vec_t vec, size_t begin, size_t end, const char *s)
__flatbuffers_scan_by_string_field(begin, __flatbuffers_min(end, flatbuffers_string_vec_len(vec)), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_scan_ex_n(flatbuffers_string_vec_t vec, size_t begin, size_t end, const char *s, size_t n)
__flatbuffers_scan_by_string_n_field(begin, __flatbuffers_min(end, flatbuffers_string_vec_len(vec)), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
static inline size_t flatbuffers_string_vec_rscan(flatbuffers_string_vec_t vec, const char *s)
__flatbuffers_rscan_by_string_field(0, flatbuffers_string_vec_len(vec), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_rscan_n(flatbuffers_string_vec_t vec, const char *s, size_t n)
__flatbuffers_rscan_by_string_n_field(0, flatbuffers_string_vec_len(vec), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
static inline size_t flatbuffers_string_vec_rscan_ex(flatbuffers_string_vec_t vec, size_t begin, size_t end, const char *s)
__flatbuffers_rscan_by_string_field(begin, __flatbuffers_min(end, flatbuffers_string_vec_len(vec)), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_rscan_ex_n(flatbuffers_string_vec_t vec, size_t begin, size_t end, const char *s, size_t n)
__flatbuffers_rscan_by_string_n_field(begin, __flatbuffers_min(end, flatbuffers_string_vec_len(vec)), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
__flatbuffers_define_string_sort()
#define __flatbuffers_define_struct_scalar_fixed_array_field(N, NK, TK, T, L)\
static inline T N ## _ ## NK ## _get(N ## _struct_t t__tmp, size_t i__tmp)\
{ if (!t__tmp || i__tmp >= L) return 0;\
  return __flatbuffers_read_scalar(TK, &(t__tmp->NK[i__tmp])); }\
static inline const T *N ## _ ## NK ## _get_ptr(N ## _struct_t t__tmp)\
{ return t__tmp ? t__tmp->NK : 0; }\
static inline size_t N ## _ ## NK ## _get_len(void) { return L; }\
static inline T N ## _ ## NK (N ## _struct_t t__tmp, size_t i__tmp)\
{ return N ## _ ## NK ## _get(t__tmp, i__tmp); }
#define __flatbuffers_define_struct_struct_fixed_array_field(N, NK, T, L)\
static inline T N ## _ ## NK ## _get(N ## _struct_t t__tmp, size_t i__tmp)\
{ if (!t__tmp || i__tmp >= L) return 0; return t__tmp->NK + i__tmp; }static inline T N ## _ ## NK ## _get_ptr(N ## _struct_t t__tmp)\
{ return t__tmp ? t__tmp->NK : 0; }\
static inline size_t N ## _ ## NK ## _get_len(void) { return L; }\
static inline T N ## _ ## NK(N ## _struct_t t__tmp, size_t i__tmp)\
{ if (!t__tmp || i__tmp >= L) return 0; return t__tmp->NK + i__tmp; }
#define __flatbuffers_define_struct_scalar_field(N, NK, TK, T)\
static inline T N ## _ ## NK ## _get(N ## _struct_t t__tmp)\
{ return t__tmp ? __flatbuffers_read_scalar(TK, &(t__tmp->NK)) : 0; }\
static inline const T *N ## _ ## NK ## _get_ptr(N ## _struct_t t__tmp)\
{ return t__tmp ? &(t__tmp->NK) : 0; }\
static inline T N ## _ ## NK (N ## _struct_t t__tmp)\
{ return t__tmp ? __flatbuffers_read_scalar(TK, &(t__tmp->NK)) : 0; }\
__flatbuffers_define_scan_by_scalar_field(N, NK, T)
#define __flatbuffers_define_struct_struct_field(N, NK, T)\
static inline T N ## _ ## NK ## _get(N ## _struct_t t__tmp) { return t__tmp ? &(t__tmp->NK) : 0; }\
static inline T N ## _ ## NK (N ## _struct_t t__tmp) { return t__tmp ? &(t__tmp->NK) : 0; }
/* If fid is null, the function returns true without testing as buffer is not expected to have any id. */
static inline int flatbuffers_has_identifier(const void *buffer, const char *fid)
{ flatbuffers_thash_t id, id2 = 0; if (fid == 0) { return 1; };
  id2 = flatbuffers_type_hash_from_string(fid);
  id = __flatbuffers_thash_read_from_pe(((flatbuffers_uoffset_t *)buffer) + 1);
  return id2 == 0 || id == id2; }
static inline int flatbuffers_has_type_hash(const void *buffer, flatbuffers_thash_t thash)
{ return thash == 0 || (__flatbuffers_thash_read_from_pe((flatbuffers_uoffset_t *)buffer + 1) == thash); }

static inline flatbuffers_thash_t flatbuffers_get_type_hash(const void *buffer)
{ return __flatbuffers_thash_read_from_pe((flatbuffers_uoffset_t *)buffer + 1); }

#define flatbuffers_verify_endian() flatbuffers_has_identifier("\x00\x00\x00\x00" "1234", "1234")
static inline void *flatbuffers_read_size_prefix(void *b, size_t *size_out)
{ if (size_out) { *size_out = (size_t)__flatbuffers_uoffset_read_from_pe(b); }
  return (uint8_t *)b + sizeof(flatbuffers_uoffset_t); }
/* Null file identifier accepts anything, otherwise fid should be 4 characters. */
#define __flatbuffers_read_root(T, K, buffer, fid)\
  ((!buffer || !flatbuffers_has_identifier(buffer, fid)) ? 0 :\
  ((T ## _ ## K ## t)(((uint8_t *)buffer) +\
    __flatbuffers_uoffset_read_from_pe(buffer))))
#define __flatbuffers_read_typed_root(T, K, buffer, thash)\
  ((!buffer || !flatbuffers_has_type_hash(buffer, thash)) ? 0 :\
  ((T ## _ ## K ## t)(((uint8_t *)buffer) +\
    __flatbuffers_uoffset_read_from_pe(buffer))))
#define __flatbuffers_nested_buffer_as_root(C, N, T, K)\
static inline T ## _ ## K ## t C ## _ ## N ## _as_root_with_identifier(C ## _ ## table_t t__tmp, const char *fid__tmp)\
{ const uint8_t *buffer__tmp = C ## _ ## N(t__tmp); return __flatbuffers_read_root(T, K, buffer__tmp, fid__tmp); }\
static inline T ## _ ## K ## t C ## _ ## N ## _as_typed_root(C ## _ ## table_t t__tmp)\
{ const uint8_t *buffer__tmp = C ## _ ## N(t__tmp); return __flatbuffers_read_root(T, K, buffer__tmp, C ## _ ## type_identifier); }\
static inline T ## _ ## K ## t C ## _ ## N ## _as_root(C ## _ ## table_t t__tmp)\
{ const char *fid__tmp = T ## _file_identifier;\
  const uint8_t *buffer__tmp = C ## _ ## N(t__tmp); return __flatbuffers_read_root(T, K, buffer__tmp, fid__tmp); }
#define __flatbuffers_buffer_as_root(N, K)\
static inline N ## _ ## K ## t N ## _as_root_with_identifier(const void *buffer__tmp, const char *fid__tmp)\
{ return __flatbuffers_read_root(N, K, buffer__tmp, fid__tmp); }\
static inline N ## _ ## K ## t N ## _as_root_with_type_hash(const void *buffer__tmp, flatbuffers_thash_t thash__tmp)\
{ return __flatbuffers_read_typed_root(N, K, buffer__tmp, thash__tmp); }\
static inline N ## _ ## K ## t N ## _as_root(const void *buffer__tmp)\
{ const char *fid__tmp = N ## _file_identifier;\
  return __flatbuffers_read_root(N, K, buffer__tmp, fid__tmp); }\
static inline N ## _ ## K ## t N ## _as_typed_root(const void *buffer__tmp)\
{ return __flatbuffers_read_typed_root(N, K, buffer__tmp, N ## _type_hash); }
#define __flatbuffers_struct_as_root(N) __flatbuffers_buffer_as_root(N, struct_)
#define __flatbuffers_table_as_root(N) __flatbuffers_buffer_as_root(N, table_)

#include "flatcc/flatcc_epilogue.h"
#endif /* FLATBUFFERS_COMMON_H */
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#define FLATBUFFERS_COMMON_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

/* Common FlatBuffers build functionality for C. */

#include "flatcc/flatcc_prologue.h"
#ifndef FLATBUILDER_H
#include "flatcc/flatcc_builder.h"
#endif
typedef flatcc_builder_t flatbuffers_builder_t;
typedef flatcc_builder_ref_t flatbuffers_ref_t;
typedef flatcc_builder_ref_t flatbuffers_vec_ref_t;
typedef flatcc_builder_union_ref_t flatbuffers_union_ref_t;
typedef flatcc_builder_union_vec_ref_t flatbuffers_union_vec_ref_t;
/* integer return code (ref and ptr always fail on 0) */
#define flatbuffers_failed(x) ((x) < 0)
typedef flatbuffers_ref_t flatbuffers_root_t;
#define flatbuffers_root(ref) ((flatbuffers_root_t)(ref))

#define __flatbuffers_memoize_begin(B, src)\
do { flatcc_builder_ref_t _ref; if ((_ref = flatcc_builder_refmap_find((B), (src)))) return _ref; } while (0)
#define __flatbuffers_memoize_end(B, src, op) do { return flatcc_builder_refmap_insert((B), (src), (op)); } while (0)
#define __flatbuffers_memoize(B, src, op) do { __flatbuffers_memoize_begin(B, src); __flatbuffers_memoize_end(B, src, op); } while (0)

#define __flatbuffers_build_buffer(NS)\
typedef NS ## ref_t NS ## buffer_ref_t;\
static inline int NS ## buffer_start(NS ## builder_t *B, const NS ##fid_t fid)\
{ return flatcc_builder_start_buffer(B, fid, 0, 0); }\
static inline int NS ## buffer_start_with_size(NS ## builder_t *B, const NS ##fid_t fid)\
{ return flatcc_builder_start_buffer(B, fid, 0, flatcc_builder_with_size); }\
static inline int NS ## buffer_start_aligned(NS ## builder_t *B, NS ##fid_t fid, uint16_t block_align)\
{ return flatcc_builder_start_buffer(B, fid, block_align, 0); }\
static inline int NS ## buffer_start_aligned_with_size(NS ## builder_t *B, NS ##fid_t fid, uint16_t block_align)\
{ return flatcc_builder_start_buffer(B, fid, block_align, flatcc_builder_with_size); }\
static inline NS ## buffer_ref_t NS ## buffer_end(NS ## builder_t *B, NS ## ref_t root)\
{ return flatcc_builder_end_buffer(B, root); }

#define __flatbuffers_build_table_root(NS, N, FID, TFID)\
static inline int N ## _start_as_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? -1 : N ## _start(B); }\
static inline int N ## _start_as_root_with_size(NS ## builder_t *B)\
{ return NS ## buffer_start_with_size(B, FID) ? -1 : N ## _start(B); }\
static inline int N ## _start_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, TFID) ? -1 : N ## _start(B); }\
static inline int N ## _start_as_typed_root_with_size(NS ## builder_t *B)\
{ return NS ## buffer_start_with_size(B, TFID) ? -1 : N ## _start(B); }\
static inline NS ## buffer_ref_t N ## _end_as_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end(B)); }\
static inline NS ## buffer_ref_t N ## _end_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end(B)); }\
static inline NS ## buffer_ref_t N ## _create_as_root(NS ## builder_t *B __ ## N ## _formal_args)\
{ if (NS ## buffer_start(B, FID)) return 0; return NS ## buffer_end(B, N ## _create(B __ ## N ## _call_args)); }\
static inline NS ## buffer_ref_t N ## _create_as_root_with_size(NS ## builder_t *B __ ## N ## _formal_args)\
{ if (NS ## buffer_start_with_size(B, FID)) return 0; return NS ## buffer_end(B, N ## _create(B __ ## N ## _call_args)); }\
static inline NS ## buffer_ref_t N ## _create_as_typed_root(NS ## builder_t *B __ ## N ## _formal_args)\
{ if (NS ## buffer_start(B, TFID)) return 0; return NS ## buffer_end(B, N ## _create(B __ ## N ## _call_args)); }\
static inline NS ## buffer_ref_t N ## _create_as_typed_root_with_size(NS ## builder_t *B __ ## N ## _formal_args)\
{ if (NS ## buffer_start_with_size(B, TFID)) return 0; return NS ## buffer_end(B, N ## _create(B __ ## N ## _call_args)); }\
static inline NS ## buffer_ref_t N ## _clone_as_root(NS ## builder_t *B, N ## _table_t t)\
{ if (NS ## buffer_start(B, FID)) return 0; return NS ## buffer_end(B, N ## _clone(B, t)); }\
static inline NS ## buffer_ref_t N ## _clone_as_root_with_size(NS ## builder_t *B, N ## _table_t t)\
{ if (NS ## buffer_start_with_size(B, FID)) return 0; return NS ## buffer_end(B, N ## _clone(B, t)); }\
static inline NS ## buffer_ref_t N ## _clone_as_typed_root(NS ## builder_t *B, N ## _table_t t)\
{ if (NS ## buffer_start(B, TFID)) return 0;return NS ## buffer_end(B, N ## _clone(B, t)); }\
static inline NS ## buffer_ref_t N ## _clone_as_typed_root_with_size(NS ## builder_t *B, N ## _table_t t)\
{ if (NS ## buffer_start_with_size(B, TFID)) return 0; return NS ## buffer_end(B, N ## _clone(B, t)); }

#define __flatbuffers_build_table_prolog(NS, N, FID, TFID)\
__flatbuffers_build_table_vector_ops(NS, N ## _vec, N)\
__flatbuffers_build_table_root(NS, N, FID, TFID)

#define __flatbuffers_build_struct_root(NS, N, A, FID, TFID)\
static inline N ## _t *N ## _start_as_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? 0 : N ## _start(B); }\
static inline N ## _t *N ## _start_as_root_with_size(NS ## builder_t *B)\
{ return NS ## buffer_start_with_size(B, FID) ? 0 : N ## _start(B); }\
static inline N ## _t *N ## _start_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, TFID) ? 0 : N ## _start(B); }\
static inline N ## _t *N ## _start_as_typed_root_with_size(NS ## builder_t *B)\
{ return NS ## buffer_start_with_size(B, TFID) ? 0 : N ## _start(B); }\
static inline NS ## buffer_ref_t N ## _end_as_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end(B)); }\
static inline NS ## buffer_ref_t N ## _end_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end(B)); }\
static inline NS ## buffer_ref_t N ## _end_pe_as_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end_pe(B)); }\
static inline NS ## buffer_ref_t N ## _end_pe_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end_pe(B)); }\
static inline NS ## buffer_ref_t N ## _create_as_root(NS ## builder_t *B __ ## N ## _formal_args)\
{ return flatcc_builder_create_buffer(B, FID, 0,\
  N ## _create(B __ ## N ## _call_args), A, 0); }\
static inline NS ## buffer_ref_t N ## _create_as_root_with_size(NS ## builder_t *B __ ## N ## _formal_args)\
{ return flatcc_builder_create_buffer(B, FID, 0,\
  N ## _create(B __ ## N ## _call_args), A, flatcc_builder_with_size); }\
static inline NS ## buffer_ref_t N ## _create_as_typed_root(NS ## builder_t *B __ ## N ## _formal_args)\
{ return flatcc_builder_create_buffer(B, TFID, 0,\
  N ## _create(B __ ## N ## _call_args), A, 0); }\
static inline NS ## buffer_ref_t N ## _create_as_typed_root_with_size(NS ## builder_t *B __ ## N ## _formal_args)\
{ return flatcc_builder_create_buffer(B, TFID, 0,\
  N ## _create(B __ ## N ## _call_args), A, flatcc_builder_with_size); }\
static inline NS ## buffer_ref_t N ## _clone_as_root(NS ## builder_t *B, N ## _struct_t p)\
{ return flatcc_builder_create_buffer(B, FID, 0, N ## _clone(B, p), A, 0); }\
static inline NS ## buffer_ref_t N ## _clone_as_root_with_size(NS ## builder_t *B, N ## _struct_t p)\
{ return flatcc_builder_create_buffer(B, FID, 0, N ## _clone(B, p), A, flatcc_builder_with_size); }\
static inline NS ## buffer_ref_t N ## _clone_as_typed_root(NS ## builder_t *B, N ## _struct_t p)\
{ return flatcc_builder_create_buffer(B, TFID, 0, N ## _clone(B, p), A, 0); }\
static inline NS ## buffer_ref_t N ## _clone_as_typed_root_with_size(NS ## builder_t *B, N ## _struct_t p)\
{ return flatcc_builder_create_buffer(B, TFID, 0, N ## _clone(B, p), A, flatcc_builder_with_size); }

#define __flatbuffers_build_nested_table_root(NS, N, TN, FID, TFID)\
static inline int N ## _start_as_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? -1 : TN ## _start(B); }\
static inline int N ## _start_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, TFID) ? -1 : TN ## _start(B); }\
static inline int N ## _end_as_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end(B))); }\
static inline int N ## _end_as_typed_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end(B))); }\
static inline int N ## _nest(NS ## builder_t *B, void *data, size_t size, uint16_t align)\
{ return N ## _add(B, flatcc_builder_create_vector(B, data, size, 1,\
  align ? align : 8, FLATBUFFERS_COUNT_MAX(1))); }\
static inline int N ## _typed_nest(NS ## builder_t *B, void *data, size_t size, uint16_t align)\
{ return N ## _add(B, flatcc_builder_create_vector(B, data, size, 1,\
  align ? align : 8, FLATBUFFERS_COUNT_MAX(1))); }\
static inline int N ## _clone_as_root(NS ## builder_t *B, TN ## _table_t t)\
{ return N ## _add(B, TN ## _clone_as_root(B, t)); }\
static inline int N ## _clone_as_typed_root(NS ## builder_t *B, TN ## _table_t t)\
{ return N ## _add(B, TN ## _clone_as_typed_root(B, t)); }

#define __flatbuffers_build_nested_struct_root(NS, N, TN, A, FID, TFID)\
static inline TN ## _t *N ## _start_as_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? 0 : TN ## _start(B); }\
static inline TN ## _t *N ## _start_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? 0 : TN ## _start(B); }\
static inline int N ## _end_as_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end(B))); }\
static inline int N ## _end_as_typed_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end(B))); }\
static inline int N ## _end_pe_as_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end_pe(B))); }\
static inline int N ## _create_as_root(NS ## builder_t *B __ ## TN ## _formal_args)\
{ return N ## _add(B, flatcc_builder_create_buffer(B, FID, 0,\
  TN ## _create(B __ ## TN ## _call_args), A, flatcc_builder_is_nested)); }\
static inline int N ## _create_as_typed_root(NS ## builder_t *B __ ## TN ## _formal_args)\
{ return N ## _add(B, flatcc_builder_create_buffer(B, TFID, 0,\
  TN ## _create(B __ ## TN ## _call_args), A, flatcc_builder_is_nested)); }\
static inline int N ## _nest(NS ## builder_t *B, void *data, size_t size, uint16_t align)\
{ return N ## _add(B, flatcc_builder_create_vector(B, data, size, 1,\
  align < A ? A : align, FLATBUFFERS_COUNT_MAX(1))); }\
static inline int N ## _typed_nest(NS ## builder_t *B, void *data, size_t size, uint16_t align)\
{ return N ## _add(B, flatcc_builder_create_vector(B, data, size, 1,\
  align < A ? A : align, FLATBUFFERS_COUNT_MAX(1))); }\
static inline int N ## _clone_as_root(NS ## builder_t *B, TN ## _struct_t p)\
{ return N ## _add(B, TN ## _clone_as_root(B, p)); }\
static inline int N ## _clone_as_typed_root(NS ## builder_t *B, TN ## _struct_t p)\
{ return N ## _add(B, TN ## _clone_as_typed_root(B, p)); }

#define __flatbuffers_build_vector_ops(NS, V, N, TN, T)\
static inline T *V ## _extend(NS ## builder_t *B, size_t len)\
{ return (T *)flatcc_builder_extend_vector(B, len); }\
static inline T *V ## _append(NS ## builder_t *B, const T *data, size_t len)\
{ return (T *)flatcc_builder_append_vector(B, data, len); }\
static inline int V ## _truncate(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_truncate_vector(B, len); }\
static inline T *V ## _edit(NS ## builder_t *B)\
{ return (T *)flatcc_builder_vector_edit(B); }\
static inline size_t V ## _reserved_len(NS ## builder_t *B)\
{ return flatcc_builder_vector_count(B); }\
static inline T *V ## _push(NS ## builder_t *B, const T *p)\
{ T *_p; return (_p = (T *)flatcc_builder_extend_vector(B, 1)) ? (memcpy(_p, p, TN ## __size()), _p) : 0; }\
static inline T *V ## _push_copy(NS ## builder_t *B, const T *p)\
{ T *_p; return (_p = (T *)flatcc_builder_extend_vector(B, 1)) ? TN ## _copy(_p, p) : 0; }\
static inline T *V ## _push_clone(NS ## builder_t *B, const T *p)\
{ T *_p; return (_p = (T *)flatcc_builder_extend_vector(B, 1)) ? TN ## _copy(_p, p) : 0; }\
static inline T *V ## _push_create(NS ## builder_t *B __ ## TN ## _formal_args)\
{ T *_p; return (_p = (T *)flatcc_builder_extend_vector(B, 1)) ? TN ## _assign(_p __ ## TN ## _call_args) : 0; }

#define __flatbuffers_build_vector(NS, N, T, S, A)\
typedef NS ## ref_t N ## _vec_ref_t;\
static inline int N ## _vec_start(NS ## builder_t *B)\
{ return flatcc_builder_start_vector(B, S, A, FLATBUFFERS_COUNT_MAX(S)); }\
static inline N ## _vec_ref_t N ## _vec_end_pe(NS ## builder_t *B)\
{ return flatcc_builder_end_vector(B); }\
static inline N ## _vec_ref_t N ## _vec_end(NS ## builder_t *B)\
{ if (!NS ## is_native_pe()) { size_t i, n; T *p = (T *)flatcc_builder_vector_edit(B);\
    for (i = 0, n = flatcc_builder_vector_count(B); i < n; ++i)\
    { N ## _to_pe(N ## __ptr_add(p, i)); }} return flatcc_builder_end_vector(B); }\
static inline N ## _vec_ref_t N ## _vec_create_pe(NS ## builder_t *B, const T *data, size_t len)\
{ return flatcc_builder_create_vector(B, data, len, S, A, FLATBUFFERS_COUNT_MAX(S)); }\
static inline N ## _vec_ref_t N ## _vec_create(NS ## builder_t *B, const T *data, size_t len)\
{ if (!NS ## is_native_pe()) { size_t i; T *p; int ret = flatcc_builder_start_vector(B, S, A, FLATBUFFERS_COUNT_MAX(S)); if (ret) { return ret; }\
  p = (T *)flatcc_builder_extend_vector(B, len); if (!p) return 0;\
  for (i = 0; i < len; ++i) { N ## _copy_to_pe(N ## __ptr_add(p, i), N ## __const_ptr_add(data, i)); }\
  return flatcc_builder_end_vector(B); } else return flatcc_builder_create_vector(B, data, len, S, A, FLATBUFFERS_COUNT_MAX(S)); }\
static inline N ## _vec_ref_t N ## _vec_clone(NS ## builder_t *B, N ##_vec_t vec)\
{ __flatbuffers_memoize(B, vec, flatcc_builder_create_vector(B, vec, N ## _vec_len(vec), S, A, FLATBUFFERS_COUNT_MAX(S))); }\
static inline N ## _vec_ref_t N ## _vec_slice(NS ## builder_t *B, N ##_vec_t vec, size_t index, size_t len)\
{ size_t n = N ## _vec_len(vec); if (index >= n) index = n; n -= index; if (len > n) len = n;\
  return flatcc_builder_create_vector(B, N ## __const_ptr_add(vec, index), len, S, A, FLATBUFFERS_COUNT_MAX(S)); }\
__flatbuffers_build_vector_ops(NS, N ## _vec, N, N, T)

#define __flatbuffers_build_union_vector_ops(NS, V, N, TN)\
static inline TN ## _union_ref_t *V ## _extend(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_extend_union_vector(B, len); }\
static inline TN ## _union_ref_t *V ## _append(NS ## builder_t *B, const TN ## _union_ref_t *data, size_t len)\
{ return flatcc_builder_append_union_vector(B, data, len); }\
static inline int V ## _truncate(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_truncate_union_vector(B, len); }\
static inline TN ## _union_ref_t *V ## _edit(NS ## builder_t *B)\
{ return (TN ## _union_ref_t *) flatcc_builder_union_vector_edit(B); }\
static inline size_t V ## _reserved_len(NS ## builder_t *B)\
{ return flatcc_builder_union_vector_count(B); }\
static inline TN ## _union_ref_t *V ## _push(NS ## builder_t *B, const TN ## _union_ref_t ref)\
{ return flatcc_builder_union_vector_push(B, ref); }\
static inline TN ## _union_ref_t *V ## _push_clone(NS ## builder_t *B, TN ## _union_t u)\
{ return TN ## _vec_push(B, TN ## _clone(B, u)); }

#define __flatbuffers_build_union_vector(NS, N)\
static inline int N ## _vec_start(NS ## builder_t *B)\
{ return flatcc_builder_start_union_vector(B); }\
static inline N ## _union_vec_ref_t N ## _vec_end(NS ## builder_t *B)\
{ return flatcc_builder_end_union_vector(B); }\
static inline N ## _union_vec_ref_t N ## _vec_create(NS ## builder_t *B, const N ## _union_ref_t *data, size_t len)\
{ return flatcc_builder_create_union_vector(B, data, len); }\
__flatbuffers_build_union_vector_ops(NS, N ## _vec, N, N)\
/* Preserves DAG structure separately for type and value vector, so a type vector could be shared for many value vectors. */\
static inline N ## _union_vec_ref_t N ## _vec_clone(NS ## builder_t *B, N ##_union_vec_t vec)\
{ N ## _union_vec_ref_t _uvref, _ret = { 0, 0 }; NS ## union_ref_t _uref; size_t _i, _len;\
  if (vec.type == 0) return _ret;\
  _uvref.type = flatcc_builder_refmap_find(B, vec.type); _uvref.value = flatcc_builder_refmap_find(B, vec.value);\
  _len = N ## _union_vec_len(vec); if (_uvref.type == 0) {\
  _uvref.type = flatcc_builder_refmap_insert(B, vec.type, (flatcc_builder_create_type_vector(B, vec.type, _len))); }\
  if (_uvref.type == 0) { return _ret; } if (_uvref.value == 0) {\
  if (flatcc_builder_start_offset_vector(B)) return _ret;\
  for (_i = 0; _i < _len; ++_i) { _uref = N ## _clone(B, N ## _union_vec_at(vec, _i));\
    if (!_uref.value || !(flatcc_builder_offset_vector_push(B, _uref.value))) return _ret; }\
  _uvref.value = flatcc_builder_refmap_insert(B, vec.value, flatcc_builder_end_offset_vector(B));\
  if (_uvref.value == 0) return _ret; } return _uvref; }

#define __flatbuffers_build_string_vector_ops(NS, N)\
static inline int N ## _push_start(NS ## builder_t *B)\
{ return NS ## string_start(B); }\
static inline NS ## string_ref_t *N ## _push_end(NS ## builder_t *B)\
{ return NS ## string_vec_push(B, NS ## string_end(B)); }\
static inline NS ## string_ref_t *N ## _push_create(NS ## builder_t *B, const char *s, size_t len)\
{ return NS ## string_vec_push(B, NS ## string_create(B, s, len)); }\
static inline NS ## string_ref_t *N ## _push_create_str(NS ## builder_t *B, const char *s)\
{ return NS ## string_vec_push(B, NS ## string_create_str(B, s)); }\
static inline NS ## string_ref_t *N ## _push_create_strn(NS ## builder_t *B, const char *s, size_t max_len)\
{ return NS ## string_vec_push(B, NS ## string_create_strn(B, s, max_len)); }\
static inline NS ## string_ref_t *N ## _push_clone(NS ## builder_t *B, NS ## string_t string)\
{ return NS ## string_vec_push(B, NS ## string_clone(B, string)); }\
static inline NS ## string_ref_t *N ## _push_slice(NS ## builder_t *B, NS ## string_t string, size_t index, size_t len)\
{ return NS ## string_vec_push(B, NS ## string_slice(B, string, index, len)); }

#define __flatbuffers_build_table_vector_ops(NS, N, TN)\
static inline int N ## _push_start(NS ## builder_t *B)\
{ return TN ## _start(B); }\
static inline TN ## _ref_t *N ## _push_end(NS ## builder_t *B)\
{ return N ## _push(B, TN ## _end(B)); }\
static inline TN ## _ref_t *N ## _push_create(NS ## builder_t *B __ ## TN ##_formal_args)\
{ return N ## _push(B, TN ## _create(B __ ## TN ## _call_args)); }

#define __flatbuffers_build_offset_vector_ops(NS, V, N, TN)\
static inline TN ## _ref_t *V ## _extend(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_extend_offset_vector(B, len); }\
static inline TN ## _ref_t *V ## _append(NS ## builder_t *B, const TN ## _ref_t *data, size_t len)\
{ return flatcc_builder_append_offset_vector(B, data, len); }\
static inline int V ## _truncate(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_truncate_offset_vector(B, len); }\
static inline TN ## _ref_t *V ## _edit(NS ## builder_t *B)\
{ return (TN ## _ref_t *)flatcc_builder_offset_vector_edit(B); }\
static inline size_t V ## _reserved_len(NS ## builder_t *B)\
{ return flatcc_builder_offset_vector_count(B); }\
static inline TN ## _ref_t *V ## _push(NS ## builder_t *B, const TN ## _ref_t ref)\
{ return ref ? flatcc_builder_offset_vector_push(B, ref) : 0; }

#define __flatbuffers_build_offset_vector(NS, N)\
typedef NS ## ref_t N ## _vec_ref_t;\
static inline int N ## _vec_start(NS ## builder_t *B)\
{ return flatcc_builder_start_offset_vector(B); }\
static inline N ## _vec_ref_t N ## _vec_end(NS ## builder_t *B)\
{ return flatcc_builder_end_offset_vector(B); }\
static inline N ## _vec_ref_t N ## _vec_create(NS ## builder_t *B, const N ## _ref_t *data, size_t len)\
{ return flatcc_builder_create_offset_vector(B, data, len); }\
__flatbuffers_build_offset_vector_ops(NS, N ## _vec, N, N)\
static inline N ## _vec_ref_t N ## _vec_clone(NS ## builder_t *B, N ##_vec_t vec)\
{ int _ret; N ## _ref_t _e; size_t _i, _len; __flatbuffers_memoize_begin(B, vec);\
 _len = N ## _vec_len(vec); if (flatcc_builder_start_offset_vector(B)) return 0;\
  for (_i = 0; _i < _len; ++_i) { if (!(_e = N ## _clone(B, N ## _vec_at(vec, _i)))) return 0;\
    if (!flatcc_builder_offset_vector_push(B, _e)) return 0; }\
  __flatbuffers_memoize_end(B, vec, flatcc_builder_end_offset_vector(B)); }\

#define __flatbuffers_build_string_ops(NS, N)\
static inline char *N ## _append(NS ## builder_t *B, const char *s, size_t len)\
{ return flatcc_builder_append_string(B, s, len); }\
static inline char *N ## _append_str(NS ## builder_t *B, const char *s)\
{ return flatcc_builder_append_string_str(B, s); }\
static inline char *N ## _append_strn(NS ## builder_t *B, const char *s, size_t len)\
{ return flatcc_builder_append_string_strn(B, s, len); }\
static inline size_t N ## _reserved_len(NS ## builder_t *B)\
{ return flatcc_builder_string_len(B); }\
static inline char *N ## _extend(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_extend_string(B, len); }\
static inline char *N ## _edit(NS ## builder_t *B)\
{ return flatcc_builder_string_edit(B); }\
static inline int N ## _truncate(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_truncate_string(B, len); }

#define __flatbuffers_build_string(NS)\
typedef NS ## ref_t NS ## string_ref_t;\
static inline int NS ## string_start(NS ## builder_t *B)\
{ return flatcc_builder_start_string(B); }\
static inline NS ## string_ref_t NS ## string_end(NS ## builder_t *B)\
{ return flatcc_builder_end_string(B); }\
static inline NS ## ref_t NS ## string_create(NS ## builder_t *B, const char *s, size_t len)\
{ return flatcc_builder_create_string(B, s, len); }\
static inline NS ## ref_t NS ## string_create_str(NS ## builder_t *B, const char *s)\
{ return flatcc_builder_create_string_str(B, s); }\
static inline NS ## ref_t NS ## string_create_strn(NS ## builder_t *B, const char *s, size_t len)\
{ return flatcc_builder_create_string_strn(B, s, len); }\
static inline NS ## string_ref_t NS ## string_clone(NS ## builder_t *B, NS ## string_t string)\
{ __flatbuffers_memoize(B, string, flatcc_builder_create_string(B, string, NS ## string_len(string))); }\
static inline NS ## string_ref_t NS ## string_slice(NS ## builder_t *B, NS ## string_t string, size_t index, size_t len)\
{ size_t n = NS ## string_len(string); if (index >= n) index = n; n -= index; if (len > n) len = n;\
  return flatcc_builder_create_string(B, string + index, len); }\
__flatbuffers_build_string_ops(NS, NS ## string)\
__flatbuffers_build_offset_vector(NS, NS ## string)

#define __flatbuffers_copy_from_pe(P, P2, N) (*(P) = N ## _read_from_pe(P2), (P))
#define __flatbuffers_from_pe(P, N) (*(P) = N ## _read_from_pe(P), (P))
#define __flatbuffers_copy_to_pe(P, P2, N) (N ## _write_to_pe((P), *(P2)), (P))
#define __flatbuffers_to_pe(P, N) (N ## _write_to_pe((P), *(P)), (P))
#define __flatbuffers_define_fixed_array_primitives(NS, N, T)\
static inline T *N ## _array_copy(T *p, const T *p2, size_t n)\
{ memcpy(p, p2, n * sizeof(T)); return p; }\
static inline T *N ## _array_copy_from_pe(T *p, const T *p2, size_t n)\
{ size_t i; if (NS ## is_native_pe()) memcpy(p, p2, n * sizeof(T)); else {\
  for (i = 0; i < n; ++i) N ## _copy_from_pe(&p[i], &p2[i]); } return p; }\
static inline T *N ## _array_copy_to_pe(T *p, const T *p2, size_t n)\
{ size_t i; if (NS ## is_native_pe()) memcpy(p, p2, n * sizeof(T)); else {\
  for (i = 0; i < n; ++i) N ## _copy_to_pe(&p[i], &p2[i]); } return p; }
#define __flatbuffers_define_scalar_primitives(NS, N, T)\
static inline T *N ## _from_pe(T *p) { return __ ## NS ## from_pe(p, N); }\
static inline T *N ## _to_pe(T *p) { return __ ## NS ## to_pe(p, N); }\
static inline T *N ## _copy(T *p, const T *p2) { *p = *p2; return p; }\
static inline T *N ## _copy_from_pe(T *p, const T *p2)\
{ return __ ## NS ## copy_from_pe(p, p2, N); }\
static inline T *N ## _copy_to_pe(T *p, const T *p2) \
{ return __ ## NS ## copy_to_pe(p, p2, N); }\
static inline T *N ## _assign(T *p, const T v0) { *p = v0; return p; }\
static inline T *N ## _assign_from_pe(T *p, T v0)\
{ *p = N ## _read_from_pe(&v0); return p; }\
static inline T *N ## _assign_to_pe(T *p, T v0)\
{ N ## _write_to_pe(p, v0); return p; }
#define __flatbuffers_build_scalar(NS, N, T)\
__ ## NS ## define_scalar_primitives(NS, N, T)\
__ ## NS ## define_fixed_array_primitives(NS, N, T)\
__ ## NS ## build_vector(NS, N, T, sizeof(T), sizeof(T))
/* Depends on generated copy_to/from_pe functions, and the type. */
#define __flatbuffers_define_struct_primitives(NS, N)\
static inline N ## _t *N ##_to_pe(N ## _t *p)\
{ if (!NS ## is_native_pe()) { N ## _copy_to_pe(p, p); }; return p; }\
static inline N ## _t *N ##_from_pe(N ## _t *p)\
{ if (!NS ## is_native_pe()) { N ## _copy_from_pe(p, p); }; return p; }\
static inline N ## _t *N ## _clear(N ## _t *p) { return (N ## _t *)memset(p, 0, N ## __size()); }

/* Depends on generated copy/assign_to/from_pe functions, and the type. */
#define __flatbuffers_build_struct(NS, N, S, A, FID, TFID)\
__ ## NS ## define_struct_primitives(NS, N)\
typedef NS ## ref_t N ## _ref_t;\
static inline N ## _t *N ## _start(NS ## builder_t *B)\
{ return (N ## _t *)flatcc_builder_start_struct(B, S, A); }\
static inline N ## _ref_t N ## _end(NS ## builder_t *B)\
{ if (!NS ## is_native_pe()) { N ## _to_pe((N ## _t *)flatcc_builder_struct_edit(B)); }\
  return flatcc_builder_end_struct(B); }\
static inline N ## _ref_t N ## _end_pe(NS ## builder_t *B)\
{ return flatcc_builder_end_struct(B); }\
static inline N ## _ref_t N ## _create(NS ## builder_t *B __ ## N ## _formal_args)\
{ N ## _t *_p = N ## _start(B); if (!_p) return 0; N ##_assign_to_pe(_p __ ## N ## _call_args);\
  return N ## _end_pe(B); }\
static inline N ## _ref_t N ## _clone(NS ## builder_t *B, N ## _struct_t p)\
{ N ## _t *_p; __flatbuffers_memoize_begin(B, p); _p = N ## _start(B); if (!_p) return 0;\
  N ## _copy(_p, p); __flatbuffers_memoize_end(B, p, N ##_end_pe(B)); }\
__flatbuffers_build_vector(NS, N, N ## _t, S, A)\
__flatbuffers_build_struct_root(NS, N, A, FID, TFID)\

#define __flatbuffers_struct_clear_field(p) memset((p), 0, sizeof(*(p)))
#define __flatbuffers_build_table(NS, N, K)\
static inline int N ## _start(NS ## builder_t *B)\
{ return flatcc_builder_start_table(B, K); }\
static inline N ## _ref_t N ## _end(NS ## builder_t *B)\
{ FLATCC_ASSERT(flatcc_builder_check_required(B, __ ## N ## _required,\
  sizeof(__ ## N ## _required) / sizeof(__ ## N ## _required[0]) - 1));\
  return flatcc_builder_end_table(B); }\
__flatbuffers_build_offset_vector(NS, N)

#define __flatbuffers_build_table_field(ID, NS, N, TN, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _ref_t ref)\
{ TN ## _ref_t *_p; return (ref && (_p = flatcc_builder_table_add_offset(B, ID))) ?\
  ((*_p = ref), 0) : -1; }\
static inline int N ## _start(NS ## builder_t *B)\
{ return TN ## _start(B); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, TN ## _end(B)); }\
static inline TN ## _ref_t N ## _create(NS ## builder_t *B __ ## TN ##_formal_args)\
{ return N ## _add(B, TN ## _create(B __ ## TN ## _call_args)); }\
static inline int N ## _clone(NS ## builder_t *B, TN ## _table_t p)\
{ return N ## _add(B, TN ## _clone(B, p)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _table_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_union_field(ID, NS, N, TN, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _union_ref_t uref)\
{ NS ## ref_t *_p; TN ## _union_type_t *_pt; if (uref.type == TN ## _NONE) return 0; if (uref.value == 0) return -1;\
  if (!(_pt = (TN ## _union_type_t *)flatcc_builder_table_add(B, ID - 1, sizeof(*_pt), sizeof(*_pt)))) return -1;\
  *_pt = uref.type; if (!(_p = flatcc_builder_table_add_offset(B, ID))) return -1; *_p = uref.value; return 0; }\
static inline int N ## _add_type(NS ## builder_t *B, TN ## _union_type_t type)\
{ TN ## _union_type_t *_pt; if (type == TN ## _NONE) return 0; return (_pt = (TN ## _union_type_t *)flatcc_builder_table_add(B, ID - 1,\
  sizeof(*_pt), sizeof(*_pt))) ? ((*_pt = type), 0) : -1; }\
static inline int N ## _add_value(NS ## builder_t *B, TN ## _union_ref_t uref)\
{ NS ## ref_t *p; if (uref.type == TN ## _NONE) return 0; return (p = flatcc_builder_table_add_offset(B, ID)) ?\
  ((*p = uref.value), 0) : -1; }\
static inline int N ## _clone(NS ## builder_t *B, TN ## _union_t p)\
{ return N ## _add(B, TN ## _clone(B, p)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _union_t _p = N ## _union(t); return _p.type ? N ## _clone(B, _p) : 0; }

/* M is the union value name and T is its type, i.e. the qualified name. */
#define __flatbuffers_build_union_table_value_field(NS, N, NU, M, T)\
static inline int N ## _ ## M ## _add(NS ## builder_t *B, T ## _ref_t ref)\
{ return N ## _add(B, NU ## _as_ ## M (ref)); }\
static inline int N ## _ ## M ## _start(NS ## builder_t *B)\
{ return T ## _start(B); }\
static inline int N ## _ ## M ## _end(NS ## builder_t *B)\
{ T ## _ref_t ref = T ## _end(B);\
  return ref ? N ## _ ## M ## _add(B, ref) : -1; }\
static inline int N ## _ ## M ## _create(NS ## builder_t *B __ ## T ##_formal_args)\
{ T ## _ref_t ref = T ## _create(B __ ## T ## _call_args);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }\
static inline int N ## _ ## M ## _clone(NS ## builder_t *B, T ## _table_t t)\
{ T ## _ref_t ref = T ## _clone(B, t);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }

/* M is the union value name and T is its type, i.e. the qualified name. */
#define __flatbuffers_build_union_struct_value_field(NS, N, NU, M, T)\
static inline int N ## _ ## M ## _add(NS ## builder_t *B, T ## _ref_t ref)\
{ return N ## _add(B, NU ## _as_ ## M (ref)); }\
static inline T ## _t *N ## _ ## M ## _start(NS ## builder_t *B)\
{ return T ## _start(B); }\
static inline int N ## _ ## M ## _end(NS ## builder_t *B)\
{ T ## _ref_t ref = T ## _end(B);\
  return ref ? N ## _ ## M ## _add(B, ref) : -1; }\
static inline int N ## _ ## M ## _create(NS ## builder_t *B __ ## T ##_formal_args)\
{ T ## _ref_t ref = T ## _create(B __ ## T ## _call_args);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }\
static inline int N ## _ ## M ## _end_pe(NS ## builder_t *B)\
{ T ## _ref_t ref = T ## _end_pe(B);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }\
static inline int N ## _ ## M ## _clone(NS ## builder_t *B, T ## _struct_t p)\
{ T ## _ref_t ref = T ## _clone(B, p);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }
#define __flatbuffers_build_union_string_value_field(NS, N, NU, M)\
static inline int N ## _ ## M ## _add(NS ## builder_t *B, NS ## string_ref_t ref)\
{ return N ## _add(B, NU ## _as_ ## M (ref)); }\
__flatbuffers_build_string_field_ops(NS, N ## _ ## M)

/* NS: common namespace, ID: table field id (not offset), TN: name of type T, TT: name of table type
 * S: sizeof of scalar type, A: alignment of type T, default value V of type T. */
#define __flatbuffers_build_scalar_field(ID, NS, N, TN, T, S, A, V, TT)\
static inline int N ## _add(NS ## builder_t *B, const T v)\
{ T *_p; if (v == V) return 0; if (!(_p = (T *)flatcc_builder_table_add(B, ID, S, A))) return -1;\
  TN ## _assign_to_pe(_p, v); return 0; }\
static inline int N ## _force_add(NS ## builder_t *B, const T v)\
{ T *_p; if (!(_p = (T *)flatcc_builder_table_add(B, ID, S, A))) return -1;\
  TN ## _assign_to_pe(_p, v); return 0; }\
/* Clone does not skip default values and expects pe endian content. */\
static inline int N ## _clone(NS ## builder_t *B, const T *p)\
{ return 0 == flatcc_builder_table_add_copy(B, ID, p, S, A) ? -1 : 0; }\
/* Transferring a missing field is a nop success with 0 as result. */\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ const T *_p = N ## _get_ptr(t); return _p ? N ## _clone(B, _p) : 0; }

/* NS: common namespace, ID: table field id (not offset), TN: name of type T, TT: name of table type
 * S: sizeof of scalar type, A: alignment of type T. */
#define __flatbuffers_build_scalar_optional_field(ID, NS, N, TN, T, S, A, TT)\
static inline int N ## _add(NS ## builder_t *B, const T v)\
{ T *_p; if (!(_p = (T *)flatcc_builder_table_add(B, ID, S, A))) return -1;\
  TN ## _assign_to_pe(_p, v); return 0; }\
/* Clone does not skip default values and expects pe endian content. */\
static inline int N ## _clone(NS ## builder_t *B, const T *p)\
{ return 0 == flatcc_builder_table_add_copy(B, ID, p, S, A) ? -1 : 0; }\
/* Transferring a missing field is a nop success with 0 as result. */\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ const T *_p = N ## _get_ptr(t); return _p ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_struct_field(ID, NS, N, TN, S, A, TT)\
static inline TN ## _t *N ## _start(NS ## builder_t *B)\
{ return (TN ## _t *)flatcc_builder_table_add(B, ID, S, A); }\
static inline int N ## _end(NS ## builder_t *B)\
{ if (!NS ## is_native_pe()) { TN ## _to_pe((TN ## _t *)flatcc_builder_table_edit(B, S)); } return 0; }\
static inline int N ## _end_pe(NS ## builder_t *B) { return 0; }\
static inline int N ## _create(NS ## builder_t *B __ ## TN ## _formal_args)\
{ TN ## _t *_p = N ## _start(B); if (!_p) return -1; TN ##_assign_to_pe(_p __ ## TN ## _call_args);\
  return 0; }\
static inline int N ## _add(NS ## builder_t *B, const TN ## _t *p)\
{ TN ## _t *_p = N ## _start(B); if (!_p) return -1; TN ##_copy_to_pe(_p, p); return 0; }\
static inline int N ## _clone(NS ## builder_t *B, TN ## _struct_t p)\
{ return 0 == flatcc_builder_table_add_copy(B, ID, p, S, A) ? -1 : 0; }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _struct_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_vector_field(ID, NS, N, TN, T, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _vec_ref_t ref)\
{ TN ## _vec_ref_t *_p; return (ref && (_p = flatcc_builder_table_add_offset(B, ID))) ? ((*_p = ref), 0) : -1; }\
static inline int N ## _start(NS ## builder_t *B)\
{ return TN ## _vec_start(B); }\
static inline int N ## _end_pe(NS ## builder_t *B)\
{ return N ## _add(B, TN ## _vec_end_pe(B)); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, TN ## _vec_end(B)); }\
static inline int N ## _create_pe(NS ## builder_t *B, const T *data, size_t len)\
{ return N ## _add(B, TN ## _vec_create_pe(B, data, len)); }\
static inline int N ## _create(NS ## builder_t *B, const T *data, size_t len)\
{ return N ## _add(B, TN ## _vec_create(B, data, len)); }\
static inline int N ## _slice(NS ## builder_t *B, TN ## _vec_t vec, size_t index, size_t len)\
{ return N ## _add(B, TN ## _vec_slice(B, vec, index, len)); }\
static inline int N ## _clone(NS ## builder_t *B, TN ## _vec_t vec)\
{ return N ## _add(B, TN ## _vec_clone(B, vec)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _vec_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }\
__flatbuffers_build_vector_ops(NS, N, N, TN, T)\

#define __flatbuffers_build_offset_vector_field(ID, NS, N, TN, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _vec_ref_t ref)\
{ TN ## _vec_ref_t *_p; return (ref && (_p = flatcc_builder_table_add_offset(B, ID))) ? ((*_p = ref), 0) : -1; }\
static inline int N ## _start(NS ## builder_t *B)\
{ return flatcc_builder_start_offset_vector(B); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, flatcc_builder_end_offset_vector(B)); }\
static inline int N ## _create(NS ## builder_t *B, const TN ## _ref_t *data, size_t len)\
{ return N ## _add(B, flatcc_builder_create_offset_vector(B, data, len)); }\
__flatbuffers_build_offset_vector_ops(NS, N, N, TN)\
static inline int N ## _clone(NS ## builder_t *B, TN ## _vec_t vec)\
{ return N ## _add(B, TN ## _vec_clone(B, vec)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _vec_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }

/* depends on N ## _add which differs for union member fields and ordinary fields */\
#define __flatbuffers_build_string_field_ops(NS, N)\
static inline int N ## _start(NS ## builder_t *B)\
{ return flatcc_builder_start_string(B); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, flatcc_builder_end_string(B)); }\
static inline int N ## _create(NS ## builder_t *B, const char *s, size_t len)\
{ return N ## _add(B, flatcc_builder_create_string(B, s, len)); }\
static inline int N ## _create_str(NS ## builder_t *B, const char *s)\
{ return N ## _add(B, flatcc_builder_create_string_str(B, s)); }\
static inline int N ## _create_strn(NS ## builder_t *B, const char *s, size_t max_len)\
{ return N ## _add(B, flatcc_builder_create_string_strn(B, s, max_len)); }\
static inline int N ## _clone(NS ## builder_t *B, NS ## string_t string)\
{ return N ## _add(B, NS ## string_clone(B, string)); }\
static inline int N ## _slice(NS ## builder_t *B, NS ## string_t string, size_t index, size_t len)\
{ return N ## _add(B, NS ## string_slice(B, string, index, len)); }\
__flatbuffers_build_string_ops(NS, N)

#define __flatbuffers_build_string_field(ID, NS, N, TT)\
static inline int N ## _add(NS ## builder_t *B, NS ## string_ref_t ref)\
{ NS ## string_ref_t *_p; return (ref && (_p = flatcc_builder_table_add_offset(B, ID))) ? ((*_p = ref), 0) : -1; }\
__flatbuffers_build_string_field_ops(NS, N)\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ NS ## string_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_table_vector_field(ID, NS, N, TN, TT)\
__flatbuffers_build_offset_vector_field(ID, NS, N, TN, TT)\
__flatbuffers_build_table_vector_ops(NS, N, TN)

#define __flatbuffers_build_union_vector_field(ID, NS, N, TN, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _union_vec_ref_t uvref)\
{ NS ## vec_ref_t *_p; if (!uvref.type || !uvref.value) return uvref.type == uvref.value ? 0 : -1;\
  if (!(_p = flatcc_builder_table_add_offset(B, ID - 1))) return -1; *_p = uvref.type;\
  if (!(_p = flatcc_builder_table_add_offset(B, ID))) return -1; *_p = uvref.value; return 0; }\
static inline int N ## _start(NS ## builder_t *B)\
{ return flatcc_builder_start_union_vector(B); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, flatcc_builder_end_union_vector(B)); }\
static inline int N ## _create(NS ## builder_t *B, const TN ## _union_ref_t *data, size_t len)\
{ return N ## _add(B, flatcc_builder_create_union_vector(B, data, len)); }\
__flatbuffers_build_union_vector_ops(NS, N, N, TN)\
static inline int N ## _clone(NS ## builder_t *B, TN ## _union_vec_t vec)\
{ return N ## _add(B, TN ## _vec_clone(B, vec)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _union_vec_t _p = N ## _union(t); return _p.type ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_union_table_vector_value_field(NS, N, NU, M, T)\
static inline int N ## _ ## M ## _push_start(NS ## builder_t *B)\
{ return T ## _start(B); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_end(NS ## builder_t *B)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (T ## _end(B))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push(NS ## builder_t *B, T ## _ref_t ref)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (ref)); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create(NS ## builder_t *B __ ## T ##_formal_args)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(T ## _create(B __ ## T ## _call_args))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_clone(NS ## builder_t *B, T ## _table_t t)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(T ## _clone(B, t))); }

#define __flatbuffers_build_union_struct_vector_value_field(NS, N, NU, M, T)\
static inline T ## _t *N ## _ ## M ## _push_start(NS ## builder_t *B)\
{ return T ## _start(B); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_end(NS ## builder_t *B)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (T ## _end(B))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push(NS ## builder_t *B, T ## _ref_t ref)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (ref)); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create(NS ## builder_t *B __ ## T ##_formal_args)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(T ## _create(B __ ## T ## _call_args))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_clone(NS ## builder_t *B, T ## _struct_t p)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(T ## _clone(B, p))); }

#define __flatbuffers_build_union_string_vector_value_field(NS, N, NU, M)\
static inline NU ## _union_ref_t *N ## _ ## M ## _push(NS ## builder_t *B, NS ## string_ref_t ref)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (ref)); }\
static inline int N ## _ ## M ## _push_start(NS ## builder_t *B)\
{ return NS ## string_start(B); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_end(NS ## builder_t *B)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_end(B))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create(NS ## builder_t *B, const char *s, size_t len)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_create(B, s, len))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create_str(NS ## builder_t *B, const char *s)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_create_str(B, s))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create_strn(NS ## builder_t *B, const char *s, size_t max_len)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_create_strn(B, s, max_len))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_clone(NS ## builder_t *B, NS ## string_t string)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_clone(B, string))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_slice(NS ## builder_t *B, NS ## string_t string, size_t index, size_t len)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_slice(B, string, index, len))); }

#define __flatbuffers_build_string_vector_field(ID, NS, N, TT)\
__flatbuffers_build_offset_vector_field(ID, NS, N, NS ## string, TT)\
__flatbuffers_build_string_vector_ops(NS, N)

#define __flatbuffers_char_formal_args , char v0
#define __flatbuffers_char_call_args , v0
#define __flatbuffers_uint8_formal_args , uint8_t v0
#define __flatbuffers_uint8_call_args , v0
#define __flatbuffers_int8_formal_args , int8_t v0
#define __flatbuffers_int8_call_args , v0
#define __flatbuffers_bool_formal_args , flatbuffers_bool_t v0
#define __flatbuffers_bool_call_args , v0
#define __flatbuffers_uint16_formal_args , uint16_t v0
#define __flatbuffers_uint16_call_args , v0
#define __flatbuffers_uint32_formal_args , uint32_t v0
#define __flatbuffers_uint32_call_args , v0
#define __flatbuffers_uint64_formal_args , uint64_t v0
#define __flatbuffers_uint64_call_args , v0
#define __flatbuffers_int16_formal_args , int16_t v0
#define __flatbuffers_int16_call_args , v0
#define __flatbuffers_int32_formal_args , int32_t v0
#define __flatbuffers_int32_call_args , v0
#define __flatbuffers_int64_formal_args , int64_t v0
#define __flatbuffers_int64_call_args , v0
#define __flatbuffers_float_formal_args , float v0
#define __flatbuffers_float_call_args , v0
#define __flatbuffers_double_formal_args , double v0
#define __flatbuffers_double_call_args , v0

__flatbuffers_build_scalar(flatbuffers_, flatbuffers_char, char)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_uint8, uint8_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_int8, int8_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_uint16, uint16_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_uint32, uint32_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_uint64, uint64_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_int16, int16_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_int32, int32_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_int64, int64_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_float, float)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_double, double)

__flatbuffers_build_string(flatbuffers_)

__flatbuffers_build_buffer(flatbuffers_)
#include "flatcc/flatcc_epilogue.h"
#endif /* FLATBUFFERS_COMMON_BUILDER_H */
#ifndef ATTRIBUTES_READER_H
#define ATTRIBUTES_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif






#include "flatcc/flatcc_epilogue.h"
#endif /* ATTRIBUTES_READER_H */
#ifndef ATTRIBUTES_BUILDER_H
#define ATTRIBUTES_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef ATTRIBUTES_READER_H
#include "attributes_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#include "flatcc/flatcc_epilogue.h"
#endif /* ATTRIBUTES_BUILDER_H */
#ifndef ATTRIBUTES_VERIFIER_H
#define ATTRIBUTES_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef ATTRIBUTES_READER_H
#include "attributes_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"


#include "flatcc/flatcc_epilogue.h"
#endif /* ATTRIBUTES_VERIFIER_H */
#ifndef INCLUDE_TEST2_READER_H
#define INCLUDE_TEST2_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

typedef struct MyGame_OtherNameSpace_Unused MyGame_OtherNameSpace_Unused_t;
typedef const MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_struct_t;
typedef MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_mutable_struct_t;
typedef const MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_vec_t;
typedef MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_mutable_vec_t;

#ifndef MyGame_OtherNameSpace_Unused_file_identifier
#define MyGame_OtherNameSpace_Unused_file_identifier 0
#endif
/* deprecated, use MyGame_OtherNameSpace_Unused_file_identifier */
#ifndef MyGame_OtherNameSpace_Unused_identifier
#define MyGame_OtherNameSpace_Unused_identifier 0
#endif
#define MyGame_OtherNameSpace_Unused_type_hash ((flatbuffers_thash_t)0x14581d4)
#define MyGame_OtherNameSpace_Unused_type_identifier "\xd4\x81\x45\x01"
#ifndef MyGame_OtherNameSpace_Unused_file_extension
#define MyGame_OtherNameSpace_Unused_file_extension "bin"
#endif

typedef int64_t MyGame_OtherNameSpace_FromInclude_enum_t;
__flatbuffers_define_integer_type(MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, 64)
#define MyGame_OtherNameSpace_FromInclude_IncludeVal ((MyGame_OtherNameSpace_FromInclude_enum_t)INT64_C(0))
#define MyGame_OtherNameSpace_FromInclude_Foo ((MyGame_OtherNameSpace_FromInclude_enum_t)INT64_C(17))

static inline const char *MyGame_OtherNameSpace_FromInclude_name(MyGame_OtherNameSpace_FromInclude_enum_t value)
{
    switch (value) {
    case MyGame_OtherNameSpace_FromInclude_IncludeVal: return "IncludeVal";
    case MyGame_OtherNameSpace_FromInclude_Foo: return "Foo";
    default: return "";
    }
}

static inline int MyGame_OtherNameSpace_FromInclude_is_known_value(MyGame_OtherNameSpace_FromInclude_enum_t value)
{
    switch (value) {
    case MyGame_OtherNameSpace_FromInclude_IncludeVal: return 1;
    case MyGame_OtherNameSpace_FromInclude_Foo: return 1;
    default: return 0;
    }
}


struct MyGame_OtherNameSpace_Unused {
    alignas(1) int8_t unused;
};
static_assert(sizeof(MyGame_OtherNameSpace_Unused_t) == 1, "struct size mismatch");

static inline const MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused__const_ptr_add(const MyGame_OtherNameSpace_Unused_t *p, size_t i) { return p + i; }
static inline MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused__ptr_add(MyGame_OtherNameSpace_Unused_t *p, size_t i) { return p + i; }
static inline MyGame_OtherNameSpace_Unused_struct_t MyGame_OtherNameSpace_Unused_vec_at(MyGame_OtherNameSpace_Unused_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_OtherNameSpace_Unused__size(void) { return 1; }
static inline size_t MyGame_OtherNameSpace_Unused_vec_len(MyGame_OtherNameSpace_Unused_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_OtherNameSpace_Unused)

__flatbuffers_define_struct_scalar_field(MyGame_OtherNameSpace_Unused, unused, flatbuffers_int8, int8_t)



#include "flatcc/flatcc_epilogue.h"
#endif /* INCLUDE_TEST2_READER_H */
#ifndef INCLUDE_TEST2_BUILDER_H
#define INCLUDE_TEST2_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef INCLUDE_TEST2_READER_H
#include "include_test2_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __MyGame_OtherNameSpace_FromInclude_formal_args , MyGame_OtherNameSpace_FromInclude_enum_t v0
#define __MyGame_OtherNameSpace_FromInclude_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t)

#define __MyGame_OtherNameSpace_Unused_formal_args , int8_t v0
#define __MyGame_OtherNameSpace_Unused_call_args , v0
static inline MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_assign(MyGame_OtherNameSpace_Unused_t *p, int8_t v0)
{ p->unused = v0;
  return p; }
static inline MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_copy(MyGame_OtherNameSpace_Unused_t *p, const MyGame_OtherNameSpace_Unused_t *p2)
{ p->unused = p2->unused;
  return p; }
static inline MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_assign_to_pe(MyGame_OtherNameSpace_Unused_t *p, int8_t v0)
{ p->unused = v0;
  return p; }
static inline MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_copy_to_pe(MyGame_OtherNameSpace_Unused_t *p, const MyGame_OtherNameSpace_Unused_t *p2)
{ p->unused = p2->unused;
  return p; }
static inline MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_assign_from_pe(MyGame_OtherNameSpace_Unused_t *p, int8_t v0)
{ p->unused = v0;
  return p; }
static inline MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_copy_from_pe(MyGame_OtherNameSpace_Unused_t *p, const MyGame_OtherNameSpace_Unused_t *p2)
{ p->unused = p2->unused;
  return p; }
__flatbuffers_build_struct(flatbuffers_, MyGame_OtherNameSpace_Unused, 1, 1, MyGame_OtherNameSpace_Unused_file_identifier, MyGame_OtherNameSpace_Unused_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MyGame_OtherNameSpace_Unused, MyGame_OtherNameSpace_Unused_t)

#include "flatcc/flatcc_epilogue.h"
#endif /* INCLUDE_TEST2_BUILDER_H */
#ifndef INCLUDE_TEST2_VERIFIER_H
#define INCLUDE_TEST2_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef INCLUDE_TEST2_READER_H
#include "include_test2_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"


static inline int MyGame_OtherNameSpace_Unused_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, MyGame_OtherNameSpace_Unused_identifier, 1, 1);
}

static inline int MyGame_OtherNameSpace_Unused_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, MyGame_OtherNameSpace_Unused_identifier, 1, 1);
}

static inline int MyGame_OtherNameSpace_Unused_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, MyGame_OtherNameSpace_Unused_type_hash, 1, 1);
}

static inline int MyGame_OtherNameSpace_Unused_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, MyGame_OtherNameSpace_Unused_type_hash, 1, 1);
}

static inline int MyGame_OtherNameSpace_Unused_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 1, 1);
}

static inline int MyGame_OtherNameSpace_Unused_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 1, 1);
}

static inline int MyGame_OtherNameSpace_Unused_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 1, 1);
}

static inline int MyGame_OtherNameSpace_Unused_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 1, 1);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* INCLUDE_TEST2_VERIFIER_H */
#ifndef INCLUDE_TEST1_READER_H
#define INCLUDE_TEST1_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef INCLUDE_TEST2_READER_H
#include "include_test2_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif






#include "flatcc/flatcc_epilogue.h"
#endif /* INCLUDE_TEST1_READER_H */
#ifndef INCLUDE_TEST1_BUILDER_H
#define INCLUDE_TEST1_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef INCLUDE_TEST1_READER_H
#include "include_test1_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#ifndef INCLUDE_TEST2_BUILDER_H
#include "include_test2_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#include "flatcc/flatcc_epilogue.h"
#endif /* INCLUDE_TEST1_BUILDER_H */
#ifndef INCLUDE_TEST1_VERIFIER_H
#define INCLUDE_TEST1_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef INCLUDE_TEST1_READER_H
#include "include_test1_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#ifndef INCLUDE_TEST2_VERIFIER_H
#include "include_test2_verifier.h"
#endif
#include "flatcc/flatcc_prologue.h"


#include "flatcc/flatcc_epilogue.h"
#endif /* INCLUDE_TEST1_VERIFIER_H */
#ifndef MONSTER_TEST_READER_H
#define MONSTER_TEST_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef INCLUDE_TEST1_READER_H
#include "include_test1_reader.h"
#endif
#ifndef ATTRIBUTES_READER_H
#include "attributes_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "MONS"
#undef flatbuffers_extension
#define flatbuffers_extension "mon"

typedef struct InGlobalNamespace InGlobalNamespace_t;
typedef const InGlobalNamespace_t *InGlobalNamespace_struct_t;
typedef InGlobalNamespace_t *InGlobalNamespace_mutable_struct_t;
typedef const InGlobalNamespace_t *InGlobalNamespace_vec_t;
typedef InGlobalNamespace_t *InGlobalNamespace_mutable_vec_t;
typedef struct MyGame_Example_Test MyGame_Example_Test_t;
typedef const MyGame_Example_Test_t *MyGame_Example_Test_struct_t;
typedef MyGame_Example_Test_t *MyGame_Example_Test_mutable_struct_t;
typedef const MyGame_Example_Test_t *MyGame_Example_Test_vec_t;
typedef MyGame_Example_Test_t *MyGame_Example_Test_mutable_vec_t;
typedef struct MyGame_Example_Vec3 MyGame_Example_Vec3_t;
typedef const MyGame_Example_Vec3_t *MyGame_Example_Vec3_struct_t;
typedef MyGame_Example_Vec3_t *MyGame_Example_Vec3_mutable_struct_t;
typedef const MyGame_Example_Vec3_t *MyGame_Example_Vec3_vec_t;
typedef MyGame_Example_Vec3_t *MyGame_Example_Vec3_mutable_vec_t;
typedef struct MyGame_Example_Ability MyGame_Example_Ability_t;
typedef const MyGame_Example_Ability_t *MyGame_Example_Ability_struct_t;
typedef MyGame_Example_Ability_t *MyGame_Example_Ability_mutable_struct_t;
typedef const MyGame_Example_Ability_t *MyGame_Example_Ability_vec_t;
typedef MyGame_Example_Ability_t *MyGame_Example_Ability_mutable_vec_t;
typedef struct MyGame_Example_FooBar MyGame_Example_FooBar_t;
typedef const MyGame_Example_FooBar_t *MyGame_Example_FooBar_struct_t;
typedef MyGame_Example_FooBar_t *MyGame_Example_FooBar_mutable_struct_t;
typedef const MyGame_Example_FooBar_t *MyGame_Example_FooBar_vec_t;
typedef MyGame_Example_FooBar_t *MyGame_Example_FooBar_mutable_vec_t;
typedef struct Fantasy_Rapunzel Fantasy_Rapunzel_t;
typedef const Fantasy_Rapunzel_t *Fantasy_Rapunzel_struct_t;
typedef Fantasy_Rapunzel_t *Fantasy_Rapunzel_mutable_struct_t;
typedef const Fantasy_Rapunzel_t *Fantasy_Rapunzel_vec_t;
typedef Fantasy_Rapunzel_t *Fantasy_Rapunzel_mutable_vec_t;
typedef struct Fantasy_BookReader Fantasy_BookReader_t;
typedef const Fantasy_BookReader_t *Fantasy_BookReader_struct_t;
typedef Fantasy_BookReader_t *Fantasy_BookReader_mutable_struct_t;
typedef const Fantasy_BookReader_t *Fantasy_BookReader_vec_t;
typedef Fantasy_BookReader_t *Fantasy_BookReader_mutable_vec_t;

typedef const struct MyGame_InParentNamespace_table *MyGame_InParentNamespace_table_t;
typedef struct MyGame_InParentNamespace_table *MyGame_InParentNamespace_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_InParentNamespace_vec_t;
typedef flatbuffers_uoffset_t *MyGame_InParentNamespace_mutable_vec_t;
typedef const struct MyGame_Example2_Monster_table *MyGame_Example2_Monster_table_t;
typedef struct MyGame_Example2_Monster_table *MyGame_Example2_Monster_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example2_Monster_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example2_Monster_mutable_vec_t;
typedef const struct MyGame_Example2_Strange_table *MyGame_Example2_Strange_table_t;
typedef struct MyGame_Example2_Strange_table *MyGame_Example2_Strange_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example2_Strange_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example2_Strange_mutable_vec_t;
typedef const struct MyGame_Example2_S2_table *MyGame_Example2_S2_table_t;
typedef struct MyGame_Example2_S2_table *MyGame_Example2_S2_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example2_S2_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example2_S2_mutable_vec_t;
typedef const struct MyGame_Example_TestSimpleTableWithEnum_table *MyGame_Example_TestSimpleTableWithEnum_table_t;
typedef struct MyGame_Example_TestSimpleTableWithEnum_table *MyGame_Example_TestSimpleTableWithEnum_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestSimpleTableWithEnum_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestSimpleTableWithEnum_mutable_vec_t;
typedef const struct MyGame_Example_TestInclude_table *MyGame_Example_TestInclude_table_t;
typedef struct MyGame_Example_TestInclude_table *MyGame_Example_TestInclude_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestInclude_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestInclude_mutable_vec_t;
typedef const struct MyGame_Example_Stat_table *MyGame_Example_Stat_table_t;
typedef struct MyGame_Example_Stat_table *MyGame_Example_Stat_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_Stat_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_Stat_mutable_vec_t;
typedef const struct MyGame_Example_Alt_table *MyGame_Example_Alt_table_t;
typedef struct MyGame_Example_Alt_table *MyGame_Example_Alt_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_Alt_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_Alt_mutable_vec_t;
typedef const struct MyGame_Example_TestJSONPrefix_table *MyGame_Example_TestJSONPrefix_table_t;
typedef struct MyGame_Example_TestJSONPrefix_table *MyGame_Example_TestJSONPrefix_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefix_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefix_mutable_vec_t;
typedef const struct MyGame_Example_TestJSONPrefixParsing_table *MyGame_Example_TestJSONPrefixParsing_table_t;
typedef struct MyGame_Example_TestJSONPrefixParsing_table *MyGame_Example_TestJSONPrefixParsing_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing_mutable_vec_t;
typedef const struct MyGame_Example_TestJSONPrefixParsing2_table *MyGame_Example_TestJSONPrefixParsing2_table_t;
typedef struct MyGame_Example_TestJSONPrefixParsing2_table *MyGame_Example_TestJSONPrefixParsing2_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing2_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing2_mutable_vec_t;
typedef const struct MyGame_Example_TestJSONPrefixParsing3_table *MyGame_Example_TestJSONPrefixParsing3_table_t;
typedef struct MyGame_Example_TestJSONPrefixParsing3_table *MyGame_Example_TestJSONPrefixParsing3_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing3_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing3_mutable_vec_t;
typedef const struct MyGame_Example_TestBase64_table *MyGame_Example_TestBase64_table_t;
typedef struct MyGame_Example_TestBase64_table *MyGame_Example_TestBase64_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestBase64_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestBase64_mutable_vec_t;
typedef const struct MyGame_Example_MultipleKeys_table *MyGame_Example_MultipleKeys_table_t;
typedef struct MyGame_Example_MultipleKeys_table *MyGame_Example_MultipleKeys_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_MultipleKeys_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_MultipleKeys_mutable_vec_t;
typedef const struct MyGame_Example_Monster_table *MyGame_Example_Monster_table_t;
typedef struct MyGame_Example_Monster_table *MyGame_Example_Monster_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_Monster_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_Monster_mutable_vec_t;
typedef const struct MyGame_Example_TypeAliases_table *MyGame_Example_TypeAliases_table_t;
typedef struct MyGame_Example_TypeAliases_table *MyGame_Example_TypeAliases_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TypeAliases_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TypeAliases_mutable_vec_t;
typedef const struct Fantasy_Attacker_table *Fantasy_Attacker_table_t;
typedef struct Fantasy_Attacker_table *Fantasy_Attacker_mutable_table_t;
typedef const flatbuffers_uoffset_t *Fantasy_Attacker_vec_t;
typedef flatbuffers_uoffset_t *Fantasy_Attacker_mutable_vec_t;
typedef const struct Fantasy_Movie_table *Fantasy_Movie_table_t;
typedef struct Fantasy_Movie_table *Fantasy_Movie_mutable_table_t;
typedef const flatbuffers_uoffset_t *Fantasy_Movie_vec_t;
typedef flatbuffers_uoffset_t *Fantasy_Movie_mutable_vec_t;
#ifndef InGlobalNamespace_file_identifier
#define InGlobalNamespace_file_identifier "MONS"
#endif
/* deprecated, use InGlobalNamespace_file_identifier */
#ifndef InGlobalNamespace_identifier
#define InGlobalNamespace_identifier "MONS"
#endif
#define InGlobalNamespace_type_hash ((flatbuffers_thash_t)0xc8aa570c)
#define InGlobalNamespace_type_identifier "\x0c\x57\xaa\xc8"
#ifndef InGlobalNamespace_file_extension
#define InGlobalNamespace_file_extension "mon"
#endif
#ifndef MyGame_InParentNamespace_file_identifier
#define MyGame_InParentNamespace_file_identifier "MONS"
#endif
/* deprecated, use MyGame_InParentNamespace_file_identifier */
#ifndef MyGame_InParentNamespace_identifier
#define MyGame_InParentNamespace_identifier "MONS"
#endif
#define MyGame_InParentNamespace_type_hash ((flatbuffers_thash_t)0x56397375)
#define MyGame_InParentNamespace_type_identifier "\x75\x73\x39\x56"
#ifndef MyGame_InParentNamespace_file_extension
#define MyGame_InParentNamespace_file_extension "mon"
#endif
#ifndef MyGame_Example2_Monster_file_identifier
#define MyGame_Example2_Monster_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example2_Monster_file_identifier */
#ifndef MyGame_Example2_Monster_identifier
#define MyGame_Example2_Monster_identifier "MONS"
#endif
#define MyGame_Example2_Monster_type_hash ((flatbuffers_thash_t)0xac73a199)
#define MyGame_Example2_Monster_type_identifier "\x99\xa1\x73\xac"
#ifndef MyGame_Example2_Monster_file_extension
#define MyGame_Example2_Monster_file_extension "mon"
#endif
#ifndef MyGame_Example2_Strange_file_identifier
#define MyGame_Example2_Strange_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example2_Strange_file_identifier */
#ifndef MyGame_Example2_Strange_identifier
#define MyGame_Example2_Strange_identifier "MONS"
#endif
#define MyGame_Example2_Strange_type_hash ((flatbuffers_thash_t)0x7a38a577)
#define MyGame_Example2_Strange_type_identifier "\x77\xa5\x38\x7a"
#ifndef MyGame_Example2_Strange_file_extension
#define MyGame_Example2_Strange_file_extension "mon"
#endif
#ifndef MyGame_Example2_S2_file_identifier
#define MyGame_Example2_S2_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example2_S2_file_identifier */
#ifndef MyGame_Example2_S2_identifier
#define MyGame_Example2_S2_identifier "MONS"
#endif
#define MyGame_Example2_S2_type_hash ((flatbuffers_thash_t)0xea308cd8)
#define MyGame_Example2_S2_type_identifier "\xd8\x8c\x30\xea"
#ifndef MyGame_Example2_S2_file_extension
#define MyGame_Example2_S2_file_extension "mon"
#endif
#ifndef MyGame_Example_Test_file_identifier
#define MyGame_Example_Test_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Test_file_identifier */
#ifndef MyGame_Example_Test_identifier
#define MyGame_Example_Test_identifier "MONS"
#endif
#define MyGame_Example_Test_type_hash ((flatbuffers_thash_t)0xad678775)
#define MyGame_Example_Test_type_identifier "\x75\x87\x67\xad"
#ifndef MyGame_Example_Test_file_extension
#define MyGame_Example_Test_file_extension "mon"
#endif
#ifndef MyGame_Example_TestSimpleTableWithEnum_file_identifier
#define MyGame_Example_TestSimpleTableWithEnum_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestSimpleTableWithEnum_file_identifier */
#ifndef MyGame_Example_TestSimpleTableWithEnum_identifier
#define MyGame_Example_TestSimpleTableWithEnum_identifier "MONS"
#endif
#define MyGame_Example_TestSimpleTableWithEnum_type_hash ((flatbuffers_thash_t)0x133a7b70)
#define MyGame_Example_TestSimpleTableWithEnum_type_identifier "\x70\x7b\x3a\x13"
#ifndef MyGame_Example_TestSimpleTableWithEnum_file_extension
#define MyGame_Example_TestSimpleTableWithEnum_file_extension "mon"
#endif
#ifndef MyGame_Example_TestInclude_file_identifier
#define MyGame_Example_TestInclude_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestInclude_file_identifier */
#ifndef MyGame_Example_TestInclude_identifier
#define MyGame_Example_TestInclude_identifier "MONS"
#endif
#define MyGame_Example_TestInclude_type_hash ((flatbuffers_thash_t)0x940b1877)
#define MyGame_Example_TestInclude_type_identifier "\x77\x18\x0b\x94"
#ifndef MyGame_Example_TestInclude_file_extension
#define MyGame_Example_TestInclude_file_extension "mon"
#endif
#ifndef MyGame_Example_Vec3_file_identifier
#define MyGame_Example_Vec3_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Vec3_file_identifier */
#ifndef MyGame_Example_Vec3_identifier
#define MyGame_Example_Vec3_identifier "MONS"
#endif
#define MyGame_Example_Vec3_type_hash ((flatbuffers_thash_t)0xa8f53ed2)
#define MyGame_Example_Vec3_type_identifier "\xd2\x3e\xf5\xa8"
#ifndef MyGame_Example_Vec3_file_extension
#define MyGame_Example_Vec3_file_extension "mon"
#endif
#ifndef MyGame_Example_Ability_file_identifier
#define MyGame_Example_Ability_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Ability_file_identifier */
#ifndef MyGame_Example_Ability_identifier
#define MyGame_Example_Ability_identifier "MONS"
#endif
#define MyGame_Example_Ability_type_hash ((flatbuffers_thash_t)0x4453ea1)
#define MyGame_Example_Ability_type_identifier "\xa1\x3e\x45\x04"
#ifndef MyGame_Example_Ability_file_extension
#define MyGame_Example_Ability_file_extension "mon"
#endif
#ifndef MyGame_Example_Stat_file_identifier
#define MyGame_Example_Stat_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Stat_file_identifier */
#ifndef MyGame_Example_Stat_identifier
#define MyGame_Example_Stat_identifier "MONS"
#endif
#define MyGame_Example_Stat_type_hash ((flatbuffers_thash_t)0x4cf7b3a7)
#define MyGame_Example_Stat_type_identifier "\xa7\xb3\xf7\x4c"
#ifndef MyGame_Example_Stat_file_extension
#define MyGame_Example_Stat_file_extension "mon"
#endif
#ifndef MyGame_Example_FooBar_file_identifier
#define MyGame_Example_FooBar_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_FooBar_file_identifier */
#ifndef MyGame_Example_FooBar_identifier
#define MyGame_Example_FooBar_identifier "MONS"
#endif
#define MyGame_Example_FooBar_type_hash ((flatbuffers_thash_t)0xcbea3458)
#define MyGame_Example_FooBar_type_identifier "\x58\x34\xea\xcb"
#ifndef MyGame_Example_FooBar_file_extension
#define MyGame_Example_FooBar_file_extension "mon"
#endif
#ifndef MyGame_Example_Alt_file_identifier
#define MyGame_Example_Alt_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Alt_file_identifier */
#ifndef MyGame_Example_Alt_identifier
#define MyGame_Example_Alt_identifier "MONS"
#endif
#define MyGame_Example_Alt_type_hash ((flatbuffers_thash_t)0x5614a58c)
#define MyGame_Example_Alt_type_identifier "\x8c\xa5\x14\x56"
#ifndef MyGame_Example_Alt_file_extension
#define MyGame_Example_Alt_file_extension "mon"
#endif
#ifndef MyGame_Example_TestJSONPrefix_file_identifier
#define MyGame_Example_TestJSONPrefix_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestJSONPrefix_file_identifier */
#ifndef MyGame_Example_TestJSONPrefix_identifier
#define MyGame_Example_TestJSONPrefix_identifier "MONS"
#endif
#define MyGame_Example_TestJSONPrefix_type_hash ((flatbuffers_thash_t)0xd8086267)
#define MyGame_Example_TestJSONPrefix_type_identifier "\x67\x62\x08\xd8"
#ifndef MyGame_Example_TestJSONPrefix_file_extension
#define MyGame_Example_TestJSONPrefix_file_extension "mon"
#endif
#ifndef MyGame_Example_TestJSONPrefixParsing_file_identifier
#define MyGame_Example_TestJSONPrefixParsing_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestJSONPrefixParsing_file_identifier */
#ifndef MyGame_Example_TestJSONPrefixParsing_identifier
#define MyGame_Example_TestJSONPrefixParsing_identifier "MONS"
#endif
#define MyGame_Example_TestJSONPrefixParsing_type_hash ((flatbuffers_thash_t)0xebe07a7d)
#define MyGame_Example_TestJSONPrefixParsing_type_identifier "\x7d\x7a\xe0\xeb"
#ifndef MyGame_Example_TestJSONPrefixParsing_file_extension
#define MyGame_Example_TestJSONPrefixParsing_file_extension "mon"
#endif
#ifndef MyGame_Example_TestJSONPrefixParsing2_file_identifier
#define MyGame_Example_TestJSONPrefixParsing2_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestJSONPrefixParsing2_file_identifier */
#ifndef MyGame_Example_TestJSONPrefixParsing2_identifier
#define MyGame_Example_TestJSONPrefixParsing2_identifier "MONS"
#endif
#define MyGame_Example_TestJSONPrefixParsing2_type_hash ((flatbuffers_thash_t)0xa1608a5d)
#define MyGame_Example_TestJSONPrefixParsing2_type_identifier "\x5d\x8a\x60\xa1"
#ifndef MyGame_Example_TestJSONPrefixParsing2_file_extension
#define MyGame_Example_TestJSONPrefixParsing2_file_extension "mon"
#endif
#ifndef MyGame_Example_TestJSONPrefixParsing3_file_identifier
#define MyGame_Example_TestJSONPrefixParsing3_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestJSONPrefixParsing3_file_identifier */
#ifndef MyGame_Example_TestJSONPrefixParsing3_identifier
#define MyGame_Example_TestJSONPrefixParsing3_identifier "MONS"
#endif
#define MyGame_Example_TestJSONPrefixParsing3_type_hash ((flatbuffers_thash_t)0xa06088ca)
#define MyGame_Example_TestJSONPrefixParsing3_type_identifier "\xca\x88\x60\xa0"
#ifndef MyGame_Example_TestJSONPrefixParsing3_file_extension
#define MyGame_Example_TestJSONPrefixParsing3_file_extension "mon"
#endif
#ifndef MyGame_Example_TestBase64_file_identifier
#define MyGame_Example_TestBase64_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestBase64_file_identifier */
#ifndef MyGame_Example_TestBase64_identifier
#define MyGame_Example_TestBase64_identifier "MONS"
#endif
#define MyGame_Example_TestBase64_type_hash ((flatbuffers_thash_t)0x87b283ea)
#define MyGame_Example_TestBase64_type_identifier "\xea\x83\xb2\x87"
#ifndef MyGame_Example_TestBase64_file_extension
#define MyGame_Example_TestBase64_file_extension "mon"
#endif
#ifndef MyGame_Example_MultipleKeys_file_identifier
#define MyGame_Example_MultipleKeys_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_MultipleKeys_file_identifier */
#ifndef MyGame_Example_MultipleKeys_identifier
#define MyGame_Example_MultipleKeys_identifier "MONS"
#endif
#define MyGame_Example_MultipleKeys_type_hash ((flatbuffers_thash_t)0x3250551)
#define MyGame_Example_MultipleKeys_type_identifier "\x51\x05\x25\x03"
#ifndef MyGame_Example_MultipleKeys_file_extension
#define MyGame_Example_MultipleKeys_file_extension "mon"
#endif
#ifndef MyGame_Example_Monster_file_identifier
#define MyGame_Example_Monster_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Monster_file_identifier */
#ifndef MyGame_Example_Monster_identifier
#define MyGame_Example_Monster_identifier "MONS"
#endif
#define MyGame_Example_Monster_type_hash ((flatbuffers_thash_t)0x330ef481)
#define MyGame_Example_Monster_type_identifier "\x81\xf4\x0e\x33"
#ifndef MyGame_Example_Monster_file_extension
#define MyGame_Example_Monster_file_extension "mon"
#endif
#ifndef MyGame_Example_TypeAliases_file_identifier
#define MyGame_Example_TypeAliases_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TypeAliases_file_identifier */
#ifndef MyGame_Example_TypeAliases_identifier
#define MyGame_Example_TypeAliases_identifier "MONS"
#endif
#define MyGame_Example_TypeAliases_type_hash ((flatbuffers_thash_t)0x191bc347)
#define MyGame_Example_TypeAliases_type_identifier "\x47\xc3\x1b\x19"
#ifndef MyGame_Example_TypeAliases_file_extension
#define MyGame_Example_TypeAliases_file_extension "mon"
#endif
#ifndef Fantasy_Attacker_file_identifier
#define Fantasy_Attacker_file_identifier "MONS"
#endif
/* deprecated, use Fantasy_Attacker_file_identifier */
#ifndef Fantasy_Attacker_identifier
#define Fantasy_Attacker_identifier "MONS"
#endif
#define Fantasy_Attacker_type_hash ((flatbuffers_thash_t)0x479334f2)
#define Fantasy_Attacker_type_identifier "\xf2\x34\x93\x47"
#ifndef Fantasy_Attacker_file_extension
#define Fantasy_Attacker_file_extension "mon"
#endif
#ifndef Fantasy_Rapunzel_file_identifier
#define Fantasy_Rapunzel_file_identifier "MONS"
#endif
/* deprecated, use Fantasy_Rapunzel_file_identifier */
#ifndef Fantasy_Rapunzel_identifier
#define Fantasy_Rapunzel_identifier "MONS"
#endif
#define Fantasy_Rapunzel_type_hash ((flatbuffers_thash_t)0x1ed9abaa)
#define Fantasy_Rapunzel_type_identifier "\xaa\xab\xd9\x1e"
#ifndef Fantasy_Rapunzel_file_extension
#define Fantasy_Rapunzel_file_extension "mon"
#endif
#ifndef Fantasy_BookReader_file_identifier
#define Fantasy_BookReader_file_identifier "MONS"
#endif
/* deprecated, use Fantasy_BookReader_file_identifier */
#ifndef Fantasy_BookReader_identifier
#define Fantasy_BookReader_identifier "MONS"
#endif
#define Fantasy_BookReader_type_hash ((flatbuffers_thash_t)0x2574b69f)
#define Fantasy_BookReader_type_identifier "\x9f\xb6\x74\x25"
#ifndef Fantasy_BookReader_file_extension
#define Fantasy_BookReader_file_extension "mon"
#endif
#ifndef Fantasy_Movie_file_identifier
#define Fantasy_Movie_file_identifier "MONS"
#endif
/* deprecated, use Fantasy_Movie_file_identifier */
#ifndef Fantasy_Movie_identifier
#define Fantasy_Movie_identifier "MONS"
#endif
#define Fantasy_Movie_type_hash ((flatbuffers_thash_t)0x57debeb3)
#define Fantasy_Movie_type_identifier "\xb3\xbe\xde\x57"
#ifndef Fantasy_Movie_file_extension
#define Fantasy_Movie_file_extension "mon"
#endif

typedef int32_t MyGame_Example2_foo_enum_t;
__flatbuffers_define_integer_type(MyGame_Example2_foo, MyGame_Example2_foo_enum_t, 32)
#define MyGame_Example2_foo_x ((MyGame_Example2_foo_enum_t)INT32_C(0))
#define MyGame_Example2_foo_y ((MyGame_Example2_foo_enum_t)INT32_C(1))
#define MyGame_Example2_foo_table ((MyGame_Example2_foo_enum_t)INT32_C(2))

static inline const char *MyGame_Example2_foo_name(MyGame_Example2_foo_enum_t value)
{
    switch (value) {
    case MyGame_Example2_foo_x: return "x";
    case MyGame_Example2_foo_y: return "y";
    case MyGame_Example2_foo_table: return "table";
    default: return "";
    }
}

static inline int MyGame_Example2_foo_is_known_value(MyGame_Example2_foo_enum_t value)
{
    switch (value) {
    case MyGame_Example2_foo_x: return 1;
    case MyGame_Example2_foo_y: return 1;
    case MyGame_Example2_foo_table: return 1;
    default: return 0;
    }
}

typedef int32_t MyGame_Example_neg_enum_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_neg_enum, MyGame_Example_neg_enum_enum_t, 32)
#define MyGame_Example_neg_enum_neg1 ((MyGame_Example_neg_enum_enum_t)INT32_C(-12))
#define MyGame_Example_neg_enum_neg2 ((MyGame_Example_neg_enum_enum_t)INT32_C(-11))
#define MyGame_Example_neg_enum_neg3 ((MyGame_Example_neg_enum_enum_t)INT32_C(-10))

static inline const char *MyGame_Example_neg_enum_name(MyGame_Example_neg_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_neg_enum_neg1: return "neg1";
    case MyGame_Example_neg_enum_neg2: return "neg2";
    case MyGame_Example_neg_enum_neg3: return "neg3";
    default: return "";
    }
}

static inline int MyGame_Example_neg_enum_is_known_value(MyGame_Example_neg_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_neg_enum_neg1: return 1;
    case MyGame_Example_neg_enum_neg2: return 1;
    case MyGame_Example_neg_enum_neg3: return 1;
    default: return 0;
    }
}

typedef int32_t MyGame_Example_int_enum_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_int_enum, MyGame_Example_int_enum_enum_t, 32)
#define MyGame_Example_int_enum_intneg ((MyGame_Example_int_enum_enum_t)INT32_C(-2))
#define MyGame_Example_int_enum_intneg2 ((MyGame_Example_int_enum_enum_t)INT32_C(-1))
#define MyGame_Example_int_enum_int1 ((MyGame_Example_int_enum_enum_t)INT32_C(2))
#define MyGame_Example_int_enum_int2 ((MyGame_Example_int_enum_enum_t)INT32_C(42))

static inline const char *MyGame_Example_int_enum_name(MyGame_Example_int_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_int_enum_intneg: return "intneg";
    case MyGame_Example_int_enum_intneg2: return "intneg2";
    case MyGame_Example_int_enum_int1: return "int1";
    case MyGame_Example_int_enum_int2: return "int2";
    default: return "";
    }
}

static inline int MyGame_Example_int_enum_is_known_value(MyGame_Example_int_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_int_enum_intneg: return 1;
    case MyGame_Example_int_enum_intneg2: return 1;
    case MyGame_Example_int_enum_int1: return 1;
    case MyGame_Example_int_enum_int2: return 1;
    default: return 0;
    }
}

typedef int32_t MyGame_Example_hex_enum_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_hex_enum, MyGame_Example_hex_enum_enum_t, 32)
#define MyGame_Example_hex_enum_hexneg ((MyGame_Example_hex_enum_enum_t)INT32_C(-2))
#define MyGame_Example_hex_enum_hex1 ((MyGame_Example_hex_enum_enum_t)INT32_C(3))
#define MyGame_Example_hex_enum_hex2 ((MyGame_Example_hex_enum_enum_t)INT32_C(2125446831))

static inline const char *MyGame_Example_hex_enum_name(MyGame_Example_hex_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_hex_enum_hexneg: return "hexneg";
    case MyGame_Example_hex_enum_hex1: return "hex1";
    case MyGame_Example_hex_enum_hex2: return "hex2";
    default: return "";
    }
}

static inline int MyGame_Example_hex_enum_is_known_value(MyGame_Example_hex_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_hex_enum_hexneg: return 1;
    case MyGame_Example_hex_enum_hex1: return 1;
    case MyGame_Example_hex_enum_hex2: return 1;
    default: return 0;
    }
}

typedef int8_t MyGame_Example_Color_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_Color, MyGame_Example_Color_enum_t, 8)
#define MyGame_Example_Color_Red ((MyGame_Example_Color_enum_t)INT8_C(1))
#define MyGame_Example_Color_Green ((MyGame_Example_Color_enum_t)INT8_C(2))
#define MyGame_Example_Color_Blue ((MyGame_Example_Color_enum_t)INT8_C(8))

static inline const char *MyGame_Example_Color_name(MyGame_Example_Color_enum_t value)
{
    switch (value) {
    case MyGame_Example_Color_Red: return "Red";
    case MyGame_Example_Color_Green: return "Green";
    case MyGame_Example_Color_Blue: return "Blue";
    default: return "";
    }
}

static inline int MyGame_Example_Color_is_known_value(MyGame_Example_Color_enum_t value)
{
    switch (value) {
    case MyGame_Example_Color_Red: return 1;
    case MyGame_Example_Color_Green: return 1;
    case MyGame_Example_Color_Blue: return 1;
    default: return 0;
    }
}

typedef int32_t MyGame_Example_notemptyenum_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_notemptyenum, MyGame_Example_notemptyenum_enum_t, 32)
#define MyGame_Example_notemptyenum_x ((MyGame_Example_notemptyenum_enum_t)INT32_C(0))

static inline const char *MyGame_Example_notemptyenum_name(MyGame_Example_notemptyenum_enum_t value)
{
    switch (value) {
    case MyGame_Example_notemptyenum_x: return "x";
    default: return "";
    }
}

static inline int MyGame_Example_notemptyenum_is_known_value(MyGame_Example_notemptyenum_enum_t value)
{
    switch (value) {
    case MyGame_Example_notemptyenum_x: return 1;
    default: return 0;
    }
}

typedef int32_t Fantasy_ReorderedEnum_enum_t;
__flatbuffers_define_integer_type(Fantasy_ReorderedEnum, Fantasy_ReorderedEnum_enum_t, 32)
#define Fantasy_ReorderedEnum_rx ((Fantasy_ReorderedEnum_enum_t)INT32_C(10))
#define Fantasy_ReorderedEnum_ry ((Fantasy_ReorderedEnum_enum_t)INT32_C(1))
#define Fantasy_ReorderedEnum_rz ((Fantasy_ReorderedEnum_enum_t)INT32_C(9))

static inline const char *Fantasy_ReorderedEnum_name(Fantasy_ReorderedEnum_enum_t value)
{
    switch (value) {
    case Fantasy_ReorderedEnum_rx: return "rx";
    case Fantasy_ReorderedEnum_ry: return "ry";
    case Fantasy_ReorderedEnum_rz: return "rz";
    default: return "";
    }
}

static inline int Fantasy_ReorderedEnum_is_known_value(Fantasy_ReorderedEnum_enum_t value)
{
    switch (value) {
    case Fantasy_ReorderedEnum_rx: return 1;
    case Fantasy_ReorderedEnum_ry: return 1;
    case Fantasy_ReorderedEnum_rz: return 1;
    default: return 0;
    }
}

typedef int8_t Fantasy_ReorderedColor_enum_t;
__flatbuffers_define_integer_type(Fantasy_ReorderedColor, Fantasy_ReorderedColor_enum_t, 8)
#define Fantasy_ReorderedColor_RBlue ((Fantasy_ReorderedColor_enum_t)INT8_C(8))
#define Fantasy_ReorderedColor_RRed ((Fantasy_ReorderedColor_enum_t)INT8_C(1))
#define Fantasy_ReorderedColor_RGreen ((Fantasy_ReorderedColor_enum_t)INT8_C(2))

static inline const char *Fantasy_ReorderedColor_name(Fantasy_ReorderedColor_enum_t value)
{
    switch (value) {
    case Fantasy_ReorderedColor_RBlue: return "RBlue";
    case Fantasy_ReorderedColor_RRed: return "RRed";
    case Fantasy_ReorderedColor_RGreen: return "RGreen";
    default: return "";
    }
}

static inline int Fantasy_ReorderedColor_is_known_value(Fantasy_ReorderedColor_enum_t value)
{
    switch (value) {
    case Fantasy_ReorderedColor_RBlue: return 1;
    case Fantasy_ReorderedColor_RRed: return 1;
    case Fantasy_ReorderedColor_RGreen: return 1;
    default: return 0;
    }
}


struct InGlobalNamespace {
    alignas(1) int8_t unused;
};
static_assert(sizeof(InGlobalNamespace_t) == 1, "struct size mismatch");

static inline const InGlobalNamespace_t *InGlobalNamespace__const_ptr_add(const InGlobalNamespace_t *p, size_t i) { return p + i; }
static inline InGlobalNamespace_t *InGlobalNamespace__ptr_add(InGlobalNamespace_t *p, size_t i) { return p + i; }
static inline InGlobalNamespace_struct_t InGlobalNamespace_vec_at(InGlobalNamespace_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t InGlobalNamespace__size(void) { return 1; }
static inline size_t InGlobalNamespace_vec_len(InGlobalNamespace_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(InGlobalNamespace)

__flatbuffers_define_struct_scalar_field(InGlobalNamespace, unused, flatbuffers_int8, int8_t)

struct MyGame_Example_Test {
    alignas(2) int16_t a;
    alignas(1) int8_t b;
};
static_assert(sizeof(MyGame_Example_Test_t) == 4, "struct size mismatch");

static inline const MyGame_Example_Test_t *MyGame_Example_Test__const_ptr_add(const MyGame_Example_Test_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Test_t *MyGame_Example_Test__ptr_add(MyGame_Example_Test_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Test_struct_t MyGame_Example_Test_vec_at(MyGame_Example_Test_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_Example_Test__size(void) { return 4; }
static inline size_t MyGame_Example_Test_vec_len(MyGame_Example_Test_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_Example_Test)

__flatbuffers_define_struct_scalar_field(MyGame_Example_Test, a, flatbuffers_int16, int16_t)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Test, b, flatbuffers_int8, int8_t)

struct MyGame_Example_Vec3 {
    alignas(16) float x;
    alignas(4) float y;
    alignas(4) float z;
    alignas(8) double test1;
    alignas(1) MyGame_Example_Color_enum_t test2;
    alignas(2) MyGame_Example_Test_t test3;
};
static_assert(sizeof(MyGame_Example_Vec3_t) == 32, "struct size mismatch");

static inline const MyGame_Example_Vec3_t *MyGame_Example_Vec3__const_ptr_add(const MyGame_Example_Vec3_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3__ptr_add(MyGame_Example_Vec3_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Vec3_struct_t MyGame_Example_Vec3_vec_at(MyGame_Example_Vec3_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_Example_Vec3__size(void) { return 32; }
static inline size_t MyGame_Example_Vec3_vec_len(MyGame_Example_Vec3_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_Example_Vec3)

__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, x, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, y, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, z, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, test1, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, test2, MyGame_Example_Color, MyGame_Example_Color_enum_t)
__flatbuffers_define_struct_struct_field(MyGame_Example_Vec3, test3, MyGame_Example_Test_struct_t)

struct MyGame_Example_Ability {
    alignas(4) uint32_t id;
    alignas(4) uint32_t distance;
};
static_assert(sizeof(MyGame_Example_Ability_t) == 8, "struct size mismatch");

static inline const MyGame_Example_Ability_t *MyGame_Example_Ability__const_ptr_add(const MyGame_Example_Ability_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability__ptr_add(MyGame_Example_Ability_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Ability_struct_t MyGame_Example_Ability_vec_at(MyGame_Example_Ability_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_Example_Ability__size(void) { return 8; }
static inline size_t MyGame_Example_Ability_vec_len(MyGame_Example_Ability_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_Example_Ability)

__flatbuffers_define_struct_scalar_field(MyGame_Example_Ability, id, flatbuffers_uint32, uint32_t)
/* Note: find only works on vectors sorted by this field. */
__flatbuffers_define_find_by_scalar_field(MyGame_Example_Ability, id, uint32_t)
__flatbuffers_define_struct_sort_by_scalar_field(MyGame_Example_Ability, id, uint32_t, MyGame_Example_Ability_t)
__flatbuffers_define_default_find_by_scalar_field(MyGame_Example_Ability, id, uint32_t)
__flatbuffers_define_default_scan_by_scalar_field(MyGame_Example_Ability, id, uint32_t)
#define MyGame_Example_Ability_vec_sort MyGame_Example_Ability_vec_sort_by_id
__flatbuffers_define_struct_scalar_field(MyGame_Example_Ability, distance, flatbuffers_uint32, uint32_t)

struct MyGame_Example_FooBar {
    alignas(4) float foo[16];
    alignas(4) int32_t bar[10];
    alignas(1) MyGame_Example_Color_enum_t col[3];
    alignas(2) MyGame_Example_Test_t tests[2];
    alignas(1) char text[5];
};
static_assert(sizeof(MyGame_Example_FooBar_t) == 124, "struct size mismatch");

static inline const MyGame_Example_FooBar_t *MyGame_Example_FooBar__const_ptr_add(const MyGame_Example_FooBar_t *p, size_t i) { return p + i; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar__ptr_add(MyGame_Example_FooBar_t *p, size_t i) { return p + i; }
static inline MyGame_Example_FooBar_struct_t MyGame_Example_FooBar_vec_at(MyGame_Example_FooBar_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_Example_FooBar__size(void) { return 124; }
static inline size_t MyGame_Example_FooBar_vec_len(MyGame_Example_FooBar_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_Example_FooBar)

__flatbuffers_define_struct_scalar_fixed_array_field(MyGame_Example_FooBar, foo, flatbuffers_float, float, 16)
__flatbuffers_define_struct_scalar_fixed_array_field(MyGame_Example_FooBar, bar, flatbuffers_int32, int32_t, 10)
__flatbuffers_define_struct_scalar_fixed_array_field(MyGame_Example_FooBar, col, MyGame_Example_Color, MyGame_Example_Color_enum_t, 3)
__flatbuffers_define_struct_struct_fixed_array_field(MyGame_Example_FooBar, tests, MyGame_Example_Test_struct_t, 2)
__flatbuffers_define_struct_scalar_fixed_array_field(MyGame_Example_FooBar, text, flatbuffers_char, char, 5)

struct Fantasy_Rapunzel {
    alignas(4) uint16_t hair_length;
    alignas(4) uint8_t __deprecated0[4]; /* was: 'travel_points' */
};
static_assert(sizeof(Fantasy_Rapunzel_t) == 8, "struct size mismatch");

static inline const Fantasy_Rapunzel_t *Fantasy_Rapunzel__const_ptr_add(const Fantasy_Rapunzel_t *p, size_t i) { return p + i; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel__ptr_add(Fantasy_Rapunzel_t *p, size_t i) { return p + i; }
static inline Fantasy_Rapunzel_struct_t Fantasy_Rapunzel_vec_at(Fantasy_Rapunzel_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Fantasy_Rapunzel__size(void) { return 8; }
static inline size_t Fantasy_Rapunzel_vec_len(Fantasy_Rapunzel_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Fantasy_Rapunzel)

__flatbuffers_define_struct_scalar_field(Fantasy_Rapunzel, hair_length, flatbuffers_uint16, uint16_t)
/* Note: find only works on vectors sorted by this field. */
__flatbuffers_define_find_by_scalar_field(Fantasy_Rapunzel, hair_length, uint16_t)
__flatbuffers_define_struct_sort_by_scalar_field(Fantasy_Rapunzel, hair_length, uint16_t, Fantasy_Rapunzel_t)
__flatbuffers_define_default_find_by_scalar_field(Fantasy_Rapunzel, hair_length, uint16_t)
__flatbuffers_define_default_scan_by_scalar_field(Fantasy_Rapunzel, hair_length, uint16_t)
#define Fantasy_Rapunzel_vec_sort Fantasy_Rapunzel_vec_sort_by_hair_length

struct Fantasy_BookReader {
    alignas(4) int32_t books_read;
};
static_assert(sizeof(Fantasy_BookReader_t) == 4, "struct size mismatch");

static inline const Fantasy_BookReader_t *Fantasy_BookReader__const_ptr_add(const Fantasy_BookReader_t *p, size_t i) { return p + i; }
static inline Fantasy_BookReader_t *Fantasy_BookReader__ptr_add(Fantasy_BookReader_t *p, size_t i) { return p + i; }
static inline Fantasy_BookReader_struct_t Fantasy_BookReader_vec_at(Fantasy_BookReader_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Fantasy_BookReader__size(void) { return 4; }
static inline size_t Fantasy_BookReader_vec_len(Fantasy_BookReader_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Fantasy_BookReader)

__flatbuffers_define_struct_scalar_field(Fantasy_BookReader, books_read, flatbuffers_int32, int32_t)


struct MyGame_InParentNamespace_table { uint8_t unused__; };

static inline size_t MyGame_InParentNamespace_vec_len(MyGame_InParentNamespace_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_InParentNamespace_table_t MyGame_InParentNamespace_vec_at(MyGame_InParentNamespace_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_InParentNamespace_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_InParentNamespace)


struct MyGame_Example2_Monster_table { uint8_t unused__; };

static inline size_t MyGame_Example2_Monster_vec_len(MyGame_Example2_Monster_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example2_Monster_table_t MyGame_Example2_Monster_vec_at(MyGame_Example2_Monster_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example2_Monster_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example2_Monster)


struct MyGame_Example2_Strange_table { uint8_t unused__; };

static inline size_t MyGame_Example2_Strange_vec_len(MyGame_Example2_Strange_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example2_Strange_table_t MyGame_Example2_Strange_vec_at(MyGame_Example2_Strange_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example2_Strange_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example2_Strange)


struct MyGame_Example2_S2_table { uint8_t unused__; };

static inline size_t MyGame_Example2_S2_vec_len(MyGame_Example2_S2_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example2_S2_table_t MyGame_Example2_S2_vec_at(MyGame_Example2_S2_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example2_S2_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example2_S2)

__flatbuffers_define_scalar_field(0, MyGame_Example2_S2, namespace, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, MyGame_Example2_S2, table, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, MyGame_Example2_S2, struct, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(3, MyGame_Example2_S2, union, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(4, MyGame_Example2_S2, int, flatbuffers_int32, int32_t, INT32_C(0))
typedef uint8_t MyGame_Example_Foo_union_type_t;
__flatbuffers_define_integer_type(MyGame_Example_Foo, MyGame_Example_Foo_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, MyGame_Example_Foo)
#define MyGame_Example_Foo_NONE ((MyGame_Example_Foo_union_type_t)UINT8_C(0))
#define MyGame_Example_Foo_InParentNamespace ((MyGame_Example_Foo_union_type_t)UINT8_C(1))

static inline const char *MyGame_Example_Foo_type_name(MyGame_Example_Foo_union_type_t type)
{
    switch (type) {
    case MyGame_Example_Foo_NONE: return "NONE";
    case MyGame_Example_Foo_InParentNamespace: return "InParentNamespace";
    default: return "";
    }
}

static inline int MyGame_Example_Foo_is_known_type(MyGame_Example_Foo_union_type_t type)
{
    switch (type) {
    case MyGame_Example_Foo_NONE: return 1;
    case MyGame_Example_Foo_InParentNamespace: return 1;
    default: return 0;
    }
}

typedef uint8_t MyGame_Example2_SubSystem_SubSystemA_union_type_t;
__flatbuffers_define_integer_type(MyGame_Example2_SubSystem_SubSystemA, MyGame_Example2_SubSystem_SubSystemA_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, MyGame_Example2_SubSystem_SubSystemA)
#define MyGame_Example2_SubSystem_SubSystemA_NONE ((MyGame_Example2_SubSystem_SubSystemA_union_type_t)UINT8_C(0))
#define MyGame_Example2_SubSystem_SubSystemA_Strange ((MyGame_Example2_SubSystem_SubSystemA_union_type_t)UINT8_C(1))

static inline const char *MyGame_Example2_SubSystem_SubSystemA_type_name(MyGame_Example2_SubSystem_SubSystemA_union_type_t type)
{
    switch (type) {
    case MyGame_Example2_SubSystem_SubSystemA_NONE: return "NONE";
    case MyGame_Example2_SubSystem_SubSystemA_Strange: return "Strange";
    default: return "";
    }
}

static inline int MyGame_Example2_SubSystem_SubSystemA_is_known_type(MyGame_Example2_SubSystem_SubSystemA_union_type_t type)
{
    switch (type) {
    case MyGame_Example2_SubSystem_SubSystemA_NONE: return 1;
    case MyGame_Example2_SubSystem_SubSystemA_Strange: return 1;
    default: return 0;
    }
}

typedef uint8_t MyGame_Example2_SubSystem_SubSystemB_union_type_t;
__flatbuffers_define_integer_type(MyGame_Example2_SubSystem_SubSystemB, MyGame_Example2_SubSystem_SubSystemB_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, MyGame_Example2_SubSystem_SubSystemB)
#define MyGame_Example2_SubSystem_SubSystemB_NONE ((MyGame_Example2_SubSystem_SubSystemB_union_type_t)UINT8_C(0))
#define MyGame_Example2_SubSystem_SubSystemB_Strange ((MyGame_Example2_SubSystem_SubSystemB_union_type_t)UINT8_C(1))

static inline const char *MyGame_Example2_SubSystem_SubSystemB_type_name(MyGame_Example2_SubSystem_SubSystemB_union_type_t type)
{
    switch (type) {
    case MyGame_Example2_SubSystem_SubSystemB_NONE: return "NONE";
    case MyGame_Example2_SubSystem_SubSystemB_Strange: return "Strange";
    default: return "";
    }
}

static inline int MyGame_Example2_SubSystem_SubSystemB_is_known_type(MyGame_Example2_SubSystem_SubSystemB_union_type_t type)
{
    switch (type) {
    case MyGame_Example2_SubSystem_SubSystemB_NONE: return 1;
    case MyGame_Example2_SubSystem_SubSystemB_Strange: return 1;
    default: return 0;
    }
}

typedef uint8_t MyGame_Example_Any_union_type_t;
__flatbuffers_define_integer_type(MyGame_Example_Any, MyGame_Example_Any_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, MyGame_Example_Any)
#define MyGame_Example_Any_NONE ((MyGame_Example_Any_union_type_t)UINT8_C(0))
#define MyGame_Example_Any_Monster ((MyGame_Example_Any_union_type_t)UINT8_C(1))
#define MyGame_Example_Any_TestSimpleTableWithEnum ((MyGame_Example_Any_union_type_t)UINT8_C(2))
#define MyGame_Example_Any_Monster2 ((MyGame_Example_Any_union_type_t)UINT8_C(3))
#define MyGame_Example_Any_Alt ((MyGame_Example_Any_union_type_t)UINT8_C(4))

static inline const char *MyGame_Example_Any_type_name(MyGame_Example_Any_union_type_t type)
{
    switch (type) {
    case MyGame_Example_Any_NONE: return "NONE";
    case MyGame_Example_Any_Monster: return "Monster";
    case MyGame_Example_Any_TestSimpleTableWithEnum: return "TestSimpleTableWithEnum";
    case MyGame_Example_Any_Monster2: return "Monster2";
    case MyGame_Example_Any_Alt: return "Alt";
    default: return "";
    }
}

static inline int MyGame_Example_Any_is_known_type(MyGame_Example_Any_union_type_t type)
{
    switch (type) {
    case MyGame_Example_Any_NONE: return 1;
    case MyGame_Example_Any_Monster: return 1;
    case MyGame_Example_Any_TestSimpleTableWithEnum: return 1;
    case MyGame_Example_Any_Monster2: return 1;
    case MyGame_Example_Any_Alt: return 1;
    default: return 0;
    }
}


struct MyGame_Example_TestSimpleTableWithEnum_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestSimpleTableWithEnum_vec_len(MyGame_Example_TestSimpleTableWithEnum_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestSimpleTableWithEnum_table_t MyGame_Example_TestSimpleTableWithEnum_vec_at(MyGame_Example_TestSimpleTableWithEnum_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestSimpleTableWithEnum_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestSimpleTableWithEnum)

__flatbuffers_define_scalar_field(0, MyGame_Example_TestSimpleTableWithEnum, color, MyGame_Example_Color, MyGame_Example_Color_enum_t, INT8_C(2))
__flatbuffers_define_scalar_field(1, MyGame_Example_TestSimpleTableWithEnum, color2, MyGame_Example_Color, MyGame_Example_Color_enum_t, INT8_C(2))
__flatbuffers_define_scalar_field(2, MyGame_Example_TestSimpleTableWithEnum, uc, flatbuffers_uint8, uint8_t, UINT8_C(2))
__flatbuffers_define_scalar_field(3, MyGame_Example_TestSimpleTableWithEnum, uc2, flatbuffers_uint8, uint8_t, UINT8_C(2))

struct MyGame_Example_TestInclude_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestInclude_vec_len(MyGame_Example_TestInclude_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestInclude_table_t MyGame_Example_TestInclude_vec_at(MyGame_Example_TestInclude_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestInclude_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestInclude)

__flatbuffers_define_struct_field(0, MyGame_Example_TestInclude, global, InGlobalNamespace_struct_t, 0)
__flatbuffers_define_scalar_field(1, MyGame_Example_TestInclude, incval, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, INT64_C(0))
__flatbuffers_define_scalar_field(2, MyGame_Example_TestInclude, incval2, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, INT64_C(0))
__flatbuffers_define_scalar_field(3, MyGame_Example_TestInclude, incval3, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(4, MyGame_Example_TestInclude, incval4, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, INT64_C(0))
__flatbuffers_define_scalar_field(5, MyGame_Example_TestInclude, incval5, flatbuffers_int64, int64_t, INT64_C(0))

struct MyGame_Example_Stat_table { uint8_t unused__; };

static inline size_t MyGame_Example_Stat_vec_len(MyGame_Example_Stat_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_Stat_table_t MyGame_Example_Stat_vec_at(MyGame_Example_Stat_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_Stat_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_Stat)

__flatbuffers_define_string_field(0, MyGame_Example_Stat, id, 0)
__flatbuffers_define_scalar_field(1, MyGame_Example_Stat, val, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(2, MyGame_Example_Stat, count, flatbuffers_uint16, uint16_t, UINT16_C(0))

struct MyGame_Example_Alt_table { uint8_t unused__; };

static inline size_t MyGame_Example_Alt_vec_len(MyGame_Example_Alt_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_Alt_table_t MyGame_Example_Alt_vec_at(MyGame_Example_Alt_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_Alt_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_Alt)

__flatbuffers_define_table_field(0, MyGame_Example_Alt, prefix, MyGame_Example_TestJSONPrefix_table_t, 0)
__flatbuffers_define_table_field(1, MyGame_Example_Alt, movie, Fantasy_Movie_table_t, 0)
__flatbuffers_define_union_vector_field(flatbuffers_, 3, MyGame_Example_Alt, manyany, MyGame_Example_Any, 0)
__flatbuffers_define_vector_field(4, MyGame_Example_Alt, multik, MyGame_Example_MultipleKeys_vec_t, 0)
__flatbuffers_define_vector_field(5, MyGame_Example_Alt, rapunzels, Fantasy_Rapunzel_vec_t, 0)
__flatbuffers_define_vector_field(6, MyGame_Example_Alt, names, flatbuffers_string_vec_t, 0)
__flatbuffers_define_vector_field(7, MyGame_Example_Alt, samples, flatbuffers_float_vec_t, 0)
__flatbuffers_define_struct_field(8, MyGame_Example_Alt, fixed_array, MyGame_Example_FooBar_struct_t, 0)

struct MyGame_Example_TestJSONPrefix_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestJSONPrefix_vec_len(MyGame_Example_TestJSONPrefix_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestJSONPrefix_table_t MyGame_Example_TestJSONPrefix_vec_at(MyGame_Example_TestJSONPrefix_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestJSONPrefix_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestJSONPrefix)

__flatbuffers_define_table_field(0, MyGame_Example_TestJSONPrefix, testjsonprefixparsing, MyGame_Example_TestJSONPrefixParsing_table_t, 0)
__flatbuffers_define_table_field(1, MyGame_Example_TestJSONPrefix, testjsonprefixparsing2, MyGame_Example_TestJSONPrefixParsing2_table_t, 0)
__flatbuffers_define_table_field(2, MyGame_Example_TestJSONPrefix, testjsonprefixparsing3, MyGame_Example_TestJSONPrefixParsing3_table_t, 0)

struct MyGame_Example_TestJSONPrefixParsing_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestJSONPrefixParsing_vec_len(MyGame_Example_TestJSONPrefixParsing_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestJSONPrefixParsing_table_t MyGame_Example_TestJSONPrefixParsing_vec_at(MyGame_Example_TestJSONPrefixParsing_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestJSONPrefixParsing_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestJSONPrefixParsing)

__flatbuffers_define_string_field(0, MyGame_Example_TestJSONPrefixParsing, aaaa, 0)
__flatbuffers_define_scalar_field(1, MyGame_Example_TestJSONPrefixParsing, aaaa12345, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(2, MyGame_Example_TestJSONPrefixParsing, bbbb, 0)
__flatbuffers_define_scalar_field(3, MyGame_Example_TestJSONPrefixParsing, bbbb1234, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_string_field(4, MyGame_Example_TestJSONPrefixParsing, cccc, 0)
__flatbuffers_define_scalar_field(5, MyGame_Example_TestJSONPrefixParsing, cccc1234, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(6, MyGame_Example_TestJSONPrefixParsing, cccc12345, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(7, MyGame_Example_TestJSONPrefixParsing, dddd1234, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(8, MyGame_Example_TestJSONPrefixParsing, dddd12345, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct MyGame_Example_TestJSONPrefixParsing2_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestJSONPrefixParsing2_vec_len(MyGame_Example_TestJSONPrefixParsing2_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestJSONPrefixParsing2_table_t MyGame_Example_TestJSONPrefixParsing2_vec_at(MyGame_Example_TestJSONPrefixParsing2_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestJSONPrefixParsing2_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestJSONPrefixParsing2)

__flatbuffers_define_scalar_field(0, MyGame_Example_TestJSONPrefixParsing2, aaaa_bbbb_steps, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(1, MyGame_Example_TestJSONPrefixParsing2, aaaa_bbbb_start_, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct MyGame_Example_TestJSONPrefixParsing3_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestJSONPrefixParsing3_vec_len(MyGame_Example_TestJSONPrefixParsing3_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestJSONPrefixParsing3_table_t MyGame_Example_TestJSONPrefixParsing3_vec_at(MyGame_Example_TestJSONPrefixParsing3_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestJSONPrefixParsing3_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestJSONPrefixParsing3)

__flatbuffers_define_scalar_field(0, MyGame_Example_TestJSONPrefixParsing3, aaaa_bbbb_steps, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(1, MyGame_Example_TestJSONPrefixParsing3, aaaa_bbbb_start_steps, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct MyGame_Example_TestBase64_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestBase64_vec_len(MyGame_Example_TestBase64_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestBase64_table_t MyGame_Example_TestBase64_vec_at(MyGame_Example_TestBase64_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestBase64_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestBase64)

__flatbuffers_define_vector_field(0, MyGame_Example_TestBase64, data, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(1, MyGame_Example_TestBase64, urldata, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(2, MyGame_Example_TestBase64, nested, flatbuffers_uint8_vec_t, 0)
__flatbuffers_nested_buffer_as_root(MyGame_Example_TestBase64, nested, MyGame_Example_Monster, table_)

struct MyGame_Example_MultipleKeys_table { uint8_t unused__; };

static inline size_t MyGame_Example_MultipleKeys_vec_len(MyGame_Example_MultipleKeys_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_MultipleKeys_table_t MyGame_Example_MultipleKeys_vec_at(MyGame_Example_MultipleKeys_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_MultipleKeys_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_MultipleKeys)

__flatbuffers_define_string_field(0, MyGame_Example_MultipleKeys, hello, 0)
__flatbuffers_define_string_field(1, MyGame_Example_MultipleKeys, world, 0)
/* Note: this is not the primary key of this table. */
__flatbuffers_define_find_by_string_field(MyGame_Example_MultipleKeys, world)
__flatbuffers_define_table_sort_by_string_field(MyGame_Example_MultipleKeys, world)
__flatbuffers_define_scalar_field(2, MyGame_Example_MultipleKeys, foobar, flatbuffers_int64, int64_t, INT64_C(0))
/* Note: find only works on vectors sorted by this field. */
__flatbuffers_define_find_by_scalar_field(MyGame_Example_MultipleKeys, foobar, int64_t)
__flatbuffers_define_table_sort_by_scalar_field(MyGame_Example_MultipleKeys, foobar, int64_t)
__flatbuffers_define_default_find_by_scalar_field(MyGame_Example_MultipleKeys, foobar, int64_t)
__flatbuffers_define_default_scan_by_scalar_field(MyGame_Example_MultipleKeys, foobar, int64_t)
#define MyGame_Example_MultipleKeys_vec_sort MyGame_Example_MultipleKeys_vec_sort_by_foobar

struct MyGame_Example_Monster_table { uint8_t unused__; };

static inline size_t MyGame_Example_Monster_vec_len(MyGame_Example_Monster_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_Monster_table_t MyGame_Example_Monster_vec_at(MyGame_Example_Monster_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_Monster_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_Monster)

__flatbuffers_define_struct_field(0, MyGame_Example_Monster, pos, MyGame_Example_Vec3_struct_t, 0)
__flatbuffers_define_scalar_field(1, MyGame_Example_Monster, mana, flatbuffers_int16, int16_t, INT16_C(150))
__flatbuffers_define_scalar_field(2, MyGame_Example_Monster, hp, flatbuffers_int16, int16_t, INT16_C(100))
__flatbuffers_define_string_field(3, MyGame_Example_Monster, name, 1)
__flatbuffers_define_find_by_string_field(MyGame_Example_Monster, name)
__flatbuffers_define_table_sort_by_string_field(MyGame_Example_Monster, name)
__flatbuffers_define_default_find_by_string_field(MyGame_Example_Monster, name)
__flatbuffers_define_default_scan_by_string_field(MyGame_Example_Monster, name)
#define MyGame_Example_Monster_vec_sort MyGame_Example_Monster_vec_sort_by_name
/* Skipping deprecated field: 'MyGame_Example_Monster_friendly' */

__flatbuffers_define_vector_field(5, MyGame_Example_Monster, inventory, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_scalar_field(6, MyGame_Example_Monster, color, MyGame_Example_Color, MyGame_Example_Color_enum_t, INT8_C(8))
__flatbuffers_define_union_field(flatbuffers_, 8, MyGame_Example_Monster, test, MyGame_Example_Any, 0)
__flatbuffers_define_vector_field(9, MyGame_Example_Monster, test4, MyGame_Example_Test_vec_t, 0)
__flatbuffers_define_vector_field(10, MyGame_Example_Monster, testarrayofstring, flatbuffers_string_vec_t, 0)
/**  an example documentation comment: this will end up in the generated code
 *  multiline too */
__flatbuffers_define_vector_field(11, MyGame_Example_Monster, testarrayoftables, MyGame_Example_Monster_vec_t, 0)
__flatbuffers_define_table_field(12, MyGame_Example_Monster, enemy, MyGame_Example_Monster_table_t, 0)
__flatbuffers_define_vector_field(13, MyGame_Example_Monster, testnestedflatbuffer, flatbuffers_uint8_vec_t, 0)
__flatbuffers_nested_buffer_as_root(MyGame_Example_Monster, testnestedflatbuffer, MyGame_Example_Monster, table_)
__flatbuffers_define_table_field(14, MyGame_Example_Monster, testempty, MyGame_Example_Stat_table_t, 0)
__flatbuffers_define_scalar_field(15, MyGame_Example_Monster, testbool, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(1))
__flatbuffers_define_scalar_field(16, MyGame_Example_Monster, testhashs32_fnv1, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(17, MyGame_Example_Monster, testhashu32_fnv1, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(18, MyGame_Example_Monster, testhashs64_fnv1, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(19, MyGame_Example_Monster, testhashu64_fnv1, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(20, MyGame_Example_Monster, testhashs32_fnv1a, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(21, MyGame_Example_Monster, testhashu32_fnv1a, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(22, MyGame_Example_Monster, testhashs64_fnv1a, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(23, MyGame_Example_Monster, testhashu64_fnv1a, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_vector_field(24, MyGame_Example_Monster, testarrayofbools, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_scalar_field(25, MyGame_Example_Monster, testf, flatbuffers_float, float, 314159.000f)
__flatbuffers_define_scalar_field(26, MyGame_Example_Monster, testf2, flatbuffers_float, float, 3.00000000f)
__flatbuffers_define_scalar_field(27, MyGame_Example_Monster, testf3, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_vector_field(28, MyGame_Example_Monster, testarrayofstring2, flatbuffers_string_vec_t, 0)
__flatbuffers_define_vector_field(29, MyGame_Example_Monster, testarrayofsortedstruct, MyGame_Example_Ability_vec_t, 0)
__flatbuffers_define_vector_field(30, MyGame_Example_Monster, flex, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(31, MyGame_Example_Monster, test5, MyGame_Example_Test_vec_t, 0)
__flatbuffers_define_vector_field(32, MyGame_Example_Monster, vector_of_longs, flatbuffers_int64_vec_t, 0)
__flatbuffers_define_vector_field(33, MyGame_Example_Monster, vector_of_doubles, flatbuffers_double_vec_t, 0)
__flatbuffers_define_table_field(34, MyGame_Example_Monster, parent_namespace_test, MyGame_InParentNamespace_table_t, 0)
__flatbuffers_define_table_field(35, MyGame_Example_Monster, testbase64, MyGame_Example_TestBase64_table_t, 0)

struct MyGame_Example_TypeAliases_table { uint8_t unused__; };

static inline size_t MyGame_Example_TypeAliases_vec_len(MyGame_Example_TypeAliases_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TypeAliases_table_t MyGame_Example_TypeAliases_vec_at(MyGame_Example_TypeAliases_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TypeAliases_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TypeAliases)

__flatbuffers_define_scalar_field(0, MyGame_Example_TypeAliases, i8, flatbuffers_int8, int8_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, MyGame_Example_TypeAliases, u8, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(2, MyGame_Example_TypeAliases, i16, flatbuffers_int16, int16_t, INT16_C(0))
__flatbuffers_define_scalar_field(3, MyGame_Example_TypeAliases, u16, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(4, MyGame_Example_TypeAliases, i32, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(5, MyGame_Example_TypeAliases, u32, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(6, MyGame_Example_TypeAliases, i64, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(7, MyGame_Example_TypeAliases, u64, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(8, MyGame_Example_TypeAliases, f32, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(9, MyGame_Example_TypeAliases, f64, flatbuffers_double, double, 0.0000000000000000)
__flatbuffers_define_vector_field(10, MyGame_Example_TypeAliases, v8, flatbuffers_int8_vec_t, 0)
__flatbuffers_define_vector_field(11, MyGame_Example_TypeAliases, vf64, flatbuffers_double_vec_t, 0)

struct Fantasy_Attacker_table { uint8_t unused__; };

static inline size_t Fantasy_Attacker_vec_len(Fantasy_Attacker_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Fantasy_Attacker_table_t Fantasy_Attacker_vec_at(Fantasy_Attacker_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Fantasy_Attacker_table_t, vec, i, 0)
__flatbuffers_table_as_root(Fantasy_Attacker)

__flatbuffers_define_scalar_field(0, Fantasy_Attacker, sword_attack_damage, flatbuffers_int32, int32_t, INT32_C(0))
typedef uint8_t Fantasy_Character_union_type_t;
__flatbuffers_define_integer_type(Fantasy_Character, Fantasy_Character_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, Fantasy_Character)
#define Fantasy_Character_NONE ((Fantasy_Character_union_type_t)UINT8_C(0))
#define Fantasy_Character_MuLan ((Fantasy_Character_union_type_t)UINT8_C(2))
#define Fantasy_Character_Rapunzel ((Fantasy_Character_union_type_t)UINT8_C(8))
#define Fantasy_Character_Belle ((Fantasy_Character_union_type_t)UINT8_C(9))
#define Fantasy_Character_BookFan ((Fantasy_Character_union_type_t)UINT8_C(10))
#define Fantasy_Character_Other ((Fantasy_Character_union_type_t)UINT8_C(11))
#define Fantasy_Character_Unused ((Fantasy_Character_union_type_t)UINT8_C(255))

static inline const char *Fantasy_Character_type_name(Fantasy_Character_union_type_t type)
{
    switch (type) {
    case Fantasy_Character_NONE: return "NONE";
    case Fantasy_Character_MuLan: return "MuLan";
    case Fantasy_Character_Rapunzel: return "Rapunzel";
    case Fantasy_Character_Belle: return "Belle";
    case Fantasy_Character_BookFan: return "BookFan";
    case Fantasy_Character_Other: return "Other";
    case Fantasy_Character_Unused: return "Unused";
    default: return "";
    }
}

static inline int Fantasy_Character_is_known_type(Fantasy_Character_union_type_t type)
{
    switch (type) {
    case Fantasy_Character_NONE: return 1;
    case Fantasy_Character_MuLan: return 1;
    case Fantasy_Character_Rapunzel: return 1;
    case Fantasy_Character_Belle: return 1;
    case Fantasy_Character_BookFan: return 1;
    case Fantasy_Character_Other: return 1;
    case Fantasy_Character_Unused: return 1;
    default: return 0;
    }
}


struct Fantasy_Movie_table { uint8_t unused__; };

static inline size_t Fantasy_Movie_vec_len(Fantasy_Movie_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Fantasy_Movie_table_t Fantasy_Movie_vec_at(Fantasy_Movie_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Fantasy_Movie_table_t, vec, i, 0)
__flatbuffers_table_as_root(Fantasy_Movie)

__flatbuffers_define_union_field(flatbuffers_, 1, Fantasy_Movie, main_character, Fantasy_Character, 0)
__flatbuffers_define_union_field(flatbuffers_, 3, Fantasy_Movie, antagonist, Fantasy_Character, 0)
__flatbuffers_define_union_field(flatbuffers_, 5, Fantasy_Movie, side_kick, Fantasy_Character, 0)
__flatbuffers_define_union_field(flatbuffers_, 7, Fantasy_Movie, cameo, Fantasy_Character, 0)
__flatbuffers_define_union_vector_field(flatbuffers_, 9, Fantasy_Movie, characters, Fantasy_Character, 0)

static void MyGame_Example_Alt_sort(MyGame_Example_Alt_mutable_table_t t);
static void MyGame_Example_Monster_sort(MyGame_Example_Monster_mutable_table_t t);

static void MyGame_Example_Any_sort(MyGame_Example_Any_mutable_union_t u)
{
    switch (u.type) {
    case MyGame_Example_Any_Monster: MyGame_Example_Monster_sort(u.value); break;
    case MyGame_Example_Any_Alt: MyGame_Example_Alt_sort(u.value); break;
    default: break;
    }
}

static void MyGame_Example_Alt_sort(MyGame_Example_Alt_mutable_table_t t)
{
    if (!t) return;
    __flatbuffers_sort_union_vector_field_elements(MyGame_Example_Alt, manyany, MyGame_Example_Any, t);
    __flatbuffers_sort_vector_field(MyGame_Example_Alt, multik, MyGame_Example_MultipleKeys, t)
    __flatbuffers_sort_vector_field(MyGame_Example_Alt, rapunzels, Fantasy_Rapunzel, t)
    __flatbuffers_sort_vector_field(MyGame_Example_Alt, names, flatbuffers_string, t)
    __flatbuffers_sort_vector_field(MyGame_Example_Alt, samples, flatbuffers_float, t)
}

static void MyGame_Example_Monster_sort(MyGame_Example_Monster_mutable_table_t t)
{
    if (!t) return;
    __flatbuffers_sort_union_field(MyGame_Example_Monster, test, MyGame_Example_Any, t);
    __flatbuffers_sort_table_vector_field_elements(MyGame_Example_Monster, testarrayoftables, MyGame_Example_Monster, t);
    __flatbuffers_sort_table_field(MyGame_Example_Monster, enemy, MyGame_Example_Monster, t);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MONSTER_TEST_READER_H */
#ifndef MONSTER_TEST_BUILDER_H
#define MONSTER_TEST_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef MONSTER_TEST_READER_H
#include "monster_test_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#ifndef INCLUDE_TEST1_BUILDER_H
#include "include_test1_builder.h"
#endif
#ifndef ATTRIBUTES_BUILDER_H
#include "attributes_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "MONS"
#undef flatbuffers_extension
#define flatbuffers_extension "mon"

#define __MyGame_Example2_foo_formal_args , MyGame_Example2_foo_enum_t v0
#define __MyGame_Example2_foo_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example2_foo, MyGame_Example2_foo_enum_t)
#define __MyGame_Example_neg_enum_formal_args , MyGame_Example_neg_enum_enum_t v0
#define __MyGame_Example_neg_enum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_neg_enum, MyGame_Example_neg_enum_enum_t)
#define __MyGame_Example_int_enum_formal_args , MyGame_Example_int_enum_enum_t v0
#define __MyGame_Example_int_enum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_int_enum, MyGame_Example_int_enum_enum_t)
#define __MyGame_Example_hex_enum_formal_args , MyGame_Example_hex_enum_enum_t v0
#define __MyGame_Example_hex_enum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_hex_enum, MyGame_Example_hex_enum_enum_t)
#define __MyGame_Example_Color_formal_args , MyGame_Example_Color_enum_t v0
#define __MyGame_Example_Color_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_Color, MyGame_Example_Color_enum_t)
#define __MyGame_Example_notemptyenum_formal_args , MyGame_Example_notemptyenum_enum_t v0
#define __MyGame_Example_notemptyenum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, MyGame_Example_notemptyenum, MyGame_Example_notemptyenum_enum_t)
#define __Fantasy_ReorderedEnum_formal_args , Fantasy_ReorderedEnum_enum_t v0
#define __Fantasy_ReorderedEnum_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Fantasy_ReorderedEnum, Fantasy_ReorderedEnum_enum_t)
#define __Fantasy_ReorderedColor_formal_args , Fantasy_ReorderedColor_enum_t v0
#define __Fantasy_ReorderedColor_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Fantasy_ReorderedColor, Fantasy_ReorderedColor_enum_t)

#define __InGlobalNamespace_formal_args , int8_t v0
#define __InGlobalNamespace_call_args , v0
static inline InGlobalNamespace_t *InGlobalNamespace_assign(InGlobalNamespace_t *p, int8_t v0)
{ p->unused = v0;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_copy(InGlobalNamespace_t *p, const InGlobalNamespace_t *p2)
{ p->unused = p2->unused;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_assign_to_pe(InGlobalNamespace_t *p, int8_t v0)
{ p->unused = v0;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_copy_to_pe(InGlobalNamespace_t *p, const InGlobalNamespace_t *p2)
{ p->unused = p2->unused;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_assign_from_pe(InGlobalNamespace_t *p, int8_t v0)
{ p->unused = v0;
  return p; }
static inline InGlobalNamespace_t *InGlobalNamespace_copy_from_pe(InGlobalNamespace_t *p, const InGlobalNamespace_t *p2)
{ p->unused = p2->unused;
  return p; }
__flatbuffers_build_struct(flatbuffers_, InGlobalNamespace, 1, 1, InGlobalNamespace_file_identifier, InGlobalNamespace_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, InGlobalNamespace, InGlobalNamespace_t)

#define __MyGame_Example_Test_formal_args , int16_t v0, int8_t v1
#define __MyGame_Example_Test_call_args , v0, v1
static inline MyGame_Example_Test_t *MyGame_Example_Test_assign(MyGame_Example_Test_t *p, int16_t v0, int8_t v1)
{ p->a = v0; p->b = v1;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_copy(MyGame_Example_Test_t *p, const MyGame_Example_Test_t *p2)
{ p->a = p2->a; p->b = p2->b;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_assign_to_pe(MyGame_Example_Test_t *p, int16_t v0, int8_t v1)
{ flatbuffers_int16_assign_to_pe(&p->a, v0); p->b = v1;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_copy_to_pe(MyGame_Example_Test_t *p, const MyGame_Example_Test_t *p2)
{ flatbuffers_int16_copy_to_pe(&p->a, &p2->a); p->b = p2->b;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_assign_from_pe(MyGame_Example_Test_t *p, int16_t v0, int8_t v1)
{ flatbuffers_int16_assign_from_pe(&p->a, v0); p->b = v1;
  return p; }
static inline MyGame_Example_Test_t *MyGame_Example_Test_copy_from_pe(MyGame_Example_Test_t *p, const MyGame_Example_Test_t *p2)
{ flatbuffers_int16_copy_from_pe(&p->a, &p2->a); p->b = p2->b;
  return p; }
__flatbuffers_build_struct(flatbuffers_, MyGame_Example_Test, 4, 2, MyGame_Example_Test_file_identifier, MyGame_Example_Test_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MyGame_Example_Test, MyGame_Example_Test_t)

#define __MyGame_Example_Vec3_formal_args ,\
  float v0, float v1, float v2, double v3,\
  MyGame_Example_Color_enum_t v4, int16_t v5, int8_t v6
#define __MyGame_Example_Vec3_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_assign(MyGame_Example_Vec3_t *p,
  float v0, float v1, float v2, double v3,
  MyGame_Example_Color_enum_t v4, int16_t v5, int8_t v6)
{ p->x = v0; p->y = v1; p->z = v2; p->test1 = v3;
  p->test2 = v4; MyGame_Example_Test_assign(&p->test3,
  v5, v6);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_copy(MyGame_Example_Vec3_t *p, const MyGame_Example_Vec3_t *p2)
{ p->x = p2->x; p->y = p2->y; p->z = p2->z; p->test1 = p2->test1;
  p->test2 = p2->test2; MyGame_Example_Test_copy(&p->test3, &p2->test3);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_assign_to_pe(MyGame_Example_Vec3_t *p,
  float v0, float v1, float v2, double v3,
  MyGame_Example_Color_enum_t v4, int16_t v5, int8_t v6)
{ flatbuffers_float_assign_to_pe(&p->x, v0); flatbuffers_float_assign_to_pe(&p->y, v1); flatbuffers_float_assign_to_pe(&p->z, v2); flatbuffers_double_assign_to_pe(&p->test1, v3);
  p->test2 = v4; MyGame_Example_Test_assign_to_pe(&p->test3,
  v5, v6);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_copy_to_pe(MyGame_Example_Vec3_t *p, const MyGame_Example_Vec3_t *p2)
{ flatbuffers_float_copy_to_pe(&p->x, &p2->x); flatbuffers_float_copy_to_pe(&p->y, &p2->y); flatbuffers_float_copy_to_pe(&p->z, &p2->z); flatbuffers_double_copy_to_pe(&p->test1, &p2->test1);
  p->test2 = p2->test2; MyGame_Example_Test_copy_to_pe(&p->test3, &p2->test3);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_assign_from_pe(MyGame_Example_Vec3_t *p,
  float v0, float v1, float v2, double v3,
  MyGame_Example_Color_enum_t v4, int16_t v5, int8_t v6)
{ flatbuffers_float_assign_from_pe(&p->x, v0); flatbuffers_float_assign_from_pe(&p->y, v1); flatbuffers_float_assign_from_pe(&p->z, v2); flatbuffers_double_assign_from_pe(&p->test1, v3);
  p->test2 = v4; MyGame_Example_Test_assign_from_pe(&p->test3,
  v5, v6);
  return p; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3_copy_from_pe(MyGame_Example_Vec3_t *p, const MyGame_Example_Vec3_t *p2)
{ flatbuffers_float_copy_from_pe(&p->x, &p2->x); flatbuffers_float_copy_from_pe(&p->y, &p2->y); flatbuffers_float_copy_from_pe(&p->z, &p2->z); flatbuffers_double_copy_from_pe(&p->test1, &p2->test1);
  p->test2 = p2->test2; MyGame_Example_Test_copy_from_pe(&p->test3, &p2->test3);
  return p; }
__flatbuffers_build_struct(flatbuffers_, MyGame_Example_Vec3, 32, 16, MyGame_Example_Vec3_file_identifier, MyGame_Example_Vec3_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MyGame_Example_Vec3, MyGame_Example_Vec3_t)

#define __MyGame_Example_Ability_formal_args , uint32_t v0, uint32_t v1
#define __MyGame_Example_Ability_call_args , v0, v1
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_assign(MyGame_Example_Ability_t *p, uint32_t v0, uint32_t v1)
{ p->id = v0; p->distance = v1;
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_copy(MyGame_Example_Ability_t *p, const MyGame_Example_Ability_t *p2)
{ p->id = p2->id; p->distance = p2->distance;
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_assign_to_pe(MyGame_Example_Ability_t *p, uint32_t v0, uint32_t v1)
{ flatbuffers_uint32_assign_to_pe(&p->id, v0); flatbuffers_uint32_assign_to_pe(&p->distance, v1);
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_copy_to_pe(MyGame_Example_Ability_t *p, const MyGame_Example_Ability_t *p2)
{ flatbuffers_uint32_copy_to_pe(&p->id, &p2->id); flatbuffers_uint32_copy_to_pe(&p->distance, &p2->distance);
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_assign_from_pe(MyGame_Example_Ability_t *p, uint32_t v0, uint32_t v1)
{ flatbuffers_uint32_assign_from_pe(&p->id, v0); flatbuffers_uint32_assign_from_pe(&p->distance, v1);
  return p; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability_copy_from_pe(MyGame_Example_Ability_t *p, const MyGame_Example_Ability_t *p2)
{ flatbuffers_uint32_copy_from_pe(&p->id, &p2->id); flatbuffers_uint32_copy_from_pe(&p->distance, &p2->distance);
  return p; }
__flatbuffers_build_struct(flatbuffers_, MyGame_Example_Ability, 8, 4, MyGame_Example_Ability_file_identifier, MyGame_Example_Ability_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MyGame_Example_Ability, MyGame_Example_Ability_t)

#define __MyGame_Example_FooBar_formal_args ,\
  const float v0[16], const int32_t v1[10], MyGame_Example_Color_enum_t v2[3], const MyGame_Example_Test_t v3[2], const char v4[5]
#define __MyGame_Example_FooBar_call_args ,\
  v0, v1, v2, v3, v4
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_assign(MyGame_Example_FooBar_t *p,
  const float v0[16], const int32_t v1[10], MyGame_Example_Color_enum_t v2[3], const MyGame_Example_Test_t v3[2], const char v4[5])
{ flatbuffers_float_array_copy(p->foo, v0, 16); flatbuffers_int32_array_copy(p->bar, v1, 10); MyGame_Example_Color_array_copy(p->col, v2, 3); MyGame_Example_Test_array_copy(p->tests, v3, 2);
  flatbuffers_char_array_copy(p->text, v4, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_copy(MyGame_Example_FooBar_t *p, const MyGame_Example_FooBar_t *p2)
{ flatbuffers_float_array_copy(p->foo, p2->foo, 16); flatbuffers_int32_array_copy(p->bar, p2->bar, 10); MyGame_Example_Color_array_copy(p->col, p2->col, 3); MyGame_Example_Test_array_copy(p->tests, p2->tests, 2);
  flatbuffers_char_array_copy(p->text, p2->text, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_assign_to_pe(MyGame_Example_FooBar_t *p,
  const float v0[16], const int32_t v1[10], MyGame_Example_Color_enum_t v2[3], const MyGame_Example_Test_t v3[2], const char v4[5])
{ flatbuffers_float_array_copy_to_pe(p->foo, v0, 16); flatbuffers_int32_array_copy_to_pe(p->bar, v1, 10); MyGame_Example_Color_array_copy_to_pe(p->col, v2, 3); MyGame_Example_Test_array_copy_to_pe(p->tests, v3, 2);
  flatbuffers_char_array_copy_to_pe(p->text, v4, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_copy_to_pe(MyGame_Example_FooBar_t *p, const MyGame_Example_FooBar_t *p2)
{ flatbuffers_float_array_copy_to_pe(p->foo, p2->foo, 16); flatbuffers_int32_array_copy_to_pe(p->bar, p2->bar, 10); MyGame_Example_Color_array_copy_to_pe(p->col, p2->col, 3); MyGame_Example_Test_array_copy_to_pe(p->tests, p2->tests, 2);
  flatbuffers_char_array_copy_to_pe(p->text, p2->text, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_assign_from_pe(MyGame_Example_FooBar_t *p,
  const float v0[16], const int32_t v1[10], MyGame_Example_Color_enum_t v2[3], const MyGame_Example_Test_t v3[2], const char v4[5])
{ flatbuffers_float_array_copy_from_pe(p->foo, v0, 16); flatbuffers_int32_array_copy_from_pe(p->bar, v1, 10); MyGame_Example_Color_array_copy_from_pe(p->col, v2, 3); MyGame_Example_Test_array_copy_from_pe(p->tests, v3, 2);
  flatbuffers_char_array_copy_from_pe(p->text, v4, 5);
  return p; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar_copy_from_pe(MyGame_Example_FooBar_t *p, const MyGame_Example_FooBar_t *p2)
{ flatbuffers_float_array_copy_from_pe(p->foo, p2->foo, 16); flatbuffers_int32_array_copy_from_pe(p->bar, p2->bar, 10); MyGame_Example_Color_array_copy_from_pe(p->col, p2->col, 3); MyGame_Example_Test_array_copy_from_pe(p->tests, p2->tests, 2);
  flatbuffers_char_array_copy_from_pe(p->text, p2->text, 5);
  return p; }
__flatbuffers_build_struct(flatbuffers_, MyGame_Example_FooBar, 124, 4, MyGame_Example_FooBar_file_identifier, MyGame_Example_FooBar_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MyGame_Example_FooBar, MyGame_Example_FooBar_t)

#define __Fantasy_Rapunzel_formal_args , uint16_t v0
#define __Fantasy_Rapunzel_call_args , v0
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_assign(Fantasy_Rapunzel_t *p, uint16_t v0)
{ p->hair_length = v0; __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_copy(Fantasy_Rapunzel_t *p, const Fantasy_Rapunzel_t *p2)
{ p->hair_length = p2->hair_length; __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_assign_to_pe(Fantasy_Rapunzel_t *p, uint16_t v0)
{ flatbuffers_uint16_assign_to_pe(&p->hair_length, v0); __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_copy_to_pe(Fantasy_Rapunzel_t *p, const Fantasy_Rapunzel_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->hair_length, &p2->hair_length); __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_assign_from_pe(Fantasy_Rapunzel_t *p, uint16_t v0)
{ flatbuffers_uint16_assign_from_pe(&p->hair_length, v0); __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel_copy_from_pe(Fantasy_Rapunzel_t *p, const Fantasy_Rapunzel_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->hair_length, &p2->hair_length); __flatbuffers_struct_clear_field(p->__deprecated0);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Fantasy_Rapunzel, 8, 4, Fantasy_Rapunzel_file_identifier, Fantasy_Rapunzel_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Fantasy_Rapunzel, Fantasy_Rapunzel_t)

#define __Fantasy_BookReader_formal_args , int32_t v0
#define __Fantasy_BookReader_call_args , v0
static inline Fantasy_BookReader_t *Fantasy_BookReader_assign(Fantasy_BookReader_t *p, int32_t v0)
{ p->books_read = v0;
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_copy(Fantasy_BookReader_t *p, const Fantasy_BookReader_t *p2)
{ p->books_read = p2->books_read;
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_assign_to_pe(Fantasy_BookReader_t *p, int32_t v0)
{ flatbuffers_int32_assign_to_pe(&p->books_read, v0);
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_copy_to_pe(Fantasy_BookReader_t *p, const Fantasy_BookReader_t *p2)
{ flatbuffers_int32_copy_to_pe(&p->books_read, &p2->books_read);
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_assign_from_pe(Fantasy_BookReader_t *p, int32_t v0)
{ flatbuffers_int32_assign_from_pe(&p->books_read, v0);
  return p; }
static inline Fantasy_BookReader_t *Fantasy_BookReader_copy_from_pe(Fantasy_BookReader_t *p, const Fantasy_BookReader_t *p2)
{ flatbuffers_int32_copy_from_pe(&p->books_read, &p2->books_read);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Fantasy_BookReader, 4, 4, Fantasy_BookReader_file_identifier, Fantasy_BookReader_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Fantasy_BookReader, Fantasy_BookReader_t)

typedef flatbuffers_union_ref_t MyGame_Example_Foo_union_ref_t;
typedef flatbuffers_union_vec_ref_t MyGame_Example_Foo_union_vec_ref_t;
static MyGame_Example_Foo_union_ref_t MyGame_Example_Foo_clone(flatbuffers_builder_t *B, MyGame_Example_Foo_union_t t);
typedef flatbuffers_union_ref_t MyGame_Example2_SubSystem_SubSystemA_union_ref_t;
typedef flatbuffers_union_vec_ref_t MyGame_Example2_SubSystem_SubSystemA_union_vec_ref_t;
static MyGame_Example2_SubSystem_SubSystemA_union_ref_t MyGame_Example2_SubSystem_SubSystemA_clone(flatbuffers_builder_t *B, MyGame_Example2_SubSystem_SubSystemA_union_t t);
typedef flatbuffers_union_ref_t MyGame_Example2_SubSystem_SubSystemB_union_ref_t;
typedef flatbuffers_union_vec_ref_t MyGame_Example2_SubSystem_SubSystemB_union_vec_ref_t;
static MyGame_Example2_SubSystem_SubSystemB_union_ref_t MyGame_Example2_SubSystem_SubSystemB_clone(flatbuffers_builder_t *B, MyGame_Example2_SubSystem_SubSystemB_union_t t);
typedef flatbuffers_union_ref_t MyGame_Example_Any_union_ref_t;
typedef flatbuffers_union_vec_ref_t MyGame_Example_Any_union_vec_ref_t;
static MyGame_Example_Any_union_ref_t MyGame_Example_Any_clone(flatbuffers_builder_t *B, MyGame_Example_Any_union_t t);
typedef flatbuffers_union_ref_t Fantasy_Character_union_ref_t;
typedef flatbuffers_union_vec_ref_t Fantasy_Character_union_vec_ref_t;
static Fantasy_Character_union_ref_t Fantasy_Character_clone(flatbuffers_builder_t *B, Fantasy_Character_union_t t);

static const flatbuffers_voffset_t __MyGame_InParentNamespace_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_InParentNamespace_ref_t;
static MyGame_InParentNamespace_ref_t MyGame_InParentNamespace_clone(flatbuffers_builder_t *B, MyGame_InParentNamespace_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_InParentNamespace, 0)

static const flatbuffers_voffset_t __MyGame_Example2_Monster_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example2_Monster_ref_t;
static MyGame_Example2_Monster_ref_t MyGame_Example2_Monster_clone(flatbuffers_builder_t *B, MyGame_Example2_Monster_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example2_Monster, 0)

static const flatbuffers_voffset_t __MyGame_Example2_Strange_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example2_Strange_ref_t;
static MyGame_Example2_Strange_ref_t MyGame_Example2_Strange_clone(flatbuffers_builder_t *B, MyGame_Example2_Strange_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example2_Strange, 0)

static const flatbuffers_voffset_t __MyGame_Example2_S2_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example2_S2_ref_t;
static MyGame_Example2_S2_ref_t MyGame_Example2_S2_clone(flatbuffers_builder_t *B, MyGame_Example2_S2_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example2_S2, 5)

static const flatbuffers_voffset_t __MyGame_Example_TestSimpleTableWithEnum_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestSimpleTableWithEnum_ref_t;
static MyGame_Example_TestSimpleTableWithEnum_ref_t MyGame_Example_TestSimpleTableWithEnum_clone(flatbuffers_builder_t *B, MyGame_Example_TestSimpleTableWithEnum_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestSimpleTableWithEnum, 4)

static const flatbuffers_voffset_t __MyGame_Example_TestInclude_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestInclude_ref_t;
static MyGame_Example_TestInclude_ref_t MyGame_Example_TestInclude_clone(flatbuffers_builder_t *B, MyGame_Example_TestInclude_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestInclude, 6)

static const flatbuffers_voffset_t __MyGame_Example_Stat_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_Stat_ref_t;
static MyGame_Example_Stat_ref_t MyGame_Example_Stat_clone(flatbuffers_builder_t *B, MyGame_Example_Stat_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_Stat, 3)

static const flatbuffers_voffset_t __MyGame_Example_Alt_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_Alt_ref_t;
static MyGame_Example_Alt_ref_t MyGame_Example_Alt_clone(flatbuffers_builder_t *B, MyGame_Example_Alt_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_Alt, 9)

static const flatbuffers_voffset_t __MyGame_Example_TestJSONPrefix_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestJSONPrefix_ref_t;
static MyGame_Example_TestJSONPrefix_ref_t MyGame_Example_TestJSONPrefix_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefix_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestJSONPrefix, 3)

static const flatbuffers_voffset_t __MyGame_Example_TestJSONPrefixParsing_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestJSONPrefixParsing_ref_t;
static MyGame_Example_TestJSONPrefixParsing_ref_t MyGame_Example_TestJSONPrefixParsing_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestJSONPrefixParsing, 9)

static const flatbuffers_voffset_t __MyGame_Example_TestJSONPrefixParsing2_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestJSONPrefixParsing2_ref_t;
static MyGame_Example_TestJSONPrefixParsing2_ref_t MyGame_Example_TestJSONPrefixParsing2_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing2_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestJSONPrefixParsing2, 2)

static const flatbuffers_voffset_t __MyGame_Example_TestJSONPrefixParsing3_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestJSONPrefixParsing3_ref_t;
static MyGame_Example_TestJSONPrefixParsing3_ref_t MyGame_Example_TestJSONPrefixParsing3_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing3_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestJSONPrefixParsing3, 2)

static const flatbuffers_voffset_t __MyGame_Example_TestBase64_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TestBase64_ref_t;
static MyGame_Example_TestBase64_ref_t MyGame_Example_TestBase64_clone(flatbuffers_builder_t *B, MyGame_Example_TestBase64_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TestBase64, 3)

static const flatbuffers_voffset_t __MyGame_Example_MultipleKeys_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_MultipleKeys_ref_t;
static MyGame_Example_MultipleKeys_ref_t MyGame_Example_MultipleKeys_clone(flatbuffers_builder_t *B, MyGame_Example_MultipleKeys_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_MultipleKeys, 3)

static const flatbuffers_voffset_t __MyGame_Example_Monster_required[] = { 3, 0 };
typedef flatbuffers_ref_t MyGame_Example_Monster_ref_t;
static MyGame_Example_Monster_ref_t MyGame_Example_Monster_clone(flatbuffers_builder_t *B, MyGame_Example_Monster_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_Monster, 36)

static const flatbuffers_voffset_t __MyGame_Example_TypeAliases_required[] = { 0 };
typedef flatbuffers_ref_t MyGame_Example_TypeAliases_ref_t;
static MyGame_Example_TypeAliases_ref_t MyGame_Example_TypeAliases_clone(flatbuffers_builder_t *B, MyGame_Example_TypeAliases_table_t t);
__flatbuffers_build_table(flatbuffers_, MyGame_Example_TypeAliases, 12)

static const flatbuffers_voffset_t __Fantasy_Attacker_required[] = { 0 };
typedef flatbuffers_ref_t Fantasy_Attacker_ref_t;
static Fantasy_Attacker_ref_t Fantasy_Attacker_clone(flatbuffers_builder_t *B, Fantasy_Attacker_table_t t);
__flatbuffers_build_table(flatbuffers_, Fantasy_Attacker, 1)

static const flatbuffers_voffset_t __Fantasy_Movie_required[] = { 0 };
typedef flatbuffers_ref_t Fantasy_Movie_ref_t;
static Fantasy_Movie_ref_t Fantasy_Movie_clone(flatbuffers_builder_t *B, Fantasy_Movie_table_t t);
__flatbuffers_build_table(flatbuffers_, Fantasy_Movie, 10)

#define __MyGame_InParentNamespace_formal_args 
#define __MyGame_InParentNamespace_call_args 
static inline MyGame_InParentNamespace_ref_t MyGame_InParentNamespace_create(flatbuffers_builder_t *B __MyGame_InParentNamespace_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_InParentNamespace, MyGame_InParentNamespace_file_identifier, MyGame_InParentNamespace_type_identifier)

#define __MyGame_Example2_Monster_formal_args 
#define __MyGame_Example2_Monster_call_args 
static inline MyGame_Example2_Monster_ref_t MyGame_Example2_Monster_create(flatbuffers_builder_t *B __MyGame_Example2_Monster_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example2_Monster, MyGame_Example2_Monster_file_identifier, MyGame_Example2_Monster_type_identifier)

#define __MyGame_Example2_Strange_formal_args 
#define __MyGame_Example2_Strange_call_args 
static inline MyGame_Example2_Strange_ref_t MyGame_Example2_Strange_create(flatbuffers_builder_t *B __MyGame_Example2_Strange_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example2_Strange, MyGame_Example2_Strange_file_identifier, MyGame_Example2_Strange_type_identifier)

#define __MyGame_Example2_S2_formal_args ,\
  int32_t v0, int32_t v1, int32_t v2, int32_t v3, int32_t v4
#define __MyGame_Example2_S2_call_args ,\
  v0, v1, v2, v3, v4
static inline MyGame_Example2_S2_ref_t MyGame_Example2_S2_create(flatbuffers_builder_t *B __MyGame_Example2_S2_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example2_S2, MyGame_Example2_S2_file_identifier, MyGame_Example2_S2_type_identifier)

#define __MyGame_Example_TestSimpleTableWithEnum_formal_args , MyGame_Example_Color_enum_t v0, MyGame_Example_Color_enum_t v1, uint8_t v2, uint8_t v3
#define __MyGame_Example_TestSimpleTableWithEnum_call_args , v0, v1, v2, v3
static inline MyGame_Example_TestSimpleTableWithEnum_ref_t MyGame_Example_TestSimpleTableWithEnum_create(flatbuffers_builder_t *B __MyGame_Example_TestSimpleTableWithEnum_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestSimpleTableWithEnum, MyGame_Example_TestSimpleTableWithEnum_file_identifier, MyGame_Example_TestSimpleTableWithEnum_type_identifier)

#define __MyGame_Example_TestInclude_formal_args ,\
  InGlobalNamespace_t *v0, MyGame_OtherNameSpace_FromInclude_enum_t v1, MyGame_OtherNameSpace_FromInclude_enum_t v2, int32_t v3, MyGame_OtherNameSpace_FromInclude_enum_t v4, int64_t v5
#define __MyGame_Example_TestInclude_call_args ,\
  v0, v1, v2, v3, v4, v5
static inline MyGame_Example_TestInclude_ref_t MyGame_Example_TestInclude_create(flatbuffers_builder_t *B __MyGame_Example_TestInclude_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestInclude, MyGame_Example_TestInclude_file_identifier, MyGame_Example_TestInclude_type_identifier)

#define __MyGame_Example_Stat_formal_args , flatbuffers_string_ref_t v0, int64_t v1, uint16_t v2
#define __MyGame_Example_Stat_call_args , v0, v1, v2
static inline MyGame_Example_Stat_ref_t MyGame_Example_Stat_create(flatbuffers_builder_t *B __MyGame_Example_Stat_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_Stat, MyGame_Example_Stat_file_identifier, MyGame_Example_Stat_type_identifier)

#define __MyGame_Example_Alt_formal_args ,\
  MyGame_Example_TestJSONPrefix_ref_t v0, Fantasy_Movie_ref_t v1, MyGame_Example_Any_union_vec_ref_t v3, MyGame_Example_MultipleKeys_vec_ref_t v4,\
  Fantasy_Rapunzel_vec_ref_t v5, flatbuffers_string_vec_ref_t v6, flatbuffers_float_vec_ref_t v7, MyGame_Example_FooBar_t *v8
#define __MyGame_Example_Alt_call_args ,\
  v0, v1, v3, v4,\
  v5, v6, v7, v8
static inline MyGame_Example_Alt_ref_t MyGame_Example_Alt_create(flatbuffers_builder_t *B __MyGame_Example_Alt_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_Alt, MyGame_Example_Alt_file_identifier, MyGame_Example_Alt_type_identifier)

#define __MyGame_Example_TestJSONPrefix_formal_args , MyGame_Example_TestJSONPrefixParsing_ref_t v0, MyGame_Example_TestJSONPrefixParsing2_ref_t v1, MyGame_Example_TestJSONPrefixParsing3_ref_t v2
#define __MyGame_Example_TestJSONPrefix_call_args , v0, v1, v2
static inline MyGame_Example_TestJSONPrefix_ref_t MyGame_Example_TestJSONPrefix_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefix_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestJSONPrefix, MyGame_Example_TestJSONPrefix_file_identifier, MyGame_Example_TestJSONPrefix_type_identifier)

#define __MyGame_Example_TestJSONPrefixParsing_formal_args ,\
  flatbuffers_string_ref_t v0, uint32_t v1, flatbuffers_string_ref_t v2, int64_t v3,\
  flatbuffers_string_ref_t v4, int64_t v5, uint32_t v6, int64_t v7, uint32_t v8
#define __MyGame_Example_TestJSONPrefixParsing_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7, v8
static inline MyGame_Example_TestJSONPrefixParsing_ref_t MyGame_Example_TestJSONPrefixParsing_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestJSONPrefixParsing, MyGame_Example_TestJSONPrefixParsing_file_identifier, MyGame_Example_TestJSONPrefixParsing_type_identifier)

#define __MyGame_Example_TestJSONPrefixParsing2_formal_args , int64_t v0, uint32_t v1
#define __MyGame_Example_TestJSONPrefixParsing2_call_args , v0, v1
static inline MyGame_Example_TestJSONPrefixParsing2_ref_t MyGame_Example_TestJSONPrefixParsing2_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing2_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestJSONPrefixParsing2, MyGame_Example_TestJSONPrefixParsing2_file_identifier, MyGame_Example_TestJSONPrefixParsing2_type_identifier)

#define __MyGame_Example_TestJSONPrefixParsing3_formal_args , int64_t v0, uint32_t v1
#define __MyGame_Example_TestJSONPrefixParsing3_call_args , v0, v1
static inline MyGame_Example_TestJSONPrefixParsing3_ref_t MyGame_Example_TestJSONPrefixParsing3_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing3_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestJSONPrefixParsing3, MyGame_Example_TestJSONPrefixParsing3_file_identifier, MyGame_Example_TestJSONPrefixParsing3_type_identifier)

#define __MyGame_Example_TestBase64_formal_args , flatbuffers_uint8_vec_ref_t v0, flatbuffers_uint8_vec_ref_t v1, flatbuffers_uint8_vec_ref_t v2
#define __MyGame_Example_TestBase64_call_args , v0, v1, v2
static inline MyGame_Example_TestBase64_ref_t MyGame_Example_TestBase64_create(flatbuffers_builder_t *B __MyGame_Example_TestBase64_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TestBase64, MyGame_Example_TestBase64_file_identifier, MyGame_Example_TestBase64_type_identifier)

#define __MyGame_Example_MultipleKeys_formal_args , flatbuffers_string_ref_t v0, flatbuffers_string_ref_t v1, int64_t v2
#define __MyGame_Example_MultipleKeys_call_args , v0, v1, v2
static inline MyGame_Example_MultipleKeys_ref_t MyGame_Example_MultipleKeys_create(flatbuffers_builder_t *B __MyGame_Example_MultipleKeys_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_MultipleKeys, MyGame_Example_MultipleKeys_file_identifier, MyGame_Example_MultipleKeys_type_identifier)

#define __MyGame_Example_Monster_formal_args ,\
  MyGame_Example_Vec3_t *v0, int16_t v1, int16_t v2, flatbuffers_string_ref_t v3,\
  flatbuffers_uint8_vec_ref_t v5, MyGame_Example_Color_enum_t v6, MyGame_Example_Any_union_ref_t v8, MyGame_Example_Test_vec_ref_t v9,\
  flatbuffers_string_vec_ref_t v10, MyGame_Example_Monster_vec_ref_t v11, MyGame_Example_Monster_ref_t v12, flatbuffers_uint8_vec_ref_t v13,\
  MyGame_Example_Stat_ref_t v14, flatbuffers_bool_t v15, int32_t v16, uint32_t v17,\
  int64_t v18, uint64_t v19, int32_t v20, uint32_t v21,\
  int64_t v22, uint64_t v23, flatbuffers_bool_vec_ref_t v24, float v25,\
  float v26, float v27, flatbuffers_string_vec_ref_t v28, MyGame_Example_Ability_vec_ref_t v29,\
  flatbuffers_uint8_vec_ref_t v30, MyGame_Example_Test_vec_ref_t v31, flatbuffers_int64_vec_ref_t v32, flatbuffers_double_vec_ref_t v33, MyGame_InParentNamespace_ref_t v34, MyGame_Example_TestBase64_ref_t v35
#define __MyGame_Example_Monster_call_args ,\
  v0, v1, v2, v3,\
  v5, v6, v8, v9,\
  v10, v11, v12, v13,\
  v14, v15, v16, v17,\
  v18, v19, v20, v21,\
  v22, v23, v24, v25,\
  v26, v27, v28, v29,\
  v30, v31, v32, v33, v34, v35
static inline MyGame_Example_Monster_ref_t MyGame_Example_Monster_create(flatbuffers_builder_t *B __MyGame_Example_Monster_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_Monster, MyGame_Example_Monster_file_identifier, MyGame_Example_Monster_type_identifier)

#define __MyGame_Example_TypeAliases_formal_args ,\
  int8_t v0, uint8_t v1, int16_t v2, uint16_t v3,\
  int32_t v4, uint32_t v5, int64_t v6, uint64_t v7,\
  float v8, double v9, flatbuffers_int8_vec_ref_t v10, flatbuffers_double_vec_ref_t v11
#define __MyGame_Example_TypeAliases_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10, v11
static inline MyGame_Example_TypeAliases_ref_t MyGame_Example_TypeAliases_create(flatbuffers_builder_t *B __MyGame_Example_TypeAliases_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MyGame_Example_TypeAliases, MyGame_Example_TypeAliases_file_identifier, MyGame_Example_TypeAliases_type_identifier)

#define __Fantasy_Attacker_formal_args , int32_t v0
#define __Fantasy_Attacker_call_args , v0
static inline Fantasy_Attacker_ref_t Fantasy_Attacker_create(flatbuffers_builder_t *B __Fantasy_Attacker_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Fantasy_Attacker, Fantasy_Attacker_file_identifier, Fantasy_Attacker_type_identifier)

#define __Fantasy_Movie_formal_args ,\
  Fantasy_Character_union_ref_t v1, Fantasy_Character_union_ref_t v3, Fantasy_Character_union_ref_t v5, Fantasy_Character_union_ref_t v7, Fantasy_Character_union_vec_ref_t v9
#define __Fantasy_Movie_call_args ,\
  v1, v3, v5, v7, v9
static inline Fantasy_Movie_ref_t Fantasy_Movie_create(flatbuffers_builder_t *B __Fantasy_Movie_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Fantasy_Movie, Fantasy_Movie_file_identifier, Fantasy_Movie_type_identifier)

static inline MyGame_Example_Foo_union_ref_t MyGame_Example_Foo_as_NONE(void)
{ MyGame_Example_Foo_union_ref_t uref; uref.type = MyGame_Example_Foo_NONE; uref.value = 0; return uref; }
static inline MyGame_Example_Foo_union_ref_t MyGame_Example_Foo_as_InParentNamespace(MyGame_InParentNamespace_ref_t ref)
{ MyGame_Example_Foo_union_ref_t uref; uref.type = MyGame_Example_Foo_InParentNamespace; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, MyGame_Example_Foo)

static MyGame_Example_Foo_union_ref_t MyGame_Example_Foo_clone(flatbuffers_builder_t *B, MyGame_Example_Foo_union_t u)
{
    switch (u.type) {
    case 1: return MyGame_Example_Foo_as_InParentNamespace(MyGame_InParentNamespace_clone(B, (MyGame_InParentNamespace_table_t)u.value));
    default: return MyGame_Example_Foo_as_NONE();
    }
}

static inline MyGame_Example2_SubSystem_SubSystemA_union_ref_t MyGame_Example2_SubSystem_SubSystemA_as_NONE(void)
{ MyGame_Example2_SubSystem_SubSystemA_union_ref_t uref; uref.type = MyGame_Example2_SubSystem_SubSystemA_NONE; uref.value = 0; return uref; }
static inline MyGame_Example2_SubSystem_SubSystemA_union_ref_t MyGame_Example2_SubSystem_SubSystemA_as_Strange(MyGame_Example2_Strange_ref_t ref)
{ MyGame_Example2_SubSystem_SubSystemA_union_ref_t uref; uref.type = MyGame_Example2_SubSystem_SubSystemA_Strange; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, MyGame_Example2_SubSystem_SubSystemA)

static MyGame_Example2_SubSystem_SubSystemA_union_ref_t MyGame_Example2_SubSystem_SubSystemA_clone(flatbuffers_builder_t *B, MyGame_Example2_SubSystem_SubSystemA_union_t u)
{
    switch (u.type) {
    case 1: return MyGame_Example2_SubSystem_SubSystemA_as_Strange(MyGame_Example2_Strange_clone(B, (MyGame_Example2_Strange_table_t)u.value));
    default: return MyGame_Example2_SubSystem_SubSystemA_as_NONE();
    }
}

static inline MyGame_Example2_SubSystem_SubSystemB_union_ref_t MyGame_Example2_SubSystem_SubSystemB_as_NONE(void)
{ MyGame_Example2_SubSystem_SubSystemB_union_ref_t uref; uref.type = MyGame_Example2_SubSystem_SubSystemB_NONE; uref.value = 0; return uref; }
static inline MyGame_Example2_SubSystem_SubSystemB_union_ref_t MyGame_Example2_SubSystem_SubSystemB_as_Strange(MyGame_Example2_Strange_ref_t ref)
{ MyGame_Example2_SubSystem_SubSystemB_union_ref_t uref; uref.type = MyGame_Example2_SubSystem_SubSystemB_Strange; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, MyGame_Example2_SubSystem_SubSystemB)

static MyGame_Example2_SubSystem_SubSystemB_union_ref_t MyGame_Example2_SubSystem_SubSystemB_clone(flatbuffers_builder_t *B, MyGame_Example2_SubSystem_SubSystemB_union_t u)
{
    switch (u.type) {
    case 1: return MyGame_Example2_SubSystem_SubSystemB_as_Strange(MyGame_Example2_Strange_clone(B, (MyGame_Example2_Strange_table_t)u.value));
    default: return MyGame_Example2_SubSystem_SubSystemB_as_NONE();
    }
}

static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_NONE(void)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_NONE; uref.value = 0; return uref; }
static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_Monster(MyGame_Example_Monster_ref_t ref)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_Monster; uref.value = ref; return uref; }
static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_TestSimpleTableWithEnum(MyGame_Example_TestSimpleTableWithEnum_ref_t ref)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_TestSimpleTableWithEnum; uref.value = ref; return uref; }
static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_Monster2(MyGame_Example2_Monster_ref_t ref)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_Monster2; uref.value = ref; return uref; }
static inline MyGame_Example_Any_union_ref_t MyGame_Example_Any_as_Alt(MyGame_Example_Alt_ref_t ref)
{ MyGame_Example_Any_union_ref_t uref; uref.type = MyGame_Example_Any_Alt; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, MyGame_Example_Any)

static MyGame_Example_Any_union_ref_t MyGame_Example_Any_clone(flatbuffers_builder_t *B, MyGame_Example_Any_union_t u)
{
    switch (u.type) {
    case 1: return MyGame_Example_Any_as_Monster(MyGame_Example_Monster_clone(B, (MyGame_Example_Monster_table_t)u.value));
    case 2: return MyGame_Example_Any_as_TestSimpleTableWithEnum(MyGame_Example_TestSimpleTableWithEnum_clone(B, (MyGame_Example_TestSimpleTableWithEnum_table_t)u.value));
    case 3: return MyGame_Example_Any_as_Monster2(MyGame_Example2_Monster_clone(B, (MyGame_Example2_Monster_table_t)u.value));
    case 4: return MyGame_Example_Any_as_Alt(MyGame_Example_Alt_clone(B, (MyGame_Example_Alt_table_t)u.value));
    default: return MyGame_Example_Any_as_NONE();
    }
}

static inline Fantasy_Character_union_ref_t Fantasy_Character_as_NONE(void)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_NONE; uref.value = 0; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_MuLan(Fantasy_Attacker_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_MuLan; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_Rapunzel(Fantasy_Rapunzel_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_Rapunzel; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_Belle(Fantasy_BookReader_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_Belle; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_BookFan(Fantasy_BookReader_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_BookFan; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_Other(flatbuffers_string_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_Other; uref.value = ref; return uref; }
static inline Fantasy_Character_union_ref_t Fantasy_Character_as_Unused(flatbuffers_string_ref_t ref)
{ Fantasy_Character_union_ref_t uref; uref.type = Fantasy_Character_Unused; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, Fantasy_Character)

static Fantasy_Character_union_ref_t Fantasy_Character_clone(flatbuffers_builder_t *B, Fantasy_Character_union_t u)
{
    switch (u.type) {
    case 2: return Fantasy_Character_as_MuLan(Fantasy_Attacker_clone(B, (Fantasy_Attacker_table_t)u.value));
    case 8: return Fantasy_Character_as_Rapunzel(Fantasy_Rapunzel_clone(B, (Fantasy_Rapunzel_struct_t)u.value));
    case 9: return Fantasy_Character_as_Belle(Fantasy_BookReader_clone(B, (Fantasy_BookReader_struct_t)u.value));
    case 10: return Fantasy_Character_as_BookFan(Fantasy_BookReader_clone(B, (Fantasy_BookReader_struct_t)u.value));
    case 11: return Fantasy_Character_as_Other(flatbuffers_string_clone(B, u.value));
    case 255: return Fantasy_Character_as_Unused(flatbuffers_string_clone(B, u.value));
    default: return Fantasy_Character_as_NONE();
    }
}


static inline MyGame_InParentNamespace_ref_t MyGame_InParentNamespace_create(flatbuffers_builder_t *B __MyGame_InParentNamespace_formal_args)
{
    if (MyGame_InParentNamespace_start(B)) {
        return 0;
    }
    return MyGame_InParentNamespace_end(B);
}

static MyGame_InParentNamespace_ref_t MyGame_InParentNamespace_clone(flatbuffers_builder_t *B, MyGame_InParentNamespace_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_InParentNamespace_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_InParentNamespace_end(B));
}


static inline MyGame_Example2_Monster_ref_t MyGame_Example2_Monster_create(flatbuffers_builder_t *B __MyGame_Example2_Monster_formal_args)
{
    if (MyGame_Example2_Monster_start(B)) {
        return 0;
    }
    return MyGame_Example2_Monster_end(B);
}

static MyGame_Example2_Monster_ref_t MyGame_Example2_Monster_clone(flatbuffers_builder_t *B, MyGame_Example2_Monster_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example2_Monster_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example2_Monster_end(B));
}


static inline MyGame_Example2_Strange_ref_t MyGame_Example2_Strange_create(flatbuffers_builder_t *B __MyGame_Example2_Strange_formal_args)
{
    if (MyGame_Example2_Strange_start(B)) {
        return 0;
    }
    return MyGame_Example2_Strange_end(B);
}

static MyGame_Example2_Strange_ref_t MyGame_Example2_Strange_clone(flatbuffers_builder_t *B, MyGame_Example2_Strange_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example2_Strange_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example2_Strange_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example2_S2_namespace, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example2_S2_table, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example2_S2_struct, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example2_S2_union, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)
__flatbuffers_build_scalar_field(4, flatbuffers_, MyGame_Example2_S2_int, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example2_S2)

static inline MyGame_Example2_S2_ref_t MyGame_Example2_S2_create(flatbuffers_builder_t *B __MyGame_Example2_S2_formal_args)
{
    if (MyGame_Example2_S2_start(B)
        || MyGame_Example2_S2_namespace_add(B, v0)
        || MyGame_Example2_S2_table_add(B, v1)
        || MyGame_Example2_S2_struct_add(B, v2)
        || MyGame_Example2_S2_union_add(B, v3)
        || MyGame_Example2_S2_int_add(B, v4)) {
        return 0;
    }
    return MyGame_Example2_S2_end(B);
}

static MyGame_Example2_S2_ref_t MyGame_Example2_S2_clone(flatbuffers_builder_t *B, MyGame_Example2_S2_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example2_S2_start(B)
        || MyGame_Example2_S2_namespace_pick(B, t)
        || MyGame_Example2_S2_table_pick(B, t)
        || MyGame_Example2_S2_struct_pick(B, t)
        || MyGame_Example2_S2_union_pick(B, t)
        || MyGame_Example2_S2_int_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example2_S2_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example_TestSimpleTableWithEnum_color, MyGame_Example_Color, MyGame_Example_Color_enum_t, 1, 1, INT8_C(2), MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestSimpleTableWithEnum_color2, MyGame_Example_Color, MyGame_Example_Color_enum_t, 1, 1, INT8_C(2), MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_TestSimpleTableWithEnum_uc, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(2), MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example_TestSimpleTableWithEnum_uc2, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(2), MyGame_Example_TestSimpleTableWithEnum)

static inline MyGame_Example_TestSimpleTableWithEnum_ref_t MyGame_Example_TestSimpleTableWithEnum_create(flatbuffers_builder_t *B __MyGame_Example_TestSimpleTableWithEnum_formal_args)
{
    if (MyGame_Example_TestSimpleTableWithEnum_start(B)
        || MyGame_Example_TestSimpleTableWithEnum_color_add(B, v0)
        || MyGame_Example_TestSimpleTableWithEnum_color2_add(B, v1)
        || MyGame_Example_TestSimpleTableWithEnum_uc_add(B, v2)
        || MyGame_Example_TestSimpleTableWithEnum_uc2_add(B, v3)) {
        return 0;
    }
    return MyGame_Example_TestSimpleTableWithEnum_end(B);
}

static MyGame_Example_TestSimpleTableWithEnum_ref_t MyGame_Example_TestSimpleTableWithEnum_clone(flatbuffers_builder_t *B, MyGame_Example_TestSimpleTableWithEnum_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestSimpleTableWithEnum_start(B)
        || MyGame_Example_TestSimpleTableWithEnum_color_pick(B, t)
        || MyGame_Example_TestSimpleTableWithEnum_color2_pick(B, t)
        || MyGame_Example_TestSimpleTableWithEnum_uc_pick(B, t)
        || MyGame_Example_TestSimpleTableWithEnum_uc2_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestSimpleTableWithEnum_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, MyGame_Example_TestInclude_global, InGlobalNamespace, 1, 1, MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestInclude_incval, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, 8, 8, INT64_C(0), MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_TestInclude_incval2, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, 8, 8, INT64_C(0), MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example_TestInclude_incval3, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(4, flatbuffers_, MyGame_Example_TestInclude_incval4, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, 8, 8, INT64_C(0), MyGame_Example_TestInclude)
__flatbuffers_build_scalar_field(5, flatbuffers_, MyGame_Example_TestInclude_incval5, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestInclude)

static inline MyGame_Example_TestInclude_ref_t MyGame_Example_TestInclude_create(flatbuffers_builder_t *B __MyGame_Example_TestInclude_formal_args)
{
    if (MyGame_Example_TestInclude_start(B)
        || MyGame_Example_TestInclude_incval_add(B, v1)
        || MyGame_Example_TestInclude_incval2_add(B, v2)
        || MyGame_Example_TestInclude_incval4_add(B, v4)
        || MyGame_Example_TestInclude_incval5_add(B, v5)
        || MyGame_Example_TestInclude_incval3_add(B, v3)
        || MyGame_Example_TestInclude_global_add(B, v0)) {
        return 0;
    }
    return MyGame_Example_TestInclude_end(B);
}

static MyGame_Example_TestInclude_ref_t MyGame_Example_TestInclude_clone(flatbuffers_builder_t *B, MyGame_Example_TestInclude_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestInclude_start(B)
        || MyGame_Example_TestInclude_incval_pick(B, t)
        || MyGame_Example_TestInclude_incval2_pick(B, t)
        || MyGame_Example_TestInclude_incval4_pick(B, t)
        || MyGame_Example_TestInclude_incval5_pick(B, t)
        || MyGame_Example_TestInclude_incval3_pick(B, t)
        || MyGame_Example_TestInclude_global_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestInclude_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Example_Stat_id, MyGame_Example_Stat)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_Stat_val, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_Stat)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_Stat_count, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), MyGame_Example_Stat)

static inline MyGame_Example_Stat_ref_t MyGame_Example_Stat_create(flatbuffers_builder_t *B __MyGame_Example_Stat_formal_args)
{
    if (MyGame_Example_Stat_start(B)
        || MyGame_Example_Stat_val_add(B, v1)
        || MyGame_Example_Stat_id_add(B, v0)
        || MyGame_Example_Stat_count_add(B, v2)) {
        return 0;
    }
    return MyGame_Example_Stat_end(B);
}

static MyGame_Example_Stat_ref_t MyGame_Example_Stat_clone(flatbuffers_builder_t *B, MyGame_Example_Stat_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_Stat_start(B)
        || MyGame_Example_Stat_val_pick(B, t)
        || MyGame_Example_Stat_id_pick(B, t)
        || MyGame_Example_Stat_count_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_Stat_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, MyGame_Example_Alt_prefix, MyGame_Example_TestJSONPrefix, MyGame_Example_Alt)
__flatbuffers_build_table_field(1, flatbuffers_, MyGame_Example_Alt_movie, Fantasy_Movie, MyGame_Example_Alt)
__flatbuffers_build_union_vector_field(3, flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, MyGame_Example_Alt)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, Monster, MyGame_Example_Monster)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, TestSimpleTableWithEnum, MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, Monster2, MyGame_Example2_Monster)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, MyGame_Example_Alt_manyany, MyGame_Example_Any, Alt, MyGame_Example_Alt)
/* vector has keyed elements */
__flatbuffers_build_table_vector_field(4, flatbuffers_, MyGame_Example_Alt_multik, MyGame_Example_MultipleKeys, MyGame_Example_Alt)
/* vector has keyed elements */
__flatbuffers_build_vector_field(5, flatbuffers_, MyGame_Example_Alt_rapunzels, Fantasy_Rapunzel, Fantasy_Rapunzel_t, MyGame_Example_Alt)
__flatbuffers_build_string_vector_field(6, flatbuffers_, MyGame_Example_Alt_names, MyGame_Example_Alt)
__flatbuffers_build_vector_field(7, flatbuffers_, MyGame_Example_Alt_samples, flatbuffers_float, float, MyGame_Example_Alt)
__flatbuffers_build_struct_field(8, flatbuffers_, MyGame_Example_Alt_fixed_array, MyGame_Example_FooBar, 124, 4, MyGame_Example_Alt)

static inline MyGame_Example_Alt_ref_t MyGame_Example_Alt_create(flatbuffers_builder_t *B __MyGame_Example_Alt_formal_args)
{
    if (MyGame_Example_Alt_start(B)
        || MyGame_Example_Alt_prefix_add(B, v0)
        || MyGame_Example_Alt_movie_add(B, v1)
        || MyGame_Example_Alt_manyany_add(B, v3)
        || MyGame_Example_Alt_multik_add(B, v4)
        || MyGame_Example_Alt_rapunzels_add(B, v5)
        || MyGame_Example_Alt_names_add(B, v6)
        || MyGame_Example_Alt_samples_add(B, v7)
        || MyGame_Example_Alt_fixed_array_add(B, v8)) {
        return 0;
    }
    return MyGame_Example_Alt_end(B);
}

static MyGame_Example_Alt_ref_t MyGame_Example_Alt_clone(flatbuffers_builder_t *B, MyGame_Example_Alt_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_Alt_start(B)
        || MyGame_Example_Alt_prefix_pick(B, t)
        || MyGame_Example_Alt_movie_pick(B, t)
        || MyGame_Example_Alt_manyany_pick(B, t)
        || MyGame_Example_Alt_multik_pick(B, t)
        || MyGame_Example_Alt_rapunzels_pick(B, t)
        || MyGame_Example_Alt_names_pick(B, t)
        || MyGame_Example_Alt_samples_pick(B, t)
        || MyGame_Example_Alt_fixed_array_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_Alt_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, MyGame_Example_TestJSONPrefix_testjsonprefixparsing, MyGame_Example_TestJSONPrefixParsing, MyGame_Example_TestJSONPrefix)
__flatbuffers_build_table_field(1, flatbuffers_, MyGame_Example_TestJSONPrefix_testjsonprefixparsing2, MyGame_Example_TestJSONPrefixParsing2, MyGame_Example_TestJSONPrefix)
__flatbuffers_build_table_field(2, flatbuffers_, MyGame_Example_TestJSONPrefix_testjsonprefixparsing3, MyGame_Example_TestJSONPrefixParsing3, MyGame_Example_TestJSONPrefix)

static inline MyGame_Example_TestJSONPrefix_ref_t MyGame_Example_TestJSONPrefix_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefix_formal_args)
{
    if (MyGame_Example_TestJSONPrefix_start(B)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing_add(B, v0)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing2_add(B, v1)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing3_add(B, v2)) {
        return 0;
    }
    return MyGame_Example_TestJSONPrefix_end(B);
}

static MyGame_Example_TestJSONPrefix_ref_t MyGame_Example_TestJSONPrefix_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefix_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestJSONPrefix_start(B)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing_pick(B, t)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing2_pick(B, t)
        || MyGame_Example_TestJSONPrefix_testjsonprefixparsing3_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestJSONPrefix_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_aaaa, MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_aaaa12345, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_string_field(2, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_bbbb, MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_bbbb1234, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_string_field(4, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_cccc, MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(5, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_cccc1234, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(6, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_cccc12345, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(7, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_dddd1234, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing)
__flatbuffers_build_scalar_field(8, flatbuffers_, MyGame_Example_TestJSONPrefixParsing_dddd12345, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing)

static inline MyGame_Example_TestJSONPrefixParsing_ref_t MyGame_Example_TestJSONPrefixParsing_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing_formal_args)
{
    if (MyGame_Example_TestJSONPrefixParsing_start(B)
        || MyGame_Example_TestJSONPrefixParsing_bbbb1234_add(B, v3)
        || MyGame_Example_TestJSONPrefixParsing_cccc1234_add(B, v5)
        || MyGame_Example_TestJSONPrefixParsing_dddd1234_add(B, v7)
        || MyGame_Example_TestJSONPrefixParsing_aaaa_add(B, v0)
        || MyGame_Example_TestJSONPrefixParsing_aaaa12345_add(B, v1)
        || MyGame_Example_TestJSONPrefixParsing_bbbb_add(B, v2)
        || MyGame_Example_TestJSONPrefixParsing_cccc_add(B, v4)
        || MyGame_Example_TestJSONPrefixParsing_cccc12345_add(B, v6)
        || MyGame_Example_TestJSONPrefixParsing_dddd12345_add(B, v8)) {
        return 0;
    }
    return MyGame_Example_TestJSONPrefixParsing_end(B);
}

static MyGame_Example_TestJSONPrefixParsing_ref_t MyGame_Example_TestJSONPrefixParsing_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestJSONPrefixParsing_start(B)
        || MyGame_Example_TestJSONPrefixParsing_bbbb1234_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_cccc1234_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_dddd1234_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_aaaa_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_aaaa12345_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_bbbb_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_cccc_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_cccc12345_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing_dddd12345_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestJSONPrefixParsing_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_steps, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing2)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_start_, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing2)

static inline MyGame_Example_TestJSONPrefixParsing2_ref_t MyGame_Example_TestJSONPrefixParsing2_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing2_formal_args)
{
    if (MyGame_Example_TestJSONPrefixParsing2_start(B)
        || MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_steps_add(B, v0)
        || MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_start__add(B, v1)) {
        return 0;
    }
    return MyGame_Example_TestJSONPrefixParsing2_end(B);
}

static MyGame_Example_TestJSONPrefixParsing2_ref_t MyGame_Example_TestJSONPrefixParsing2_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing2_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestJSONPrefixParsing2_start(B)
        || MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_steps_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing2_aaaa_bbbb_start__pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestJSONPrefixParsing2_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_steps, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TestJSONPrefixParsing3)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_start_steps, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TestJSONPrefixParsing3)

static inline MyGame_Example_TestJSONPrefixParsing3_ref_t MyGame_Example_TestJSONPrefixParsing3_create(flatbuffers_builder_t *B __MyGame_Example_TestJSONPrefixParsing3_formal_args)
{
    if (MyGame_Example_TestJSONPrefixParsing3_start(B)
        || MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_steps_add(B, v0)
        || MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_start_steps_add(B, v1)) {
        return 0;
    }
    return MyGame_Example_TestJSONPrefixParsing3_end(B);
}

static MyGame_Example_TestJSONPrefixParsing3_ref_t MyGame_Example_TestJSONPrefixParsing3_clone(flatbuffers_builder_t *B, MyGame_Example_TestJSONPrefixParsing3_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestJSONPrefixParsing3_start(B)
        || MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_steps_pick(B, t)
        || MyGame_Example_TestJSONPrefixParsing3_aaaa_bbbb_start_steps_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestJSONPrefixParsing3_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, MyGame_Example_TestBase64_data, flatbuffers_uint8, uint8_t, MyGame_Example_TestBase64)
__flatbuffers_build_vector_field(1, flatbuffers_, MyGame_Example_TestBase64_urldata, flatbuffers_uint8, uint8_t, MyGame_Example_TestBase64)
__flatbuffers_build_vector_field(2, flatbuffers_, MyGame_Example_TestBase64_nested, flatbuffers_uint8, uint8_t, MyGame_Example_TestBase64)
__flatbuffers_build_nested_table_root(flatbuffers_, MyGame_Example_TestBase64_nested, MyGame_Example_Monster, MyGame_Example_Monster_identifier, MyGame_Example_Monster_type_identifier)

static inline MyGame_Example_TestBase64_ref_t MyGame_Example_TestBase64_create(flatbuffers_builder_t *B __MyGame_Example_TestBase64_formal_args)
{
    if (MyGame_Example_TestBase64_start(B)
        || MyGame_Example_TestBase64_data_add(B, v0)
        || MyGame_Example_TestBase64_urldata_add(B, v1)
        || MyGame_Example_TestBase64_nested_add(B, v2)) {
        return 0;
    }
    return MyGame_Example_TestBase64_end(B);
}

static MyGame_Example_TestBase64_ref_t MyGame_Example_TestBase64_clone(flatbuffers_builder_t *B, MyGame_Example_TestBase64_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TestBase64_start(B)
        || MyGame_Example_TestBase64_data_pick(B, t)
        || MyGame_Example_TestBase64_urldata_pick(B, t)
        || MyGame_Example_TestBase64_nested_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TestBase64_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, MyGame_Example_MultipleKeys_hello, MyGame_Example_MultipleKeys)
__flatbuffers_build_string_field(1, flatbuffers_, MyGame_Example_MultipleKeys_world, MyGame_Example_MultipleKeys)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_MultipleKeys_foobar, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_MultipleKeys)

static inline MyGame_Example_MultipleKeys_ref_t MyGame_Example_MultipleKeys_create(flatbuffers_builder_t *B __MyGame_Example_MultipleKeys_formal_args)
{
    if (MyGame_Example_MultipleKeys_start(B)
        || MyGame_Example_MultipleKeys_foobar_add(B, v2)
        || MyGame_Example_MultipleKeys_hello_add(B, v0)
        || MyGame_Example_MultipleKeys_world_add(B, v1)) {
        return 0;
    }
    return MyGame_Example_MultipleKeys_end(B);
}

static MyGame_Example_MultipleKeys_ref_t MyGame_Example_MultipleKeys_clone(flatbuffers_builder_t *B, MyGame_Example_MultipleKeys_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_MultipleKeys_start(B)
        || MyGame_Example_MultipleKeys_foobar_pick(B, t)
        || MyGame_Example_MultipleKeys_hello_pick(B, t)
        || MyGame_Example_MultipleKeys_world_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_MultipleKeys_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, MyGame_Example_Monster_pos, MyGame_Example_Vec3, 32, 16, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_Monster_mana, flatbuffers_int16, int16_t, 2, 2, INT16_C(150), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_Monster_hp, flatbuffers_int16, int16_t, 2, 2, INT16_C(100), MyGame_Example_Monster)
__flatbuffers_build_string_field(3, flatbuffers_, MyGame_Example_Monster_name, MyGame_Example_Monster)
/* Skipping build of deprecated field: 'MyGame_Example_Monster_friendly' */

__flatbuffers_build_vector_field(5, flatbuffers_, MyGame_Example_Monster_inventory, flatbuffers_uint8, uint8_t, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(6, flatbuffers_, MyGame_Example_Monster_color, MyGame_Example_Color, MyGame_Example_Color_enum_t, 1, 1, INT8_C(8), MyGame_Example_Monster)
__flatbuffers_build_union_field(8, flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, MyGame_Example_Monster)
__flatbuffers_build_union_table_value_field(flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, Monster, MyGame_Example_Monster)
__flatbuffers_build_union_table_value_field(flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, TestSimpleTableWithEnum, MyGame_Example_TestSimpleTableWithEnum)
__flatbuffers_build_union_table_value_field(flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, Monster2, MyGame_Example2_Monster)
__flatbuffers_build_union_table_value_field(flatbuffers_, MyGame_Example_Monster_test, MyGame_Example_Any, Alt, MyGame_Example_Alt)
__flatbuffers_build_vector_field(9, flatbuffers_, MyGame_Example_Monster_test4, MyGame_Example_Test, MyGame_Example_Test_t, MyGame_Example_Monster)
__flatbuffers_build_string_vector_field(10, flatbuffers_, MyGame_Example_Monster_testarrayofstring, MyGame_Example_Monster)
/* vector has keyed elements */
__flatbuffers_build_table_vector_field(11, flatbuffers_, MyGame_Example_Monster_testarrayoftables, MyGame_Example_Monster, MyGame_Example_Monster)
__flatbuffers_build_table_field(12, flatbuffers_, MyGame_Example_Monster_enemy, MyGame_Example_Monster, MyGame_Example_Monster)
__flatbuffers_build_vector_field(13, flatbuffers_, MyGame_Example_Monster_testnestedflatbuffer, flatbuffers_uint8, uint8_t, MyGame_Example_Monster)
__flatbuffers_build_nested_table_root(flatbuffers_, MyGame_Example_Monster_testnestedflatbuffer, MyGame_Example_Monster, MyGame_Example_Monster_identifier, MyGame_Example_Monster_type_identifier)
__flatbuffers_build_table_field(14, flatbuffers_, MyGame_Example_Monster_testempty, MyGame_Example_Stat, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(15, flatbuffers_, MyGame_Example_Monster_testbool, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(1), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(16, flatbuffers_, MyGame_Example_Monster_testhashs32_fnv1, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(17, flatbuffers_, MyGame_Example_Monster_testhashu32_fnv1, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(18, flatbuffers_, MyGame_Example_Monster_testhashs64_fnv1, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(19, flatbuffers_, MyGame_Example_Monster_testhashu64_fnv1, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(20, flatbuffers_, MyGame_Example_Monster_testhashs32_fnv1a, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(21, flatbuffers_, MyGame_Example_Monster_testhashu32_fnv1a, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(22, flatbuffers_, MyGame_Example_Monster_testhashs64_fnv1a, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_Monster)
__flatbuffers_build_scalar_field(23, flatbuffers_, MyGame_Example_Monster_testhashu64_fnv1a, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), MyGame_Example_Monster)
__flatbuffers_build_vector_field(24, flatbuffers_, MyGame_Example_Monster_testarrayofbools, flatbuffers_bool, flatbuffers_bool_t, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(25, flatbuffers_, MyGame_Example_Monster_testf, flatbuffers_float, float, 4, 4, 314159.000f, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(26, flatbuffers_, MyGame_Example_Monster_testf2, flatbuffers_float, float, 4, 4, 3.00000000f, MyGame_Example_Monster)
__flatbuffers_build_scalar_field(27, flatbuffers_, MyGame_Example_Monster_testf3, flatbuffers_float, float, 4, 4, 0.00000000f, MyGame_Example_Monster)
__flatbuffers_build_string_vector_field(28, flatbuffers_, MyGame_Example_Monster_testarrayofstring2, MyGame_Example_Monster)
/* vector has keyed elements */
__flatbuffers_build_vector_field(29, flatbuffers_, MyGame_Example_Monster_testarrayofsortedstruct, MyGame_Example_Ability, MyGame_Example_Ability_t, MyGame_Example_Monster)
__flatbuffers_build_vector_field(30, flatbuffers_, MyGame_Example_Monster_flex, flatbuffers_uint8, uint8_t, MyGame_Example_Monster)
__flatbuffers_build_vector_field(31, flatbuffers_, MyGame_Example_Monster_test5, MyGame_Example_Test, MyGame_Example_Test_t, MyGame_Example_Monster)
__flatbuffers_build_vector_field(32, flatbuffers_, MyGame_Example_Monster_vector_of_longs, flatbuffers_int64, int64_t, MyGame_Example_Monster)
__flatbuffers_build_vector_field(33, flatbuffers_, MyGame_Example_Monster_vector_of_doubles, flatbuffers_double, double, MyGame_Example_Monster)
__flatbuffers_build_table_field(34, flatbuffers_, MyGame_Example_Monster_parent_namespace_test, MyGame_InParentNamespace, MyGame_Example_Monster)
__flatbuffers_build_table_field(35, flatbuffers_, MyGame_Example_Monster_testbase64, MyGame_Example_TestBase64, MyGame_Example_Monster)

static inline MyGame_Example_Monster_ref_t MyGame_Example_Monster_create(flatbuffers_builder_t *B __MyGame_Example_Monster_formal_args)
{
    if (MyGame_Example_Monster_start(B)
        || MyGame_Example_Monster_pos_add(B, v0)
        || MyGame_Example_Monster_testhashs64_fnv1_add(B, v18)
        || MyGame_Example_Monster_testhashu64_fnv1_add(B, v19)
        || MyGame_Example_Monster_testhashs64_fnv1a_add(B, v22)
        || MyGame_Example_Monster_testhashu64_fnv1a_add(B, v23)
        || MyGame_Example_Monster_name_add(B, v3)
        || MyGame_Example_Monster_inventory_add(B, v5)
        || MyGame_Example_Monster_testarrayoftables_add(B, v11)
        || MyGame_Example_Monster_testarrayofstring_add(B, v10)
        || MyGame_Example_Monster_testarrayofstring2_add(B, v28)
        || MyGame_Example_Monster_testarrayofbools_add(B, v24)
        || MyGame_Example_Monster_testarrayofsortedstruct_add(B, v29)
        || MyGame_Example_Monster_enemy_add(B, v12)
        || MyGame_Example_Monster_test_add_value(B, v8)
        || MyGame_Example_Monster_test4_add(B, v9)
        || MyGame_Example_Monster_test5_add(B, v31)
        || MyGame_Example_Monster_testnestedflatbuffer_add(B, v13)
        || MyGame_Example_Monster_testempty_add(B, v14)
        || MyGame_Example_Monster_testhashs32_fnv1_add(B, v16)
        || MyGame_Example_Monster_testhashu32_fnv1_add(B, v17)
        || MyGame_Example_Monster_testhashs32_fnv1a_add(B, v20)
        || MyGame_Example_Monster_testhashu32_fnv1a_add(B, v21)
        || MyGame_Example_Monster_testf_add(B, v25)
        || MyGame_Example_Monster_testf2_add(B, v26)
        || MyGame_Example_Monster_testf3_add(B, v27)
        || MyGame_Example_Monster_flex_add(B, v30)
        || MyGame_Example_Monster_vector_of_longs_add(B, v32)
        || MyGame_Example_Monster_vector_of_doubles_add(B, v33)
        || MyGame_Example_Monster_parent_namespace_test_add(B, v34)
        || MyGame_Example_Monster_testbase64_add(B, v35)
        || MyGame_Example_Monster_hp_add(B, v2)
        || MyGame_Example_Monster_mana_add(B, v1)
        || MyGame_Example_Monster_color_add(B, v6)
        || MyGame_Example_Monster_testbool_add(B, v15)
        || MyGame_Example_Monster_test_add_type(B, v8.type)) {
        return 0;
    }
    return MyGame_Example_Monster_end(B);
}

static MyGame_Example_Monster_ref_t MyGame_Example_Monster_clone(flatbuffers_builder_t *B, MyGame_Example_Monster_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_Monster_start(B)
        || MyGame_Example_Monster_pos_pick(B, t)
        || MyGame_Example_Monster_testhashs64_fnv1_pick(B, t)
        || MyGame_Example_Monster_testhashu64_fnv1_pick(B, t)
        || MyGame_Example_Monster_testhashs64_fnv1a_pick(B, t)
        || MyGame_Example_Monster_testhashu64_fnv1a_pick(B, t)
        || MyGame_Example_Monster_name_pick(B, t)
        || MyGame_Example_Monster_inventory_pick(B, t)
        || MyGame_Example_Monster_testarrayoftables_pick(B, t)
        || MyGame_Example_Monster_testarrayofstring_pick(B, t)
        || MyGame_Example_Monster_testarrayofstring2_pick(B, t)
        || MyGame_Example_Monster_testarrayofbools_pick(B, t)
        || MyGame_Example_Monster_testarrayofsortedstruct_pick(B, t)
        || MyGame_Example_Monster_enemy_pick(B, t)
        || MyGame_Example_Monster_test_pick(B, t)
        || MyGame_Example_Monster_test4_pick(B, t)
        || MyGame_Example_Monster_test5_pick(B, t)
        || MyGame_Example_Monster_testnestedflatbuffer_pick(B, t)
        || MyGame_Example_Monster_testempty_pick(B, t)
        || MyGame_Example_Monster_testhashs32_fnv1_pick(B, t)
        || MyGame_Example_Monster_testhashu32_fnv1_pick(B, t)
        || MyGame_Example_Monster_testhashs32_fnv1a_pick(B, t)
        || MyGame_Example_Monster_testhashu32_fnv1a_pick(B, t)
        || MyGame_Example_Monster_testf_pick(B, t)
        || MyGame_Example_Monster_testf2_pick(B, t)
        || MyGame_Example_Monster_testf3_pick(B, t)
        || MyGame_Example_Monster_flex_pick(B, t)
        || MyGame_Example_Monster_vector_of_longs_pick(B, t)
        || MyGame_Example_Monster_vector_of_doubles_pick(B, t)
        || MyGame_Example_Monster_parent_namespace_test_pick(B, t)
        || MyGame_Example_Monster_testbase64_pick(B, t)
        || MyGame_Example_Monster_hp_pick(B, t)
        || MyGame_Example_Monster_mana_pick(B, t)
        || MyGame_Example_Monster_color_pick(B, t)
        || MyGame_Example_Monster_testbool_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_Monster_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MyGame_Example_TypeAliases_i8, flatbuffers_int8, int8_t, 1, 1, INT8_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(1, flatbuffers_, MyGame_Example_TypeAliases_u8, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(2, flatbuffers_, MyGame_Example_TypeAliases_i16, flatbuffers_int16, int16_t, 2, 2, INT16_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(3, flatbuffers_, MyGame_Example_TypeAliases_u16, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(4, flatbuffers_, MyGame_Example_TypeAliases_i32, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(5, flatbuffers_, MyGame_Example_TypeAliases_u32, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(6, flatbuffers_, MyGame_Example_TypeAliases_i64, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(7, flatbuffers_, MyGame_Example_TypeAliases_u64, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(8, flatbuffers_, MyGame_Example_TypeAliases_f32, flatbuffers_float, float, 4, 4, 0.00000000f, MyGame_Example_TypeAliases)
__flatbuffers_build_scalar_field(9, flatbuffers_, MyGame_Example_TypeAliases_f64, flatbuffers_double, double, 8, 8, 0.0000000000000000, MyGame_Example_TypeAliases)
__flatbuffers_build_vector_field(10, flatbuffers_, MyGame_Example_TypeAliases_v8, flatbuffers_int8, int8_t, MyGame_Example_TypeAliases)
__flatbuffers_build_vector_field(11, flatbuffers_, MyGame_Example_TypeAliases_vf64, flatbuffers_double, double, MyGame_Example_TypeAliases)

static inline MyGame_Example_TypeAliases_ref_t MyGame_Example_TypeAliases_create(flatbuffers_builder_t *B __MyGame_Example_TypeAliases_formal_args)
{
    if (MyGame_Example_TypeAliases_start(B)
        || MyGame_Example_TypeAliases_i64_add(B, v6)
        || MyGame_Example_TypeAliases_u64_add(B, v7)
        || MyGame_Example_TypeAliases_f64_add(B, v9)
        || MyGame_Example_TypeAliases_i32_add(B, v4)
        || MyGame_Example_TypeAliases_u32_add(B, v5)
        || MyGame_Example_TypeAliases_f32_add(B, v8)
        || MyGame_Example_TypeAliases_v8_add(B, v10)
        || MyGame_Example_TypeAliases_vf64_add(B, v11)
        || MyGame_Example_TypeAliases_i16_add(B, v2)
        || MyGame_Example_TypeAliases_u16_add(B, v3)
        || MyGame_Example_TypeAliases_i8_add(B, v0)
        || MyGame_Example_TypeAliases_u8_add(B, v1)) {
        return 0;
    }
    return MyGame_Example_TypeAliases_end(B);
}

static MyGame_Example_TypeAliases_ref_t MyGame_Example_TypeAliases_clone(flatbuffers_builder_t *B, MyGame_Example_TypeAliases_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MyGame_Example_TypeAliases_start(B)
        || MyGame_Example_TypeAliases_i64_pick(B, t)
        || MyGame_Example_TypeAliases_u64_pick(B, t)
        || MyGame_Example_TypeAliases_f64_pick(B, t)
        || MyGame_Example_TypeAliases_i32_pick(B, t)
        || MyGame_Example_TypeAliases_u32_pick(B, t)
        || MyGame_Example_TypeAliases_f32_pick(B, t)
        || MyGame_Example_TypeAliases_v8_pick(B, t)
        || MyGame_Example_TypeAliases_vf64_pick(B, t)
        || MyGame_Example_TypeAliases_i16_pick(B, t)
        || MyGame_Example_TypeAliases_u16_pick(B, t)
        || MyGame_Example_TypeAliases_i8_pick(B, t)
        || MyGame_Example_TypeAliases_u8_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MyGame_Example_TypeAliases_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Fantasy_Attacker_sword_attack_damage, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), Fantasy_Attacker)

static inline Fantasy_Attacker_ref_t Fantasy_Attacker_create(flatbuffers_builder_t *B __Fantasy_Attacker_formal_args)
{
    if (Fantasy_Attacker_start(B)
        || Fantasy_Attacker_sword_attack_damage_add(B, v0)) {
        return 0;
    }
    return Fantasy_Attacker_end(B);
}

static Fantasy_Attacker_ref_t Fantasy_Attacker_clone(flatbuffers_builder_t *B, Fantasy_Attacker_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Fantasy_Attacker_start(B)
        || Fantasy_Attacker_sword_attack_damage_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Fantasy_Attacker_end(B));
}

__flatbuffers_build_union_field(1, flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Other)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_main_character, Fantasy_Character, Unused)
__flatbuffers_build_union_field(3, flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Other)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_antagonist, Fantasy_Character, Unused)
__flatbuffers_build_union_field(5, flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Other)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_side_kick, Fantasy_Character, Unused)
__flatbuffers_build_union_field(7, flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Other)
__flatbuffers_build_union_string_value_field(flatbuffers_, Fantasy_Movie_cameo, Fantasy_Character, Unused)
__flatbuffers_build_union_vector_field(9, flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Fantasy_Movie)
__flatbuffers_build_union_table_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, MuLan, Fantasy_Attacker)
__flatbuffers_build_union_struct_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Rapunzel, Fantasy_Rapunzel)
__flatbuffers_build_union_struct_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Belle, Fantasy_BookReader)
__flatbuffers_build_union_struct_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, BookFan, Fantasy_BookReader)
__flatbuffers_build_union_string_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Other)
__flatbuffers_build_union_string_vector_value_field(flatbuffers_, Fantasy_Movie_characters, Fantasy_Character, Unused)

static inline Fantasy_Movie_ref_t Fantasy_Movie_create(flatbuffers_builder_t *B __Fantasy_Movie_formal_args)
{
    if (Fantasy_Movie_start(B)
        || Fantasy_Movie_main_character_add_value(B, v1)
        || Fantasy_Movie_antagonist_add_value(B, v3)
        || Fantasy_Movie_side_kick_add_value(B, v5)
        || Fantasy_Movie_cameo_add_value(B, v7)
        || Fantasy_Movie_characters_add(B, v9)
        || Fantasy_Movie_main_character_add_type(B, v1.type)
        || Fantasy_Movie_antagonist_add_type(B, v3.type)
        || Fantasy_Movie_side_kick_add_type(B, v5.type)
        || Fantasy_Movie_cameo_add_type(B, v7.type)) {
        return 0;
    }
    return Fantasy_Movie_end(B);
}

static Fantasy_Movie_ref_t Fantasy_Movie_clone(flatbuffers_builder_t *B, Fantasy_Movie_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Fantasy_Movie_start(B)
        || Fantasy_Movie_main_character_pick(B, t)
        || Fantasy_Movie_antagonist_pick(B, t)
        || Fantasy_Movie_side_kick_pick(B, t)
        || Fantasy_Movie_cameo_pick(B, t)
        || Fantasy_Movie_characters_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Fantasy_Movie_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MONSTER_TEST_BUILDER_H */
#ifndef MONSTER_TEST_VERIFIER_H
#define MONSTER_TEST_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef MONSTER_TEST_READER_H
#include "monster_test_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#ifndef INCLUDE_TEST1_VERIFIER_H
#include "include_test1_verifier.h"
#endif
#ifndef ATTRIBUTES_VERIFIER_H
#include "attributes_verifier.h"
#endif
#include "flatcc/flatcc_prologue.h"

static int MyGame_InParentNamespace_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example2_Monster_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example2_Strange_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example2_S2_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestSimpleTableWithEnum_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestInclude_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_Stat_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_Alt_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestJSONPrefix_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestJSONPrefixParsing_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestJSONPrefixParsing2_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestJSONPrefixParsing3_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestBase64_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_MultipleKeys_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_Monster_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TypeAliases_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Fantasy_Attacker_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Fantasy_Movie_verify_table(flatcc_table_verifier_descriptor_t *td);

static int MyGame_Example_Foo_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, MyGame_InParentNamespace_verify_table); /* InParentNamespace */
    default: return flatcc_verify_ok;
    }
}

static int MyGame_Example2_SubSystem_SubSystemA_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, MyGame_Example2_Strange_verify_table); /* Strange */
    default: return flatcc_verify_ok;
    }
}

static int MyGame_Example2_SubSystem_SubSystemB_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, MyGame_Example2_Strange_verify_table); /* Strange */
    default: return flatcc_verify_ok;
    }
}

static int MyGame_Example_Any_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, MyGame_Example_Monster_verify_table); /* Monster */
    case 2: return flatcc_verify_union_table(ud, MyGame_Example_TestSimpleTableWithEnum_verify_table); /* TestSimpleTableWithEnum */
    case 3: return flatcc_verify_union_table(ud, MyGame_Example2_Monster_verify_table); /* Monster2 */
    case 4: return flatcc_verify_union_table(ud, MyGame_Example_Alt_verify_table); /* Alt */
    default: return flatcc_verify_ok;
    }
}

static int Fantasy_Character_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 2: return flatcc_verify_union_table(ud, Fantasy_Attacker_verify_table); /* MuLan */
    case 8: return flatcc_verify_union_struct(ud, 8, 4); /* Rapunzel */
    case 9: return flatcc_verify_union_struct(ud, 4, 4); /* Belle */
    case 10: return flatcc_verify_union_struct(ud, 4, 4); /* BookFan */
    case 11: return flatcc_verify_union_string(ud); /* Other */
    case 255: return flatcc_verify_union_string(ud); /* Unused */
    default: return flatcc_verify_ok;
    }
}

static inline int InGlobalNamespace_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, InGlobalNamespace_identifier, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, InGlobalNamespace_identifier, 1, 1);
}

static inline int InGlobalNamespace_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, InGlobalNamespace_type_hash, 1, 1);
}

static inline int InGlobalNamespace_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, InGlobalNamespace_type_hash, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 1, 1);
}

static inline int MyGame_Example_Test_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, MyGame_Example_Test_identifier, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, MyGame_Example_Test_identifier, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, MyGame_Example_Test_type_hash, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, MyGame_Example_Test_type_hash, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 4, 2);
}

static inline int MyGame_Example_Vec3_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, MyGame_Example_Vec3_identifier, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, MyGame_Example_Vec3_identifier, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, MyGame_Example_Vec3_type_hash, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, MyGame_Example_Vec3_type_hash, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 32, 16);
}

static inline int MyGame_Example_Ability_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, MyGame_Example_Ability_identifier, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, MyGame_Example_Ability_identifier, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, MyGame_Example_Ability_type_hash, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, MyGame_Example_Ability_type_hash, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 8, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, MyGame_Example_FooBar_identifier, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, MyGame_Example_FooBar_identifier, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, MyGame_Example_FooBar_type_hash, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, MyGame_Example_FooBar_type_hash, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 124, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, Fantasy_Rapunzel_identifier, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, Fantasy_Rapunzel_identifier, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, Fantasy_Rapunzel_type_hash, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, Fantasy_Rapunzel_type_hash, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 8, 4);
}

static inline int Fantasy_BookReader_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, Fantasy_BookReader_identifier, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, Fantasy_BookReader_identifier, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, Fantasy_BookReader_type_hash, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, Fantasy_BookReader_type_hash, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 4, 4);
}

static int MyGame_InParentNamespace_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int MyGame_InParentNamespace_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_InParentNamespace_identifier, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_InParentNamespace_identifier, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_InParentNamespace_type_identifier, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_InParentNamespace_type_identifier, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_InParentNamespace_verify_table);
}

static int MyGame_Example2_Monster_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int MyGame_Example2_Monster_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_Monster_identifier, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_Monster_identifier, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_Monster_type_identifier, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_Monster_type_identifier, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example2_Monster_verify_table);
}

static int MyGame_Example2_Strange_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int MyGame_Example2_Strange_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_Strange_identifier, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_Strange_identifier, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_Strange_type_identifier, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_Strange_type_identifier, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example2_Strange_verify_table);
}

static int MyGame_Example2_S2_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* namespace */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* table */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* struct */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* union */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* int */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example2_S2_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_S2_identifier, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_S2_identifier, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_S2_type_identifier, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_S2_type_identifier, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example2_S2_verify_table);
}

static int MyGame_Example_TestSimpleTableWithEnum_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* color */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* color2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* uc */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* uc2 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestSimpleTableWithEnum_identifier, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestSimpleTableWithEnum_identifier, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestSimpleTableWithEnum_type_identifier, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestSimpleTableWithEnum_type_identifier, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static int MyGame_Example_TestInclude_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* global */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 8, 8) /* incval */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 8, 8) /* incval2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* incval3 */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 8, 8) /* incval4 */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 8, 8) /* incval5 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestInclude_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestInclude_identifier, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestInclude_identifier, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestInclude_type_identifier, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestInclude_type_identifier, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestInclude_verify_table);
}

static int MyGame_Example_Stat_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* id */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 8, 8) /* val */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 2, 2) /* count */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_Stat_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Stat_identifier, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Stat_identifier, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Stat_type_identifier, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Stat_type_identifier, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_Stat_verify_table);
}

static int MyGame_Example_Alt_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_field(td, 0, 0, &MyGame_Example_TestJSONPrefix_verify_table) /* prefix */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 1, 0, &Fantasy_Movie_verify_table) /* movie */)) return ret;
    if ((ret = flatcc_verify_union_vector_field(td, 3, 0, &MyGame_Example_Any_union_verifier) /* manyany */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 4, 0, &MyGame_Example_MultipleKeys_verify_table) /* multik */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 5, 0, 8, 4, INT64_C(536870911)) /* rapunzels */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 6, 0) /* names */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 7, 0, 4, 4, INT64_C(1073741823)) /* samples */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 124, 4) /* fixed_array */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_Alt_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Alt_identifier, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Alt_identifier, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Alt_type_identifier, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Alt_type_identifier, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_Alt_verify_table);
}

static int MyGame_Example_TestJSONPrefix_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_field(td, 0, 0, &MyGame_Example_TestJSONPrefixParsing_verify_table) /* testjsonprefixparsing */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 1, 0, &MyGame_Example_TestJSONPrefixParsing2_verify_table) /* testjsonprefixparsing2 */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 2, 0, &MyGame_Example_TestJSONPrefixParsing3_verify_table) /* testjsonprefixparsing3 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefix_identifier, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefix_identifier, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefix_type_identifier, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefix_type_identifier, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefix_verify_table);
}

static int MyGame_Example_TestJSONPrefixParsing_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* aaaa */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* aaaa12345 */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* bbbb */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 8, 8) /* bbbb1234 */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* cccc */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 8, 8) /* cccc1234 */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 4, 4) /* cccc12345 */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 8, 8) /* dddd1234 */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 4, 4) /* dddd12345 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing_identifier, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing_identifier, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing_type_identifier, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing_type_identifier, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static int MyGame_Example_TestJSONPrefixParsing2_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* aaaa_bbbb_steps */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* aaaa_bbbb_start_ */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing2_identifier, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing2_identifier, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing2_type_identifier, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing2_type_identifier, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static int MyGame_Example_TestJSONPrefixParsing3_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* aaaa_bbbb_steps */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* aaaa_bbbb_start_steps */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing3_identifier, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing3_identifier, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing3_type_identifier, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing3_type_identifier, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static int MyGame_Example_TestBase64_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* data */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 1, 1, INT64_C(4294967295)) /* urldata */)) return ret;
    if ((ret = flatcc_verify_table_as_nested_root(td, 2, 0, 0, 1, MyGame_Example_Monster_verify_table) /* nested */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestBase64_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestBase64_identifier, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestBase64_identifier, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestBase64_type_identifier, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestBase64_type_identifier, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestBase64_verify_table);
}

static int MyGame_Example_MultipleKeys_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* hello */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* world */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 8, 8) /* foobar */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_MultipleKeys_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_MultipleKeys_identifier, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_MultipleKeys_identifier, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_MultipleKeys_type_identifier, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_MultipleKeys_type_identifier, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_MultipleKeys_verify_table);
}

static int MyGame_Example_Monster_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 32, 16) /* pos */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 2, 2) /* mana */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 2, 2) /* hp */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 1) /* name */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 5, 0, 1, 1, INT64_C(4294967295)) /* inventory */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 1, 1) /* color */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 8, 0, &MyGame_Example_Any_union_verifier) /* test */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 9, 0, 4, 2, INT64_C(1073741823)) /* test4 */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 10, 0) /* testarrayofstring */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 11, 0, &MyGame_Example_Monster_verify_table) /* testarrayoftables */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 12, 0, &MyGame_Example_Monster_verify_table) /* enemy */)) return ret;
    if ((ret = flatcc_verify_table_as_nested_root(td, 13, 0, 0, 1, MyGame_Example_Monster_verify_table) /* testnestedflatbuffer */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 14, 0, &MyGame_Example_Stat_verify_table) /* testempty */)) return ret;
    if ((ret = flatcc_verify_field(td, 15, 1, 1) /* testbool */)) return ret;
    if ((ret = flatcc_verify_field(td, 16, 4, 4) /* testhashs32_fnv1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 17, 4, 4) /* testhashu32_fnv1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 18, 8, 8) /* testhashs64_fnv1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 19, 8, 8) /* testhashu64_fnv1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 20, 4, 4) /* testhashs32_fnv1a */)) return ret;
    if ((ret = flatcc_verify_field(td, 21, 4, 4) /* testhashu32_fnv1a */)) return ret;
    if ((ret = flatcc_verify_field(td, 22, 8, 8) /* testhashs64_fnv1a */)) return ret;
    if ((ret = flatcc_verify_field(td, 23, 8, 8) /* testhashu64_fnv1a */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 24, 0, 1, 1, INT64_C(4294967295)) /* testarrayofbools */)) return ret;
    if ((ret = flatcc_verify_field(td, 25, 4, 4) /* testf */)) return ret;
    if ((ret = flatcc_verify_field(td, 26, 4, 4) /* testf2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 27, 4, 4) /* testf3 */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 28, 0) /* testarrayofstring2 */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 29, 0, 8, 4, INT64_C(536870911)) /* testarrayofsortedstruct */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 30, 0, 1, 1, INT64_C(4294967295)) /* flex */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 31, 0, 4, 2, INT64_C(1073741823)) /* test5 */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 32, 0, 8, 8, INT64_C(536870911)) /* vector_of_longs */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 33, 0, 8, 8, INT64_C(536870911)) /* vector_of_doubles */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 34, 0, &MyGame_InParentNamespace_verify_table) /* parent_namespace_test */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 35, 0, &MyGame_Example_TestBase64_verify_table) /* testbase64 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_Monster_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Monster_identifier, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Monster_identifier, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Monster_type_identifier, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Monster_type_identifier, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_Monster_verify_table);
}

static int MyGame_Example_TypeAliases_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* i8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* u8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 2, 2) /* i16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 2, 2) /* u16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* i32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* u32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 8, 8) /* i64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 8, 8) /* u64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 4, 4) /* f32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 9, 8, 8) /* f64 */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 10, 0, 1, 1, INT64_C(4294967295)) /* v8 */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 11, 0, 8, 8, INT64_C(536870911)) /* vf64 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TypeAliases_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TypeAliases_identifier, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TypeAliases_identifier, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TypeAliases_type_identifier, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TypeAliases_type_identifier, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TypeAliases_verify_table);
}

static int Fantasy_Attacker_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* sword_attack_damage */)) return ret;
    return flatcc_verify_ok;
}

static inline int Fantasy_Attacker_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Fantasy_Attacker_identifier, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, Fantasy_Attacker_identifier, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Fantasy_Attacker_type_identifier, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, Fantasy_Attacker_type_identifier, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &Fantasy_Attacker_verify_table);
}

static int Fantasy_Movie_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_union_field(td, 1, 0, &Fantasy_Character_union_verifier) /* main_character */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 3, 0, &Fantasy_Character_union_verifier) /* antagonist */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 5, 0, &Fantasy_Character_union_verifier) /* side_kick */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 7, 0, &Fantasy_Character_union_verifier) /* cameo */)) return ret;
    if ((ret = flatcc_verify_union_vector_field(td, 9, 0, &Fantasy_Character_union_verifier) /* characters */)) return ret;
    return flatcc_verify_ok;
}

static inline int Fantasy_Movie_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Fantasy_Movie_identifier, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, Fantasy_Movie_identifier, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Fantasy_Movie_type_identifier, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, Fantasy_Movie_type_identifier, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &Fantasy_Movie_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MONSTER_TEST_VERIFIER_H */
