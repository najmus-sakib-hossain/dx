#ifndef INCLUDE_TEST2_READER_H
#define INCLUDE_TEST2_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

typedef struct MyGame_OtherNameSpace_Unused MyGame_OtherNameSpace_Unused_t;
typedef const MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_struct_t;
typedef MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_mutable_struct_t;
typedef const MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_vec_t;
typedef MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused_mutable_vec_t;

#ifndef MyGame_OtherNameSpace_Unused_file_identifier
#define MyGame_OtherNameSpace_Unused_file_identifier 0
#endif
/* deprecated, use MyGame_OtherNameSpace_Unused_file_identifier */
#ifndef MyGame_OtherNameSpace_Unused_identifier
#define MyGame_OtherNameSpace_Unused_identifier 0
#endif
#define MyGame_OtherNameSpace_Unused_type_hash ((flatbuffers_thash_t)0x14581d4)
#define MyGame_OtherNameSpace_Unused_type_identifier "\xd4\x81\x45\x01"
#ifndef MyGame_OtherNameSpace_Unused_file_extension
#define MyGame_OtherNameSpace_Unused_file_extension "bin"
#endif

typedef int64_t MyGame_OtherNameSpace_FromInclude_enum_t;
__flatbuffers_define_integer_type(MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, 64)
#define MyGame_OtherNameSpace_FromInclude_IncludeVal ((MyGame_OtherNameSpace_FromInclude_enum_t)INT64_C(0))
#define MyGame_OtherNameSpace_FromInclude_Foo ((MyGame_OtherNameSpace_FromInclude_enum_t)INT64_C(17))

static inline const char *MyGame_OtherNameSpace_FromInclude_name(MyGame_OtherNameSpace_FromInclude_enum_t value)
{
    switch (value) {
    case MyGame_OtherNameSpace_FromInclude_IncludeVal: return "IncludeVal";
    case MyGame_OtherNameSpace_FromInclude_Foo: return "Foo";
    default: return "";
    }
}

static inline int MyGame_OtherNameSpace_FromInclude_is_known_value(MyGame_OtherNameSpace_FromInclude_enum_t value)
{
    switch (value) {
    case MyGame_OtherNameSpace_FromInclude_IncludeVal: return 1;
    case MyGame_OtherNameSpace_FromInclude_Foo: return 1;
    default: return 0;
    }
}


struct MyGame_OtherNameSpace_Unused {
    alignas(1) int8_t unused;
};
static_assert(sizeof(MyGame_OtherNameSpace_Unused_t) == 1, "struct size mismatch");

static inline const MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused__const_ptr_add(const MyGame_OtherNameSpace_Unused_t *p, size_t i) { return p + i; }
static inline MyGame_OtherNameSpace_Unused_t *MyGame_OtherNameSpace_Unused__ptr_add(MyGame_OtherNameSpace_Unused_t *p, size_t i) { return p + i; }
static inline MyGame_OtherNameSpace_Unused_struct_t MyGame_OtherNameSpace_Unused_vec_at(MyGame_OtherNameSpace_Unused_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_OtherNameSpace_Unused__size(void) { return 1; }
static inline size_t MyGame_OtherNameSpace_Unused_vec_len(MyGame_OtherNameSpace_Unused_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_OtherNameSpace_Unused)

__flatbuffers_define_struct_scalar_field(MyGame_OtherNameSpace_Unused, unused, flatbuffers_int8, int8_t)



#include "flatcc/flatcc_epilogue.h"
#endif /* INCLUDE_TEST2_READER_H */
