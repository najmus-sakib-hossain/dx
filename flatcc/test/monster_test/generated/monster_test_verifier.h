#ifndef MONSTER_TEST_VERIFIER_H
#define MONSTER_TEST_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef MONSTER_TEST_READER_H
#include "monster_test_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#ifndef INCLUDE_TEST1_VERIFIER_H
#include "include_test1_verifier.h"
#endif
#ifndef ATTRIBUTES_VERIFIER_H
#include "attributes_verifier.h"
#endif
#include "flatcc/flatcc_prologue.h"

static int MyGame_InParentNamespace_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example2_Monster_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example2_Strange_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example2_S2_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestSimpleTableWithEnum_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestInclude_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_Stat_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_Alt_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestJSONPrefix_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestJSONPrefixParsing_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestJSONPrefixParsing2_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestJSONPrefixParsing3_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TestBase64_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_MultipleKeys_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_Monster_verify_table(flatcc_table_verifier_descriptor_t *td);
static int MyGame_Example_TypeAliases_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Fantasy_Attacker_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Fantasy_Movie_verify_table(flatcc_table_verifier_descriptor_t *td);

static int MyGame_Example_Foo_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, MyGame_InParentNamespace_verify_table); /* InParentNamespace */
    default: return flatcc_verify_ok;
    }
}

static int MyGame_Example2_SubSystem_SubSystemA_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, MyGame_Example2_Strange_verify_table); /* Strange */
    default: return flatcc_verify_ok;
    }
}

static int MyGame_Example2_SubSystem_SubSystemB_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, MyGame_Example2_Strange_verify_table); /* Strange */
    default: return flatcc_verify_ok;
    }
}

static int MyGame_Example_Any_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, MyGame_Example_Monster_verify_table); /* Monster */
    case 2: return flatcc_verify_union_table(ud, MyGame_Example_TestSimpleTableWithEnum_verify_table); /* TestSimpleTableWithEnum */
    case 3: return flatcc_verify_union_table(ud, MyGame_Example2_Monster_verify_table); /* Monster2 */
    case 4: return flatcc_verify_union_table(ud, MyGame_Example_Alt_verify_table); /* Alt */
    default: return flatcc_verify_ok;
    }
}

static int Fantasy_Character_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 2: return flatcc_verify_union_table(ud, Fantasy_Attacker_verify_table); /* MuLan */
    case 8: return flatcc_verify_union_struct(ud, 8, 4); /* Rapunzel */
    case 9: return flatcc_verify_union_struct(ud, 4, 4); /* Belle */
    case 10: return flatcc_verify_union_struct(ud, 4, 4); /* BookFan */
    case 11: return flatcc_verify_union_string(ud); /* Other */
    case 255: return flatcc_verify_union_string(ud); /* Unused */
    default: return flatcc_verify_ok;
    }
}

static inline int InGlobalNamespace_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, InGlobalNamespace_identifier, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, InGlobalNamespace_identifier, 1, 1);
}

static inline int InGlobalNamespace_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, InGlobalNamespace_type_hash, 1, 1);
}

static inline int InGlobalNamespace_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, InGlobalNamespace_type_hash, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 1, 1);
}

static inline int InGlobalNamespace_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 1, 1);
}

static inline int MyGame_Example_Test_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, MyGame_Example_Test_identifier, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, MyGame_Example_Test_identifier, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, MyGame_Example_Test_type_hash, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, MyGame_Example_Test_type_hash, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 4, 2);
}

static inline int MyGame_Example_Test_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 4, 2);
}

static inline int MyGame_Example_Vec3_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, MyGame_Example_Vec3_identifier, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, MyGame_Example_Vec3_identifier, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, MyGame_Example_Vec3_type_hash, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, MyGame_Example_Vec3_type_hash, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 32, 16);
}

static inline int MyGame_Example_Vec3_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 32, 16);
}

static inline int MyGame_Example_Ability_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, MyGame_Example_Ability_identifier, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, MyGame_Example_Ability_identifier, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, MyGame_Example_Ability_type_hash, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, MyGame_Example_Ability_type_hash, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 8, 4);
}

static inline int MyGame_Example_Ability_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 8, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, MyGame_Example_FooBar_identifier, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, MyGame_Example_FooBar_identifier, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, MyGame_Example_FooBar_type_hash, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, MyGame_Example_FooBar_type_hash, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 124, 4);
}

static inline int MyGame_Example_FooBar_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 124, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, Fantasy_Rapunzel_identifier, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, Fantasy_Rapunzel_identifier, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, Fantasy_Rapunzel_type_hash, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, Fantasy_Rapunzel_type_hash, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 8, 4);
}

static inline int Fantasy_Rapunzel_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 8, 4);
}

static inline int Fantasy_BookReader_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, Fantasy_BookReader_identifier, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, Fantasy_BookReader_identifier, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, Fantasy_BookReader_type_hash, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, Fantasy_BookReader_type_hash, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 4, 4);
}

static inline int Fantasy_BookReader_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 4, 4);
}

static int MyGame_InParentNamespace_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int MyGame_InParentNamespace_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_InParentNamespace_identifier, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_InParentNamespace_identifier, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_InParentNamespace_type_identifier, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_InParentNamespace_type_identifier, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_InParentNamespace_verify_table);
}

static inline int MyGame_InParentNamespace_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_InParentNamespace_verify_table);
}

static int MyGame_Example2_Monster_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int MyGame_Example2_Monster_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_Monster_identifier, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_Monster_identifier, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_Monster_type_identifier, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_Monster_type_identifier, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example2_Monster_verify_table);
}

static inline int MyGame_Example2_Monster_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example2_Monster_verify_table);
}

static int MyGame_Example2_Strange_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int MyGame_Example2_Strange_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_Strange_identifier, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_Strange_identifier, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_Strange_type_identifier, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_Strange_type_identifier, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example2_Strange_verify_table);
}

static inline int MyGame_Example2_Strange_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example2_Strange_verify_table);
}

static int MyGame_Example2_S2_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* namespace */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* table */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* struct */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* union */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* int */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example2_S2_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_S2_identifier, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_S2_identifier, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example2_S2_type_identifier, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example2_S2_type_identifier, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example2_S2_verify_table);
}

static inline int MyGame_Example2_S2_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example2_S2_verify_table);
}

static int MyGame_Example_TestSimpleTableWithEnum_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* color */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* color2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* uc */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* uc2 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestSimpleTableWithEnum_identifier, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestSimpleTableWithEnum_identifier, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestSimpleTableWithEnum_type_identifier, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestSimpleTableWithEnum_type_identifier, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static inline int MyGame_Example_TestSimpleTableWithEnum_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestSimpleTableWithEnum_verify_table);
}

static int MyGame_Example_TestInclude_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* global */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 8, 8) /* incval */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 8, 8) /* incval2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* incval3 */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 8, 8) /* incval4 */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 8, 8) /* incval5 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestInclude_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestInclude_identifier, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestInclude_identifier, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestInclude_type_identifier, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestInclude_type_identifier, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestInclude_verify_table);
}

static inline int MyGame_Example_TestInclude_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestInclude_verify_table);
}

static int MyGame_Example_Stat_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* id */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 8, 8) /* val */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 2, 2) /* count */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_Stat_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Stat_identifier, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Stat_identifier, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Stat_type_identifier, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Stat_type_identifier, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_Stat_verify_table);
}

static inline int MyGame_Example_Stat_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_Stat_verify_table);
}

static int MyGame_Example_Alt_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_field(td, 0, 0, &MyGame_Example_TestJSONPrefix_verify_table) /* prefix */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 1, 0, &Fantasy_Movie_verify_table) /* movie */)) return ret;
    if ((ret = flatcc_verify_union_vector_field(td, 3, 0, &MyGame_Example_Any_union_verifier) /* manyany */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 4, 0, &MyGame_Example_MultipleKeys_verify_table) /* multik */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 5, 0, 8, 4, INT64_C(536870911)) /* rapunzels */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 6, 0) /* names */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 7, 0, 4, 4, INT64_C(1073741823)) /* samples */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 124, 4) /* fixed_array */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_Alt_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Alt_identifier, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Alt_identifier, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Alt_type_identifier, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Alt_type_identifier, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_Alt_verify_table);
}

static inline int MyGame_Example_Alt_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_Alt_verify_table);
}

static int MyGame_Example_TestJSONPrefix_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_field(td, 0, 0, &MyGame_Example_TestJSONPrefixParsing_verify_table) /* testjsonprefixparsing */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 1, 0, &MyGame_Example_TestJSONPrefixParsing2_verify_table) /* testjsonprefixparsing2 */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 2, 0, &MyGame_Example_TestJSONPrefixParsing3_verify_table) /* testjsonprefixparsing3 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefix_identifier, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefix_identifier, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefix_type_identifier, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefix_type_identifier, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefix_verify_table);
}

static inline int MyGame_Example_TestJSONPrefix_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefix_verify_table);
}

static int MyGame_Example_TestJSONPrefixParsing_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* aaaa */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* aaaa12345 */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* bbbb */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 8, 8) /* bbbb1234 */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* cccc */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 8, 8) /* cccc1234 */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 4, 4) /* cccc12345 */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 8, 8) /* dddd1234 */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 4, 4) /* dddd12345 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing_identifier, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing_identifier, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing_type_identifier, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing_type_identifier, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing_verify_table);
}

static int MyGame_Example_TestJSONPrefixParsing2_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* aaaa_bbbb_steps */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* aaaa_bbbb_start_ */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing2_identifier, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing2_identifier, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing2_type_identifier, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing2_type_identifier, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing2_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing2_verify_table);
}

static int MyGame_Example_TestJSONPrefixParsing3_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* aaaa_bbbb_steps */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* aaaa_bbbb_start_steps */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing3_identifier, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing3_identifier, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing3_type_identifier, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestJSONPrefixParsing3_type_identifier, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static inline int MyGame_Example_TestJSONPrefixParsing3_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestJSONPrefixParsing3_verify_table);
}

static int MyGame_Example_TestBase64_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* data */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 1, 1, INT64_C(4294967295)) /* urldata */)) return ret;
    if ((ret = flatcc_verify_table_as_nested_root(td, 2, 0, 0, 1, MyGame_Example_Monster_verify_table) /* nested */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TestBase64_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestBase64_identifier, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestBase64_identifier, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TestBase64_type_identifier, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TestBase64_type_identifier, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TestBase64_verify_table);
}

static inline int MyGame_Example_TestBase64_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TestBase64_verify_table);
}

static int MyGame_Example_MultipleKeys_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* hello */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* world */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 8, 8) /* foobar */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_MultipleKeys_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_MultipleKeys_identifier, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_MultipleKeys_identifier, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_MultipleKeys_type_identifier, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_MultipleKeys_type_identifier, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_MultipleKeys_verify_table);
}

static inline int MyGame_Example_MultipleKeys_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_MultipleKeys_verify_table);
}

static int MyGame_Example_Monster_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 32, 16) /* pos */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 2, 2) /* mana */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 2, 2) /* hp */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 1) /* name */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 5, 0, 1, 1, INT64_C(4294967295)) /* inventory */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 1, 1) /* color */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 8, 0, &MyGame_Example_Any_union_verifier) /* test */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 9, 0, 4, 2, INT64_C(1073741823)) /* test4 */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 10, 0) /* testarrayofstring */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 11, 0, &MyGame_Example_Monster_verify_table) /* testarrayoftables */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 12, 0, &MyGame_Example_Monster_verify_table) /* enemy */)) return ret;
    if ((ret = flatcc_verify_table_as_nested_root(td, 13, 0, 0, 1, MyGame_Example_Monster_verify_table) /* testnestedflatbuffer */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 14, 0, &MyGame_Example_Stat_verify_table) /* testempty */)) return ret;
    if ((ret = flatcc_verify_field(td, 15, 1, 1) /* testbool */)) return ret;
    if ((ret = flatcc_verify_field(td, 16, 4, 4) /* testhashs32_fnv1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 17, 4, 4) /* testhashu32_fnv1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 18, 8, 8) /* testhashs64_fnv1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 19, 8, 8) /* testhashu64_fnv1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 20, 4, 4) /* testhashs32_fnv1a */)) return ret;
    if ((ret = flatcc_verify_field(td, 21, 4, 4) /* testhashu32_fnv1a */)) return ret;
    if ((ret = flatcc_verify_field(td, 22, 8, 8) /* testhashs64_fnv1a */)) return ret;
    if ((ret = flatcc_verify_field(td, 23, 8, 8) /* testhashu64_fnv1a */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 24, 0, 1, 1, INT64_C(4294967295)) /* testarrayofbools */)) return ret;
    if ((ret = flatcc_verify_field(td, 25, 4, 4) /* testf */)) return ret;
    if ((ret = flatcc_verify_field(td, 26, 4, 4) /* testf2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 27, 4, 4) /* testf3 */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 28, 0) /* testarrayofstring2 */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 29, 0, 8, 4, INT64_C(536870911)) /* testarrayofsortedstruct */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 30, 0, 1, 1, INT64_C(4294967295)) /* flex */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 31, 0, 4, 2, INT64_C(1073741823)) /* test5 */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 32, 0, 8, 8, INT64_C(536870911)) /* vector_of_longs */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 33, 0, 8, 8, INT64_C(536870911)) /* vector_of_doubles */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 34, 0, &MyGame_InParentNamespace_verify_table) /* parent_namespace_test */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 35, 0, &MyGame_Example_TestBase64_verify_table) /* testbase64 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_Monster_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Monster_identifier, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Monster_identifier, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_Monster_type_identifier, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_Monster_type_identifier, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_Monster_verify_table);
}

static inline int MyGame_Example_Monster_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_Monster_verify_table);
}

static int MyGame_Example_TypeAliases_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* i8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* u8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 2, 2) /* i16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 2, 2) /* u16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* i32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* u32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 8, 8) /* i64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 8, 8) /* u64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 4, 4) /* f32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 9, 8, 8) /* f64 */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 10, 0, 1, 1, INT64_C(4294967295)) /* v8 */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 11, 0, 8, 8, INT64_C(536870911)) /* vf64 */)) return ret;
    return flatcc_verify_ok;
}

static inline int MyGame_Example_TypeAliases_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TypeAliases_identifier, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TypeAliases_identifier, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, MyGame_Example_TypeAliases_type_identifier, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, MyGame_Example_TypeAliases_type_identifier, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &MyGame_Example_TypeAliases_verify_table);
}

static inline int MyGame_Example_TypeAliases_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &MyGame_Example_TypeAliases_verify_table);
}

static int Fantasy_Attacker_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* sword_attack_damage */)) return ret;
    return flatcc_verify_ok;
}

static inline int Fantasy_Attacker_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Fantasy_Attacker_identifier, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, Fantasy_Attacker_identifier, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Fantasy_Attacker_type_identifier, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, Fantasy_Attacker_type_identifier, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Fantasy_Attacker_verify_table);
}

static inline int Fantasy_Attacker_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &Fantasy_Attacker_verify_table);
}

static int Fantasy_Movie_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_union_field(td, 1, 0, &Fantasy_Character_union_verifier) /* main_character */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 3, 0, &Fantasy_Character_union_verifier) /* antagonist */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 5, 0, &Fantasy_Character_union_verifier) /* side_kick */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 7, 0, &Fantasy_Character_union_verifier) /* cameo */)) return ret;
    if ((ret = flatcc_verify_union_vector_field(td, 9, 0, &Fantasy_Character_union_verifier) /* characters */)) return ret;
    return flatcc_verify_ok;
}

static inline int Fantasy_Movie_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Fantasy_Movie_identifier, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, Fantasy_Movie_identifier, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Fantasy_Movie_type_identifier, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, Fantasy_Movie_type_identifier, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Fantasy_Movie_verify_table);
}

static inline int Fantasy_Movie_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &Fantasy_Movie_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MONSTER_TEST_VERIFIER_H */
