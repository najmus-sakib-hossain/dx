#ifndef MONSTER_TEST_READER_H
#define MONSTER_TEST_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef INCLUDE_TEST1_READER_H
#include "include_test1_reader.h"
#endif
#ifndef ATTRIBUTES_READER_H
#include "attributes_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "MONS"
#undef flatbuffers_extension
#define flatbuffers_extension "mon"

typedef struct InGlobalNamespace InGlobalNamespace_t;
typedef const InGlobalNamespace_t *InGlobalNamespace_struct_t;
typedef InGlobalNamespace_t *InGlobalNamespace_mutable_struct_t;
typedef const InGlobalNamespace_t *InGlobalNamespace_vec_t;
typedef InGlobalNamespace_t *InGlobalNamespace_mutable_vec_t;
typedef struct MyGame_Example_Test MyGame_Example_Test_t;
typedef const MyGame_Example_Test_t *MyGame_Example_Test_struct_t;
typedef MyGame_Example_Test_t *MyGame_Example_Test_mutable_struct_t;
typedef const MyGame_Example_Test_t *MyGame_Example_Test_vec_t;
typedef MyGame_Example_Test_t *MyGame_Example_Test_mutable_vec_t;
typedef struct MyGame_Example_Vec3 MyGame_Example_Vec3_t;
typedef const MyGame_Example_Vec3_t *MyGame_Example_Vec3_struct_t;
typedef MyGame_Example_Vec3_t *MyGame_Example_Vec3_mutable_struct_t;
typedef const MyGame_Example_Vec3_t *MyGame_Example_Vec3_vec_t;
typedef MyGame_Example_Vec3_t *MyGame_Example_Vec3_mutable_vec_t;
typedef struct MyGame_Example_Ability MyGame_Example_Ability_t;
typedef const MyGame_Example_Ability_t *MyGame_Example_Ability_struct_t;
typedef MyGame_Example_Ability_t *MyGame_Example_Ability_mutable_struct_t;
typedef const MyGame_Example_Ability_t *MyGame_Example_Ability_vec_t;
typedef MyGame_Example_Ability_t *MyGame_Example_Ability_mutable_vec_t;
typedef struct MyGame_Example_FooBar MyGame_Example_FooBar_t;
typedef const MyGame_Example_FooBar_t *MyGame_Example_FooBar_struct_t;
typedef MyGame_Example_FooBar_t *MyGame_Example_FooBar_mutable_struct_t;
typedef const MyGame_Example_FooBar_t *MyGame_Example_FooBar_vec_t;
typedef MyGame_Example_FooBar_t *MyGame_Example_FooBar_mutable_vec_t;
typedef struct Fantasy_Rapunzel Fantasy_Rapunzel_t;
typedef const Fantasy_Rapunzel_t *Fantasy_Rapunzel_struct_t;
typedef Fantasy_Rapunzel_t *Fantasy_Rapunzel_mutable_struct_t;
typedef const Fantasy_Rapunzel_t *Fantasy_Rapunzel_vec_t;
typedef Fantasy_Rapunzel_t *Fantasy_Rapunzel_mutable_vec_t;
typedef struct Fantasy_BookReader Fantasy_BookReader_t;
typedef const Fantasy_BookReader_t *Fantasy_BookReader_struct_t;
typedef Fantasy_BookReader_t *Fantasy_BookReader_mutable_struct_t;
typedef const Fantasy_BookReader_t *Fantasy_BookReader_vec_t;
typedef Fantasy_BookReader_t *Fantasy_BookReader_mutable_vec_t;

typedef const struct MyGame_InParentNamespace_table *MyGame_InParentNamespace_table_t;
typedef struct MyGame_InParentNamespace_table *MyGame_InParentNamespace_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_InParentNamespace_vec_t;
typedef flatbuffers_uoffset_t *MyGame_InParentNamespace_mutable_vec_t;
typedef const struct MyGame_Example2_Monster_table *MyGame_Example2_Monster_table_t;
typedef struct MyGame_Example2_Monster_table *MyGame_Example2_Monster_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example2_Monster_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example2_Monster_mutable_vec_t;
typedef const struct MyGame_Example2_Strange_table *MyGame_Example2_Strange_table_t;
typedef struct MyGame_Example2_Strange_table *MyGame_Example2_Strange_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example2_Strange_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example2_Strange_mutable_vec_t;
typedef const struct MyGame_Example2_S2_table *MyGame_Example2_S2_table_t;
typedef struct MyGame_Example2_S2_table *MyGame_Example2_S2_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example2_S2_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example2_S2_mutable_vec_t;
typedef const struct MyGame_Example_TestSimpleTableWithEnum_table *MyGame_Example_TestSimpleTableWithEnum_table_t;
typedef struct MyGame_Example_TestSimpleTableWithEnum_table *MyGame_Example_TestSimpleTableWithEnum_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestSimpleTableWithEnum_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestSimpleTableWithEnum_mutable_vec_t;
typedef const struct MyGame_Example_TestInclude_table *MyGame_Example_TestInclude_table_t;
typedef struct MyGame_Example_TestInclude_table *MyGame_Example_TestInclude_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestInclude_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestInclude_mutable_vec_t;
typedef const struct MyGame_Example_Stat_table *MyGame_Example_Stat_table_t;
typedef struct MyGame_Example_Stat_table *MyGame_Example_Stat_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_Stat_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_Stat_mutable_vec_t;
typedef const struct MyGame_Example_Alt_table *MyGame_Example_Alt_table_t;
typedef struct MyGame_Example_Alt_table *MyGame_Example_Alt_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_Alt_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_Alt_mutable_vec_t;
typedef const struct MyGame_Example_TestJSONPrefix_table *MyGame_Example_TestJSONPrefix_table_t;
typedef struct MyGame_Example_TestJSONPrefix_table *MyGame_Example_TestJSONPrefix_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefix_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefix_mutable_vec_t;
typedef const struct MyGame_Example_TestJSONPrefixParsing_table *MyGame_Example_TestJSONPrefixParsing_table_t;
typedef struct MyGame_Example_TestJSONPrefixParsing_table *MyGame_Example_TestJSONPrefixParsing_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing_mutable_vec_t;
typedef const struct MyGame_Example_TestJSONPrefixParsing2_table *MyGame_Example_TestJSONPrefixParsing2_table_t;
typedef struct MyGame_Example_TestJSONPrefixParsing2_table *MyGame_Example_TestJSONPrefixParsing2_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing2_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing2_mutable_vec_t;
typedef const struct MyGame_Example_TestJSONPrefixParsing3_table *MyGame_Example_TestJSONPrefixParsing3_table_t;
typedef struct MyGame_Example_TestJSONPrefixParsing3_table *MyGame_Example_TestJSONPrefixParsing3_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing3_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestJSONPrefixParsing3_mutable_vec_t;
typedef const struct MyGame_Example_TestBase64_table *MyGame_Example_TestBase64_table_t;
typedef struct MyGame_Example_TestBase64_table *MyGame_Example_TestBase64_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TestBase64_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TestBase64_mutable_vec_t;
typedef const struct MyGame_Example_MultipleKeys_table *MyGame_Example_MultipleKeys_table_t;
typedef struct MyGame_Example_MultipleKeys_table *MyGame_Example_MultipleKeys_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_MultipleKeys_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_MultipleKeys_mutable_vec_t;
typedef const struct MyGame_Example_Monster_table *MyGame_Example_Monster_table_t;
typedef struct MyGame_Example_Monster_table *MyGame_Example_Monster_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_Monster_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_Monster_mutable_vec_t;
typedef const struct MyGame_Example_TypeAliases_table *MyGame_Example_TypeAliases_table_t;
typedef struct MyGame_Example_TypeAliases_table *MyGame_Example_TypeAliases_mutable_table_t;
typedef const flatbuffers_uoffset_t *MyGame_Example_TypeAliases_vec_t;
typedef flatbuffers_uoffset_t *MyGame_Example_TypeAliases_mutable_vec_t;
typedef const struct Fantasy_Attacker_table *Fantasy_Attacker_table_t;
typedef struct Fantasy_Attacker_table *Fantasy_Attacker_mutable_table_t;
typedef const flatbuffers_uoffset_t *Fantasy_Attacker_vec_t;
typedef flatbuffers_uoffset_t *Fantasy_Attacker_mutable_vec_t;
typedef const struct Fantasy_Movie_table *Fantasy_Movie_table_t;
typedef struct Fantasy_Movie_table *Fantasy_Movie_mutable_table_t;
typedef const flatbuffers_uoffset_t *Fantasy_Movie_vec_t;
typedef flatbuffers_uoffset_t *Fantasy_Movie_mutable_vec_t;
#ifndef InGlobalNamespace_file_identifier
#define InGlobalNamespace_file_identifier "MONS"
#endif
/* deprecated, use InGlobalNamespace_file_identifier */
#ifndef InGlobalNamespace_identifier
#define InGlobalNamespace_identifier "MONS"
#endif
#define InGlobalNamespace_type_hash ((flatbuffers_thash_t)0xc8aa570c)
#define InGlobalNamespace_type_identifier "\x0c\x57\xaa\xc8"
#ifndef InGlobalNamespace_file_extension
#define InGlobalNamespace_file_extension "mon"
#endif
#ifndef MyGame_InParentNamespace_file_identifier
#define MyGame_InParentNamespace_file_identifier "MONS"
#endif
/* deprecated, use MyGame_InParentNamespace_file_identifier */
#ifndef MyGame_InParentNamespace_identifier
#define MyGame_InParentNamespace_identifier "MONS"
#endif
#define MyGame_InParentNamespace_type_hash ((flatbuffers_thash_t)0x56397375)
#define MyGame_InParentNamespace_type_identifier "\x75\x73\x39\x56"
#ifndef MyGame_InParentNamespace_file_extension
#define MyGame_InParentNamespace_file_extension "mon"
#endif
#ifndef MyGame_Example2_Monster_file_identifier
#define MyGame_Example2_Monster_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example2_Monster_file_identifier */
#ifndef MyGame_Example2_Monster_identifier
#define MyGame_Example2_Monster_identifier "MONS"
#endif
#define MyGame_Example2_Monster_type_hash ((flatbuffers_thash_t)0xac73a199)
#define MyGame_Example2_Monster_type_identifier "\x99\xa1\x73\xac"
#ifndef MyGame_Example2_Monster_file_extension
#define MyGame_Example2_Monster_file_extension "mon"
#endif
#ifndef MyGame_Example2_Strange_file_identifier
#define MyGame_Example2_Strange_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example2_Strange_file_identifier */
#ifndef MyGame_Example2_Strange_identifier
#define MyGame_Example2_Strange_identifier "MONS"
#endif
#define MyGame_Example2_Strange_type_hash ((flatbuffers_thash_t)0x7a38a577)
#define MyGame_Example2_Strange_type_identifier "\x77\xa5\x38\x7a"
#ifndef MyGame_Example2_Strange_file_extension
#define MyGame_Example2_Strange_file_extension "mon"
#endif
#ifndef MyGame_Example2_S2_file_identifier
#define MyGame_Example2_S2_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example2_S2_file_identifier */
#ifndef MyGame_Example2_S2_identifier
#define MyGame_Example2_S2_identifier "MONS"
#endif
#define MyGame_Example2_S2_type_hash ((flatbuffers_thash_t)0xea308cd8)
#define MyGame_Example2_S2_type_identifier "\xd8\x8c\x30\xea"
#ifndef MyGame_Example2_S2_file_extension
#define MyGame_Example2_S2_file_extension "mon"
#endif
#ifndef MyGame_Example_Test_file_identifier
#define MyGame_Example_Test_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Test_file_identifier */
#ifndef MyGame_Example_Test_identifier
#define MyGame_Example_Test_identifier "MONS"
#endif
#define MyGame_Example_Test_type_hash ((flatbuffers_thash_t)0xad678775)
#define MyGame_Example_Test_type_identifier "\x75\x87\x67\xad"
#ifndef MyGame_Example_Test_file_extension
#define MyGame_Example_Test_file_extension "mon"
#endif
#ifndef MyGame_Example_TestSimpleTableWithEnum_file_identifier
#define MyGame_Example_TestSimpleTableWithEnum_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestSimpleTableWithEnum_file_identifier */
#ifndef MyGame_Example_TestSimpleTableWithEnum_identifier
#define MyGame_Example_TestSimpleTableWithEnum_identifier "MONS"
#endif
#define MyGame_Example_TestSimpleTableWithEnum_type_hash ((flatbuffers_thash_t)0x133a7b70)
#define MyGame_Example_TestSimpleTableWithEnum_type_identifier "\x70\x7b\x3a\x13"
#ifndef MyGame_Example_TestSimpleTableWithEnum_file_extension
#define MyGame_Example_TestSimpleTableWithEnum_file_extension "mon"
#endif
#ifndef MyGame_Example_TestInclude_file_identifier
#define MyGame_Example_TestInclude_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestInclude_file_identifier */
#ifndef MyGame_Example_TestInclude_identifier
#define MyGame_Example_TestInclude_identifier "MONS"
#endif
#define MyGame_Example_TestInclude_type_hash ((flatbuffers_thash_t)0x940b1877)
#define MyGame_Example_TestInclude_type_identifier "\x77\x18\x0b\x94"
#ifndef MyGame_Example_TestInclude_file_extension
#define MyGame_Example_TestInclude_file_extension "mon"
#endif
#ifndef MyGame_Example_Vec3_file_identifier
#define MyGame_Example_Vec3_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Vec3_file_identifier */
#ifndef MyGame_Example_Vec3_identifier
#define MyGame_Example_Vec3_identifier "MONS"
#endif
#define MyGame_Example_Vec3_type_hash ((flatbuffers_thash_t)0xa8f53ed2)
#define MyGame_Example_Vec3_type_identifier "\xd2\x3e\xf5\xa8"
#ifndef MyGame_Example_Vec3_file_extension
#define MyGame_Example_Vec3_file_extension "mon"
#endif
#ifndef MyGame_Example_Ability_file_identifier
#define MyGame_Example_Ability_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Ability_file_identifier */
#ifndef MyGame_Example_Ability_identifier
#define MyGame_Example_Ability_identifier "MONS"
#endif
#define MyGame_Example_Ability_type_hash ((flatbuffers_thash_t)0x4453ea1)
#define MyGame_Example_Ability_type_identifier "\xa1\x3e\x45\x04"
#ifndef MyGame_Example_Ability_file_extension
#define MyGame_Example_Ability_file_extension "mon"
#endif
#ifndef MyGame_Example_Stat_file_identifier
#define MyGame_Example_Stat_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Stat_file_identifier */
#ifndef MyGame_Example_Stat_identifier
#define MyGame_Example_Stat_identifier "MONS"
#endif
#define MyGame_Example_Stat_type_hash ((flatbuffers_thash_t)0x4cf7b3a7)
#define MyGame_Example_Stat_type_identifier "\xa7\xb3\xf7\x4c"
#ifndef MyGame_Example_Stat_file_extension
#define MyGame_Example_Stat_file_extension "mon"
#endif
#ifndef MyGame_Example_FooBar_file_identifier
#define MyGame_Example_FooBar_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_FooBar_file_identifier */
#ifndef MyGame_Example_FooBar_identifier
#define MyGame_Example_FooBar_identifier "MONS"
#endif
#define MyGame_Example_FooBar_type_hash ((flatbuffers_thash_t)0xcbea3458)
#define MyGame_Example_FooBar_type_identifier "\x58\x34\xea\xcb"
#ifndef MyGame_Example_FooBar_file_extension
#define MyGame_Example_FooBar_file_extension "mon"
#endif
#ifndef MyGame_Example_Alt_file_identifier
#define MyGame_Example_Alt_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Alt_file_identifier */
#ifndef MyGame_Example_Alt_identifier
#define MyGame_Example_Alt_identifier "MONS"
#endif
#define MyGame_Example_Alt_type_hash ((flatbuffers_thash_t)0x5614a58c)
#define MyGame_Example_Alt_type_identifier "\x8c\xa5\x14\x56"
#ifndef MyGame_Example_Alt_file_extension
#define MyGame_Example_Alt_file_extension "mon"
#endif
#ifndef MyGame_Example_TestJSONPrefix_file_identifier
#define MyGame_Example_TestJSONPrefix_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestJSONPrefix_file_identifier */
#ifndef MyGame_Example_TestJSONPrefix_identifier
#define MyGame_Example_TestJSONPrefix_identifier "MONS"
#endif
#define MyGame_Example_TestJSONPrefix_type_hash ((flatbuffers_thash_t)0xd8086267)
#define MyGame_Example_TestJSONPrefix_type_identifier "\x67\x62\x08\xd8"
#ifndef MyGame_Example_TestJSONPrefix_file_extension
#define MyGame_Example_TestJSONPrefix_file_extension "mon"
#endif
#ifndef MyGame_Example_TestJSONPrefixParsing_file_identifier
#define MyGame_Example_TestJSONPrefixParsing_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestJSONPrefixParsing_file_identifier */
#ifndef MyGame_Example_TestJSONPrefixParsing_identifier
#define MyGame_Example_TestJSONPrefixParsing_identifier "MONS"
#endif
#define MyGame_Example_TestJSONPrefixParsing_type_hash ((flatbuffers_thash_t)0xebe07a7d)
#define MyGame_Example_TestJSONPrefixParsing_type_identifier "\x7d\x7a\xe0\xeb"
#ifndef MyGame_Example_TestJSONPrefixParsing_file_extension
#define MyGame_Example_TestJSONPrefixParsing_file_extension "mon"
#endif
#ifndef MyGame_Example_TestJSONPrefixParsing2_file_identifier
#define MyGame_Example_TestJSONPrefixParsing2_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestJSONPrefixParsing2_file_identifier */
#ifndef MyGame_Example_TestJSONPrefixParsing2_identifier
#define MyGame_Example_TestJSONPrefixParsing2_identifier "MONS"
#endif
#define MyGame_Example_TestJSONPrefixParsing2_type_hash ((flatbuffers_thash_t)0xa1608a5d)
#define MyGame_Example_TestJSONPrefixParsing2_type_identifier "\x5d\x8a\x60\xa1"
#ifndef MyGame_Example_TestJSONPrefixParsing2_file_extension
#define MyGame_Example_TestJSONPrefixParsing2_file_extension "mon"
#endif
#ifndef MyGame_Example_TestJSONPrefixParsing3_file_identifier
#define MyGame_Example_TestJSONPrefixParsing3_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestJSONPrefixParsing3_file_identifier */
#ifndef MyGame_Example_TestJSONPrefixParsing3_identifier
#define MyGame_Example_TestJSONPrefixParsing3_identifier "MONS"
#endif
#define MyGame_Example_TestJSONPrefixParsing3_type_hash ((flatbuffers_thash_t)0xa06088ca)
#define MyGame_Example_TestJSONPrefixParsing3_type_identifier "\xca\x88\x60\xa0"
#ifndef MyGame_Example_TestJSONPrefixParsing3_file_extension
#define MyGame_Example_TestJSONPrefixParsing3_file_extension "mon"
#endif
#ifndef MyGame_Example_TestBase64_file_identifier
#define MyGame_Example_TestBase64_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TestBase64_file_identifier */
#ifndef MyGame_Example_TestBase64_identifier
#define MyGame_Example_TestBase64_identifier "MONS"
#endif
#define MyGame_Example_TestBase64_type_hash ((flatbuffers_thash_t)0x87b283ea)
#define MyGame_Example_TestBase64_type_identifier "\xea\x83\xb2\x87"
#ifndef MyGame_Example_TestBase64_file_extension
#define MyGame_Example_TestBase64_file_extension "mon"
#endif
#ifndef MyGame_Example_MultipleKeys_file_identifier
#define MyGame_Example_MultipleKeys_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_MultipleKeys_file_identifier */
#ifndef MyGame_Example_MultipleKeys_identifier
#define MyGame_Example_MultipleKeys_identifier "MONS"
#endif
#define MyGame_Example_MultipleKeys_type_hash ((flatbuffers_thash_t)0x3250551)
#define MyGame_Example_MultipleKeys_type_identifier "\x51\x05\x25\x03"
#ifndef MyGame_Example_MultipleKeys_file_extension
#define MyGame_Example_MultipleKeys_file_extension "mon"
#endif
#ifndef MyGame_Example_Monster_file_identifier
#define MyGame_Example_Monster_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_Monster_file_identifier */
#ifndef MyGame_Example_Monster_identifier
#define MyGame_Example_Monster_identifier "MONS"
#endif
#define MyGame_Example_Monster_type_hash ((flatbuffers_thash_t)0x330ef481)
#define MyGame_Example_Monster_type_identifier "\x81\xf4\x0e\x33"
#ifndef MyGame_Example_Monster_file_extension
#define MyGame_Example_Monster_file_extension "mon"
#endif
#ifndef MyGame_Example_TypeAliases_file_identifier
#define MyGame_Example_TypeAliases_file_identifier "MONS"
#endif
/* deprecated, use MyGame_Example_TypeAliases_file_identifier */
#ifndef MyGame_Example_TypeAliases_identifier
#define MyGame_Example_TypeAliases_identifier "MONS"
#endif
#define MyGame_Example_TypeAliases_type_hash ((flatbuffers_thash_t)0x191bc347)
#define MyGame_Example_TypeAliases_type_identifier "\x47\xc3\x1b\x19"
#ifndef MyGame_Example_TypeAliases_file_extension
#define MyGame_Example_TypeAliases_file_extension "mon"
#endif
#ifndef Fantasy_Attacker_file_identifier
#define Fantasy_Attacker_file_identifier "MONS"
#endif
/* deprecated, use Fantasy_Attacker_file_identifier */
#ifndef Fantasy_Attacker_identifier
#define Fantasy_Attacker_identifier "MONS"
#endif
#define Fantasy_Attacker_type_hash ((flatbuffers_thash_t)0x479334f2)
#define Fantasy_Attacker_type_identifier "\xf2\x34\x93\x47"
#ifndef Fantasy_Attacker_file_extension
#define Fantasy_Attacker_file_extension "mon"
#endif
#ifndef Fantasy_Rapunzel_file_identifier
#define Fantasy_Rapunzel_file_identifier "MONS"
#endif
/* deprecated, use Fantasy_Rapunzel_file_identifier */
#ifndef Fantasy_Rapunzel_identifier
#define Fantasy_Rapunzel_identifier "MONS"
#endif
#define Fantasy_Rapunzel_type_hash ((flatbuffers_thash_t)0x1ed9abaa)
#define Fantasy_Rapunzel_type_identifier "\xaa\xab\xd9\x1e"
#ifndef Fantasy_Rapunzel_file_extension
#define Fantasy_Rapunzel_file_extension "mon"
#endif
#ifndef Fantasy_BookReader_file_identifier
#define Fantasy_BookReader_file_identifier "MONS"
#endif
/* deprecated, use Fantasy_BookReader_file_identifier */
#ifndef Fantasy_BookReader_identifier
#define Fantasy_BookReader_identifier "MONS"
#endif
#define Fantasy_BookReader_type_hash ((flatbuffers_thash_t)0x2574b69f)
#define Fantasy_BookReader_type_identifier "\x9f\xb6\x74\x25"
#ifndef Fantasy_BookReader_file_extension
#define Fantasy_BookReader_file_extension "mon"
#endif
#ifndef Fantasy_Movie_file_identifier
#define Fantasy_Movie_file_identifier "MONS"
#endif
/* deprecated, use Fantasy_Movie_file_identifier */
#ifndef Fantasy_Movie_identifier
#define Fantasy_Movie_identifier "MONS"
#endif
#define Fantasy_Movie_type_hash ((flatbuffers_thash_t)0x57debeb3)
#define Fantasy_Movie_type_identifier "\xb3\xbe\xde\x57"
#ifndef Fantasy_Movie_file_extension
#define Fantasy_Movie_file_extension "mon"
#endif

typedef int32_t MyGame_Example2_foo_enum_t;
__flatbuffers_define_integer_type(MyGame_Example2_foo, MyGame_Example2_foo_enum_t, 32)
#define MyGame_Example2_foo_x ((MyGame_Example2_foo_enum_t)INT32_C(0))
#define MyGame_Example2_foo_y ((MyGame_Example2_foo_enum_t)INT32_C(1))
#define MyGame_Example2_foo_table ((MyGame_Example2_foo_enum_t)INT32_C(2))

static inline const char *MyGame_Example2_foo_name(MyGame_Example2_foo_enum_t value)
{
    switch (value) {
    case MyGame_Example2_foo_x: return "x";
    case MyGame_Example2_foo_y: return "y";
    case MyGame_Example2_foo_table: return "table";
    default: return "";
    }
}

static inline int MyGame_Example2_foo_is_known_value(MyGame_Example2_foo_enum_t value)
{
    switch (value) {
    case MyGame_Example2_foo_x: return 1;
    case MyGame_Example2_foo_y: return 1;
    case MyGame_Example2_foo_table: return 1;
    default: return 0;
    }
}

typedef int32_t MyGame_Example_neg_enum_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_neg_enum, MyGame_Example_neg_enum_enum_t, 32)
#define MyGame_Example_neg_enum_neg1 ((MyGame_Example_neg_enum_enum_t)INT32_C(-12))
#define MyGame_Example_neg_enum_neg2 ((MyGame_Example_neg_enum_enum_t)INT32_C(-11))
#define MyGame_Example_neg_enum_neg3 ((MyGame_Example_neg_enum_enum_t)INT32_C(-10))

static inline const char *MyGame_Example_neg_enum_name(MyGame_Example_neg_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_neg_enum_neg1: return "neg1";
    case MyGame_Example_neg_enum_neg2: return "neg2";
    case MyGame_Example_neg_enum_neg3: return "neg3";
    default: return "";
    }
}

static inline int MyGame_Example_neg_enum_is_known_value(MyGame_Example_neg_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_neg_enum_neg1: return 1;
    case MyGame_Example_neg_enum_neg2: return 1;
    case MyGame_Example_neg_enum_neg3: return 1;
    default: return 0;
    }
}

typedef int32_t MyGame_Example_int_enum_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_int_enum, MyGame_Example_int_enum_enum_t, 32)
#define MyGame_Example_int_enum_intneg ((MyGame_Example_int_enum_enum_t)INT32_C(-2))
#define MyGame_Example_int_enum_intneg2 ((MyGame_Example_int_enum_enum_t)INT32_C(-1))
#define MyGame_Example_int_enum_int1 ((MyGame_Example_int_enum_enum_t)INT32_C(2))
#define MyGame_Example_int_enum_int2 ((MyGame_Example_int_enum_enum_t)INT32_C(42))

static inline const char *MyGame_Example_int_enum_name(MyGame_Example_int_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_int_enum_intneg: return "intneg";
    case MyGame_Example_int_enum_intneg2: return "intneg2";
    case MyGame_Example_int_enum_int1: return "int1";
    case MyGame_Example_int_enum_int2: return "int2";
    default: return "";
    }
}

static inline int MyGame_Example_int_enum_is_known_value(MyGame_Example_int_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_int_enum_intneg: return 1;
    case MyGame_Example_int_enum_intneg2: return 1;
    case MyGame_Example_int_enum_int1: return 1;
    case MyGame_Example_int_enum_int2: return 1;
    default: return 0;
    }
}

typedef int32_t MyGame_Example_hex_enum_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_hex_enum, MyGame_Example_hex_enum_enum_t, 32)
#define MyGame_Example_hex_enum_hexneg ((MyGame_Example_hex_enum_enum_t)INT32_C(-2))
#define MyGame_Example_hex_enum_hex1 ((MyGame_Example_hex_enum_enum_t)INT32_C(3))
#define MyGame_Example_hex_enum_hex2 ((MyGame_Example_hex_enum_enum_t)INT32_C(2125446831))

static inline const char *MyGame_Example_hex_enum_name(MyGame_Example_hex_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_hex_enum_hexneg: return "hexneg";
    case MyGame_Example_hex_enum_hex1: return "hex1";
    case MyGame_Example_hex_enum_hex2: return "hex2";
    default: return "";
    }
}

static inline int MyGame_Example_hex_enum_is_known_value(MyGame_Example_hex_enum_enum_t value)
{
    switch (value) {
    case MyGame_Example_hex_enum_hexneg: return 1;
    case MyGame_Example_hex_enum_hex1: return 1;
    case MyGame_Example_hex_enum_hex2: return 1;
    default: return 0;
    }
}

typedef int8_t MyGame_Example_Color_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_Color, MyGame_Example_Color_enum_t, 8)
#define MyGame_Example_Color_Red ((MyGame_Example_Color_enum_t)INT8_C(1))
#define MyGame_Example_Color_Green ((MyGame_Example_Color_enum_t)INT8_C(2))
#define MyGame_Example_Color_Blue ((MyGame_Example_Color_enum_t)INT8_C(8))

static inline const char *MyGame_Example_Color_name(MyGame_Example_Color_enum_t value)
{
    switch (value) {
    case MyGame_Example_Color_Red: return "Red";
    case MyGame_Example_Color_Green: return "Green";
    case MyGame_Example_Color_Blue: return "Blue";
    default: return "";
    }
}

static inline int MyGame_Example_Color_is_known_value(MyGame_Example_Color_enum_t value)
{
    switch (value) {
    case MyGame_Example_Color_Red: return 1;
    case MyGame_Example_Color_Green: return 1;
    case MyGame_Example_Color_Blue: return 1;
    default: return 0;
    }
}

typedef int32_t MyGame_Example_notemptyenum_enum_t;
__flatbuffers_define_integer_type(MyGame_Example_notemptyenum, MyGame_Example_notemptyenum_enum_t, 32)
#define MyGame_Example_notemptyenum_x ((MyGame_Example_notemptyenum_enum_t)INT32_C(0))

static inline const char *MyGame_Example_notemptyenum_name(MyGame_Example_notemptyenum_enum_t value)
{
    switch (value) {
    case MyGame_Example_notemptyenum_x: return "x";
    default: return "";
    }
}

static inline int MyGame_Example_notemptyenum_is_known_value(MyGame_Example_notemptyenum_enum_t value)
{
    switch (value) {
    case MyGame_Example_notemptyenum_x: return 1;
    default: return 0;
    }
}

typedef int32_t Fantasy_ReorderedEnum_enum_t;
__flatbuffers_define_integer_type(Fantasy_ReorderedEnum, Fantasy_ReorderedEnum_enum_t, 32)
#define Fantasy_ReorderedEnum_rx ((Fantasy_ReorderedEnum_enum_t)INT32_C(10))
#define Fantasy_ReorderedEnum_ry ((Fantasy_ReorderedEnum_enum_t)INT32_C(1))
#define Fantasy_ReorderedEnum_rz ((Fantasy_ReorderedEnum_enum_t)INT32_C(9))

static inline const char *Fantasy_ReorderedEnum_name(Fantasy_ReorderedEnum_enum_t value)
{
    switch (value) {
    case Fantasy_ReorderedEnum_rx: return "rx";
    case Fantasy_ReorderedEnum_ry: return "ry";
    case Fantasy_ReorderedEnum_rz: return "rz";
    default: return "";
    }
}

static inline int Fantasy_ReorderedEnum_is_known_value(Fantasy_ReorderedEnum_enum_t value)
{
    switch (value) {
    case Fantasy_ReorderedEnum_rx: return 1;
    case Fantasy_ReorderedEnum_ry: return 1;
    case Fantasy_ReorderedEnum_rz: return 1;
    default: return 0;
    }
}

typedef int8_t Fantasy_ReorderedColor_enum_t;
__flatbuffers_define_integer_type(Fantasy_ReorderedColor, Fantasy_ReorderedColor_enum_t, 8)
#define Fantasy_ReorderedColor_RBlue ((Fantasy_ReorderedColor_enum_t)INT8_C(8))
#define Fantasy_ReorderedColor_RRed ((Fantasy_ReorderedColor_enum_t)INT8_C(1))
#define Fantasy_ReorderedColor_RGreen ((Fantasy_ReorderedColor_enum_t)INT8_C(2))

static inline const char *Fantasy_ReorderedColor_name(Fantasy_ReorderedColor_enum_t value)
{
    switch (value) {
    case Fantasy_ReorderedColor_RBlue: return "RBlue";
    case Fantasy_ReorderedColor_RRed: return "RRed";
    case Fantasy_ReorderedColor_RGreen: return "RGreen";
    default: return "";
    }
}

static inline int Fantasy_ReorderedColor_is_known_value(Fantasy_ReorderedColor_enum_t value)
{
    switch (value) {
    case Fantasy_ReorderedColor_RBlue: return 1;
    case Fantasy_ReorderedColor_RRed: return 1;
    case Fantasy_ReorderedColor_RGreen: return 1;
    default: return 0;
    }
}


struct InGlobalNamespace {
    alignas(1) int8_t unused;
};
static_assert(sizeof(InGlobalNamespace_t) == 1, "struct size mismatch");

static inline const InGlobalNamespace_t *InGlobalNamespace__const_ptr_add(const InGlobalNamespace_t *p, size_t i) { return p + i; }
static inline InGlobalNamespace_t *InGlobalNamespace__ptr_add(InGlobalNamespace_t *p, size_t i) { return p + i; }
static inline InGlobalNamespace_struct_t InGlobalNamespace_vec_at(InGlobalNamespace_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t InGlobalNamespace__size(void) { return 1; }
static inline size_t InGlobalNamespace_vec_len(InGlobalNamespace_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(InGlobalNamespace)

__flatbuffers_define_struct_scalar_field(InGlobalNamespace, unused, flatbuffers_int8, int8_t)

struct MyGame_Example_Test {
    alignas(2) int16_t a;
    alignas(1) int8_t b;
};
static_assert(sizeof(MyGame_Example_Test_t) == 4, "struct size mismatch");

static inline const MyGame_Example_Test_t *MyGame_Example_Test__const_ptr_add(const MyGame_Example_Test_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Test_t *MyGame_Example_Test__ptr_add(MyGame_Example_Test_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Test_struct_t MyGame_Example_Test_vec_at(MyGame_Example_Test_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_Example_Test__size(void) { return 4; }
static inline size_t MyGame_Example_Test_vec_len(MyGame_Example_Test_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_Example_Test)

__flatbuffers_define_struct_scalar_field(MyGame_Example_Test, a, flatbuffers_int16, int16_t)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Test, b, flatbuffers_int8, int8_t)

struct MyGame_Example_Vec3 {
    alignas(16) float x;
    alignas(4) float y;
    alignas(4) float z;
    alignas(8) double test1;
    alignas(1) MyGame_Example_Color_enum_t test2;
    alignas(2) MyGame_Example_Test_t test3;
};
static_assert(sizeof(MyGame_Example_Vec3_t) == 32, "struct size mismatch");

static inline const MyGame_Example_Vec3_t *MyGame_Example_Vec3__const_ptr_add(const MyGame_Example_Vec3_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Vec3_t *MyGame_Example_Vec3__ptr_add(MyGame_Example_Vec3_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Vec3_struct_t MyGame_Example_Vec3_vec_at(MyGame_Example_Vec3_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_Example_Vec3__size(void) { return 32; }
static inline size_t MyGame_Example_Vec3_vec_len(MyGame_Example_Vec3_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_Example_Vec3)

__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, x, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, y, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, z, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, test1, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(MyGame_Example_Vec3, test2, MyGame_Example_Color, MyGame_Example_Color_enum_t)
__flatbuffers_define_struct_struct_field(MyGame_Example_Vec3, test3, MyGame_Example_Test_struct_t)

struct MyGame_Example_Ability {
    alignas(4) uint32_t id;
    alignas(4) uint32_t distance;
};
static_assert(sizeof(MyGame_Example_Ability_t) == 8, "struct size mismatch");

static inline const MyGame_Example_Ability_t *MyGame_Example_Ability__const_ptr_add(const MyGame_Example_Ability_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Ability_t *MyGame_Example_Ability__ptr_add(MyGame_Example_Ability_t *p, size_t i) { return p + i; }
static inline MyGame_Example_Ability_struct_t MyGame_Example_Ability_vec_at(MyGame_Example_Ability_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_Example_Ability__size(void) { return 8; }
static inline size_t MyGame_Example_Ability_vec_len(MyGame_Example_Ability_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_Example_Ability)

__flatbuffers_define_struct_scalar_field(MyGame_Example_Ability, id, flatbuffers_uint32, uint32_t)
/* Note: find only works on vectors sorted by this field. */
__flatbuffers_define_find_by_scalar_field(MyGame_Example_Ability, id, uint32_t)
__flatbuffers_define_struct_sort_by_scalar_field(MyGame_Example_Ability, id, uint32_t, MyGame_Example_Ability_t)
__flatbuffers_define_default_find_by_scalar_field(MyGame_Example_Ability, id, uint32_t)
__flatbuffers_define_default_scan_by_scalar_field(MyGame_Example_Ability, id, uint32_t)
#define MyGame_Example_Ability_vec_sort MyGame_Example_Ability_vec_sort_by_id
__flatbuffers_define_struct_scalar_field(MyGame_Example_Ability, distance, flatbuffers_uint32, uint32_t)

struct MyGame_Example_FooBar {
    alignas(4) float foo[16];
    alignas(4) int32_t bar[10];
    alignas(1) MyGame_Example_Color_enum_t col[3];
    alignas(2) MyGame_Example_Test_t tests[2];
    alignas(1) char text[5];
};
static_assert(sizeof(MyGame_Example_FooBar_t) == 124, "struct size mismatch");

static inline const MyGame_Example_FooBar_t *MyGame_Example_FooBar__const_ptr_add(const MyGame_Example_FooBar_t *p, size_t i) { return p + i; }
static inline MyGame_Example_FooBar_t *MyGame_Example_FooBar__ptr_add(MyGame_Example_FooBar_t *p, size_t i) { return p + i; }
static inline MyGame_Example_FooBar_struct_t MyGame_Example_FooBar_vec_at(MyGame_Example_FooBar_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t MyGame_Example_FooBar__size(void) { return 124; }
static inline size_t MyGame_Example_FooBar_vec_len(MyGame_Example_FooBar_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(MyGame_Example_FooBar)

__flatbuffers_define_struct_scalar_fixed_array_field(MyGame_Example_FooBar, foo, flatbuffers_float, float, 16)
__flatbuffers_define_struct_scalar_fixed_array_field(MyGame_Example_FooBar, bar, flatbuffers_int32, int32_t, 10)
__flatbuffers_define_struct_scalar_fixed_array_field(MyGame_Example_FooBar, col, MyGame_Example_Color, MyGame_Example_Color_enum_t, 3)
__flatbuffers_define_struct_struct_fixed_array_field(MyGame_Example_FooBar, tests, MyGame_Example_Test_struct_t, 2)
__flatbuffers_define_struct_scalar_fixed_array_field(MyGame_Example_FooBar, text, flatbuffers_char, char, 5)

struct Fantasy_Rapunzel {
    alignas(4) uint16_t hair_length;
    alignas(4) uint8_t __deprecated0[4]; /* was: 'travel_points' */
};
static_assert(sizeof(Fantasy_Rapunzel_t) == 8, "struct size mismatch");

static inline const Fantasy_Rapunzel_t *Fantasy_Rapunzel__const_ptr_add(const Fantasy_Rapunzel_t *p, size_t i) { return p + i; }
static inline Fantasy_Rapunzel_t *Fantasy_Rapunzel__ptr_add(Fantasy_Rapunzel_t *p, size_t i) { return p + i; }
static inline Fantasy_Rapunzel_struct_t Fantasy_Rapunzel_vec_at(Fantasy_Rapunzel_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Fantasy_Rapunzel__size(void) { return 8; }
static inline size_t Fantasy_Rapunzel_vec_len(Fantasy_Rapunzel_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Fantasy_Rapunzel)

__flatbuffers_define_struct_scalar_field(Fantasy_Rapunzel, hair_length, flatbuffers_uint16, uint16_t)
/* Note: find only works on vectors sorted by this field. */
__flatbuffers_define_find_by_scalar_field(Fantasy_Rapunzel, hair_length, uint16_t)
__flatbuffers_define_struct_sort_by_scalar_field(Fantasy_Rapunzel, hair_length, uint16_t, Fantasy_Rapunzel_t)
__flatbuffers_define_default_find_by_scalar_field(Fantasy_Rapunzel, hair_length, uint16_t)
__flatbuffers_define_default_scan_by_scalar_field(Fantasy_Rapunzel, hair_length, uint16_t)
#define Fantasy_Rapunzel_vec_sort Fantasy_Rapunzel_vec_sort_by_hair_length

struct Fantasy_BookReader {
    alignas(4) int32_t books_read;
};
static_assert(sizeof(Fantasy_BookReader_t) == 4, "struct size mismatch");

static inline const Fantasy_BookReader_t *Fantasy_BookReader__const_ptr_add(const Fantasy_BookReader_t *p, size_t i) { return p + i; }
static inline Fantasy_BookReader_t *Fantasy_BookReader__ptr_add(Fantasy_BookReader_t *p, size_t i) { return p + i; }
static inline Fantasy_BookReader_struct_t Fantasy_BookReader_vec_at(Fantasy_BookReader_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Fantasy_BookReader__size(void) { return 4; }
static inline size_t Fantasy_BookReader_vec_len(Fantasy_BookReader_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Fantasy_BookReader)

__flatbuffers_define_struct_scalar_field(Fantasy_BookReader, books_read, flatbuffers_int32, int32_t)


struct MyGame_InParentNamespace_table { uint8_t unused__; };

static inline size_t MyGame_InParentNamespace_vec_len(MyGame_InParentNamespace_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_InParentNamespace_table_t MyGame_InParentNamespace_vec_at(MyGame_InParentNamespace_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_InParentNamespace_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_InParentNamespace)


struct MyGame_Example2_Monster_table { uint8_t unused__; };

static inline size_t MyGame_Example2_Monster_vec_len(MyGame_Example2_Monster_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example2_Monster_table_t MyGame_Example2_Monster_vec_at(MyGame_Example2_Monster_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example2_Monster_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example2_Monster)


struct MyGame_Example2_Strange_table { uint8_t unused__; };

static inline size_t MyGame_Example2_Strange_vec_len(MyGame_Example2_Strange_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example2_Strange_table_t MyGame_Example2_Strange_vec_at(MyGame_Example2_Strange_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example2_Strange_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example2_Strange)


struct MyGame_Example2_S2_table { uint8_t unused__; };

static inline size_t MyGame_Example2_S2_vec_len(MyGame_Example2_S2_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example2_S2_table_t MyGame_Example2_S2_vec_at(MyGame_Example2_S2_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example2_S2_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example2_S2)

__flatbuffers_define_scalar_field(0, MyGame_Example2_S2, namespace, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, MyGame_Example2_S2, table, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, MyGame_Example2_S2, struct, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(3, MyGame_Example2_S2, union, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(4, MyGame_Example2_S2, int, flatbuffers_int32, int32_t, INT32_C(0))
typedef uint8_t MyGame_Example_Foo_union_type_t;
__flatbuffers_define_integer_type(MyGame_Example_Foo, MyGame_Example_Foo_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, MyGame_Example_Foo)
#define MyGame_Example_Foo_NONE ((MyGame_Example_Foo_union_type_t)UINT8_C(0))
#define MyGame_Example_Foo_InParentNamespace ((MyGame_Example_Foo_union_type_t)UINT8_C(1))

static inline const char *MyGame_Example_Foo_type_name(MyGame_Example_Foo_union_type_t type)
{
    switch (type) {
    case MyGame_Example_Foo_NONE: return "NONE";
    case MyGame_Example_Foo_InParentNamespace: return "InParentNamespace";
    default: return "";
    }
}

static inline int MyGame_Example_Foo_is_known_type(MyGame_Example_Foo_union_type_t type)
{
    switch (type) {
    case MyGame_Example_Foo_NONE: return 1;
    case MyGame_Example_Foo_InParentNamespace: return 1;
    default: return 0;
    }
}

typedef uint8_t MyGame_Example2_SubSystem_SubSystemA_union_type_t;
__flatbuffers_define_integer_type(MyGame_Example2_SubSystem_SubSystemA, MyGame_Example2_SubSystem_SubSystemA_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, MyGame_Example2_SubSystem_SubSystemA)
#define MyGame_Example2_SubSystem_SubSystemA_NONE ((MyGame_Example2_SubSystem_SubSystemA_union_type_t)UINT8_C(0))
#define MyGame_Example2_SubSystem_SubSystemA_Strange ((MyGame_Example2_SubSystem_SubSystemA_union_type_t)UINT8_C(1))

static inline const char *MyGame_Example2_SubSystem_SubSystemA_type_name(MyGame_Example2_SubSystem_SubSystemA_union_type_t type)
{
    switch (type) {
    case MyGame_Example2_SubSystem_SubSystemA_NONE: return "NONE";
    case MyGame_Example2_SubSystem_SubSystemA_Strange: return "Strange";
    default: return "";
    }
}

static inline int MyGame_Example2_SubSystem_SubSystemA_is_known_type(MyGame_Example2_SubSystem_SubSystemA_union_type_t type)
{
    switch (type) {
    case MyGame_Example2_SubSystem_SubSystemA_NONE: return 1;
    case MyGame_Example2_SubSystem_SubSystemA_Strange: return 1;
    default: return 0;
    }
}

typedef uint8_t MyGame_Example2_SubSystem_SubSystemB_union_type_t;
__flatbuffers_define_integer_type(MyGame_Example2_SubSystem_SubSystemB, MyGame_Example2_SubSystem_SubSystemB_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, MyGame_Example2_SubSystem_SubSystemB)
#define MyGame_Example2_SubSystem_SubSystemB_NONE ((MyGame_Example2_SubSystem_SubSystemB_union_type_t)UINT8_C(0))
#define MyGame_Example2_SubSystem_SubSystemB_Strange ((MyGame_Example2_SubSystem_SubSystemB_union_type_t)UINT8_C(1))

static inline const char *MyGame_Example2_SubSystem_SubSystemB_type_name(MyGame_Example2_SubSystem_SubSystemB_union_type_t type)
{
    switch (type) {
    case MyGame_Example2_SubSystem_SubSystemB_NONE: return "NONE";
    case MyGame_Example2_SubSystem_SubSystemB_Strange: return "Strange";
    default: return "";
    }
}

static inline int MyGame_Example2_SubSystem_SubSystemB_is_known_type(MyGame_Example2_SubSystem_SubSystemB_union_type_t type)
{
    switch (type) {
    case MyGame_Example2_SubSystem_SubSystemB_NONE: return 1;
    case MyGame_Example2_SubSystem_SubSystemB_Strange: return 1;
    default: return 0;
    }
}

typedef uint8_t MyGame_Example_Any_union_type_t;
__flatbuffers_define_integer_type(MyGame_Example_Any, MyGame_Example_Any_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, MyGame_Example_Any)
#define MyGame_Example_Any_NONE ((MyGame_Example_Any_union_type_t)UINT8_C(0))
#define MyGame_Example_Any_Monster ((MyGame_Example_Any_union_type_t)UINT8_C(1))
#define MyGame_Example_Any_TestSimpleTableWithEnum ((MyGame_Example_Any_union_type_t)UINT8_C(2))
#define MyGame_Example_Any_Monster2 ((MyGame_Example_Any_union_type_t)UINT8_C(3))
#define MyGame_Example_Any_Alt ((MyGame_Example_Any_union_type_t)UINT8_C(4))

static inline const char *MyGame_Example_Any_type_name(MyGame_Example_Any_union_type_t type)
{
    switch (type) {
    case MyGame_Example_Any_NONE: return "NONE";
    case MyGame_Example_Any_Monster: return "Monster";
    case MyGame_Example_Any_TestSimpleTableWithEnum: return "TestSimpleTableWithEnum";
    case MyGame_Example_Any_Monster2: return "Monster2";
    case MyGame_Example_Any_Alt: return "Alt";
    default: return "";
    }
}

static inline int MyGame_Example_Any_is_known_type(MyGame_Example_Any_union_type_t type)
{
    switch (type) {
    case MyGame_Example_Any_NONE: return 1;
    case MyGame_Example_Any_Monster: return 1;
    case MyGame_Example_Any_TestSimpleTableWithEnum: return 1;
    case MyGame_Example_Any_Monster2: return 1;
    case MyGame_Example_Any_Alt: return 1;
    default: return 0;
    }
}


struct MyGame_Example_TestSimpleTableWithEnum_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestSimpleTableWithEnum_vec_len(MyGame_Example_TestSimpleTableWithEnum_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestSimpleTableWithEnum_table_t MyGame_Example_TestSimpleTableWithEnum_vec_at(MyGame_Example_TestSimpleTableWithEnum_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestSimpleTableWithEnum_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestSimpleTableWithEnum)

__flatbuffers_define_scalar_field(0, MyGame_Example_TestSimpleTableWithEnum, color, MyGame_Example_Color, MyGame_Example_Color_enum_t, INT8_C(2))
__flatbuffers_define_scalar_field(1, MyGame_Example_TestSimpleTableWithEnum, color2, MyGame_Example_Color, MyGame_Example_Color_enum_t, INT8_C(2))
__flatbuffers_define_scalar_field(2, MyGame_Example_TestSimpleTableWithEnum, uc, flatbuffers_uint8, uint8_t, UINT8_C(2))
__flatbuffers_define_scalar_field(3, MyGame_Example_TestSimpleTableWithEnum, uc2, flatbuffers_uint8, uint8_t, UINT8_C(2))

struct MyGame_Example_TestInclude_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestInclude_vec_len(MyGame_Example_TestInclude_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestInclude_table_t MyGame_Example_TestInclude_vec_at(MyGame_Example_TestInclude_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestInclude_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestInclude)

__flatbuffers_define_struct_field(0, MyGame_Example_TestInclude, global, InGlobalNamespace_struct_t, 0)
__flatbuffers_define_scalar_field(1, MyGame_Example_TestInclude, incval, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, INT64_C(0))
__flatbuffers_define_scalar_field(2, MyGame_Example_TestInclude, incval2, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, INT64_C(0))
__flatbuffers_define_scalar_field(3, MyGame_Example_TestInclude, incval3, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(4, MyGame_Example_TestInclude, incval4, MyGame_OtherNameSpace_FromInclude, MyGame_OtherNameSpace_FromInclude_enum_t, INT64_C(0))
__flatbuffers_define_scalar_field(5, MyGame_Example_TestInclude, incval5, flatbuffers_int64, int64_t, INT64_C(0))

struct MyGame_Example_Stat_table { uint8_t unused__; };

static inline size_t MyGame_Example_Stat_vec_len(MyGame_Example_Stat_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_Stat_table_t MyGame_Example_Stat_vec_at(MyGame_Example_Stat_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_Stat_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_Stat)

__flatbuffers_define_string_field(0, MyGame_Example_Stat, id, 0)
__flatbuffers_define_scalar_field(1, MyGame_Example_Stat, val, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(2, MyGame_Example_Stat, count, flatbuffers_uint16, uint16_t, UINT16_C(0))

struct MyGame_Example_Alt_table { uint8_t unused__; };

static inline size_t MyGame_Example_Alt_vec_len(MyGame_Example_Alt_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_Alt_table_t MyGame_Example_Alt_vec_at(MyGame_Example_Alt_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_Alt_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_Alt)

__flatbuffers_define_table_field(0, MyGame_Example_Alt, prefix, MyGame_Example_TestJSONPrefix_table_t, 0)
__flatbuffers_define_table_field(1, MyGame_Example_Alt, movie, Fantasy_Movie_table_t, 0)
__flatbuffers_define_union_vector_field(flatbuffers_, 3, MyGame_Example_Alt, manyany, MyGame_Example_Any, 0)
__flatbuffers_define_vector_field(4, MyGame_Example_Alt, multik, MyGame_Example_MultipleKeys_vec_t, 0)
__flatbuffers_define_vector_field(5, MyGame_Example_Alt, rapunzels, Fantasy_Rapunzel_vec_t, 0)
__flatbuffers_define_vector_field(6, MyGame_Example_Alt, names, flatbuffers_string_vec_t, 0)
__flatbuffers_define_vector_field(7, MyGame_Example_Alt, samples, flatbuffers_float_vec_t, 0)
__flatbuffers_define_struct_field(8, MyGame_Example_Alt, fixed_array, MyGame_Example_FooBar_struct_t, 0)

struct MyGame_Example_TestJSONPrefix_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestJSONPrefix_vec_len(MyGame_Example_TestJSONPrefix_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestJSONPrefix_table_t MyGame_Example_TestJSONPrefix_vec_at(MyGame_Example_TestJSONPrefix_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestJSONPrefix_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestJSONPrefix)

__flatbuffers_define_table_field(0, MyGame_Example_TestJSONPrefix, testjsonprefixparsing, MyGame_Example_TestJSONPrefixParsing_table_t, 0)
__flatbuffers_define_table_field(1, MyGame_Example_TestJSONPrefix, testjsonprefixparsing2, MyGame_Example_TestJSONPrefixParsing2_table_t, 0)
__flatbuffers_define_table_field(2, MyGame_Example_TestJSONPrefix, testjsonprefixparsing3, MyGame_Example_TestJSONPrefixParsing3_table_t, 0)

struct MyGame_Example_TestJSONPrefixParsing_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestJSONPrefixParsing_vec_len(MyGame_Example_TestJSONPrefixParsing_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestJSONPrefixParsing_table_t MyGame_Example_TestJSONPrefixParsing_vec_at(MyGame_Example_TestJSONPrefixParsing_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestJSONPrefixParsing_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestJSONPrefixParsing)

__flatbuffers_define_string_field(0, MyGame_Example_TestJSONPrefixParsing, aaaa, 0)
__flatbuffers_define_scalar_field(1, MyGame_Example_TestJSONPrefixParsing, aaaa12345, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(2, MyGame_Example_TestJSONPrefixParsing, bbbb, 0)
__flatbuffers_define_scalar_field(3, MyGame_Example_TestJSONPrefixParsing, bbbb1234, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_string_field(4, MyGame_Example_TestJSONPrefixParsing, cccc, 0)
__flatbuffers_define_scalar_field(5, MyGame_Example_TestJSONPrefixParsing, cccc1234, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(6, MyGame_Example_TestJSONPrefixParsing, cccc12345, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(7, MyGame_Example_TestJSONPrefixParsing, dddd1234, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(8, MyGame_Example_TestJSONPrefixParsing, dddd12345, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct MyGame_Example_TestJSONPrefixParsing2_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestJSONPrefixParsing2_vec_len(MyGame_Example_TestJSONPrefixParsing2_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestJSONPrefixParsing2_table_t MyGame_Example_TestJSONPrefixParsing2_vec_at(MyGame_Example_TestJSONPrefixParsing2_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestJSONPrefixParsing2_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestJSONPrefixParsing2)

__flatbuffers_define_scalar_field(0, MyGame_Example_TestJSONPrefixParsing2, aaaa_bbbb_steps, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(1, MyGame_Example_TestJSONPrefixParsing2, aaaa_bbbb_start_, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct MyGame_Example_TestJSONPrefixParsing3_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestJSONPrefixParsing3_vec_len(MyGame_Example_TestJSONPrefixParsing3_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestJSONPrefixParsing3_table_t MyGame_Example_TestJSONPrefixParsing3_vec_at(MyGame_Example_TestJSONPrefixParsing3_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestJSONPrefixParsing3_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestJSONPrefixParsing3)

__flatbuffers_define_scalar_field(0, MyGame_Example_TestJSONPrefixParsing3, aaaa_bbbb_steps, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(1, MyGame_Example_TestJSONPrefixParsing3, aaaa_bbbb_start_steps, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct MyGame_Example_TestBase64_table { uint8_t unused__; };

static inline size_t MyGame_Example_TestBase64_vec_len(MyGame_Example_TestBase64_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TestBase64_table_t MyGame_Example_TestBase64_vec_at(MyGame_Example_TestBase64_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TestBase64_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TestBase64)

__flatbuffers_define_vector_field(0, MyGame_Example_TestBase64, data, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(1, MyGame_Example_TestBase64, urldata, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(2, MyGame_Example_TestBase64, nested, flatbuffers_uint8_vec_t, 0)
__flatbuffers_nested_buffer_as_root(MyGame_Example_TestBase64, nested, MyGame_Example_Monster, table_)

struct MyGame_Example_MultipleKeys_table { uint8_t unused__; };

static inline size_t MyGame_Example_MultipleKeys_vec_len(MyGame_Example_MultipleKeys_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_MultipleKeys_table_t MyGame_Example_MultipleKeys_vec_at(MyGame_Example_MultipleKeys_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_MultipleKeys_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_MultipleKeys)

__flatbuffers_define_string_field(0, MyGame_Example_MultipleKeys, hello, 0)
__flatbuffers_define_string_field(1, MyGame_Example_MultipleKeys, world, 0)
/* Note: this is not the primary key of this table. */
__flatbuffers_define_find_by_string_field(MyGame_Example_MultipleKeys, world)
__flatbuffers_define_table_sort_by_string_field(MyGame_Example_MultipleKeys, world)
__flatbuffers_define_scalar_field(2, MyGame_Example_MultipleKeys, foobar, flatbuffers_int64, int64_t, INT64_C(0))
/* Note: find only works on vectors sorted by this field. */
__flatbuffers_define_find_by_scalar_field(MyGame_Example_MultipleKeys, foobar, int64_t)
__flatbuffers_define_table_sort_by_scalar_field(MyGame_Example_MultipleKeys, foobar, int64_t)
__flatbuffers_define_default_find_by_scalar_field(MyGame_Example_MultipleKeys, foobar, int64_t)
__flatbuffers_define_default_scan_by_scalar_field(MyGame_Example_MultipleKeys, foobar, int64_t)
#define MyGame_Example_MultipleKeys_vec_sort MyGame_Example_MultipleKeys_vec_sort_by_foobar

struct MyGame_Example_Monster_table { uint8_t unused__; };

static inline size_t MyGame_Example_Monster_vec_len(MyGame_Example_Monster_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_Monster_table_t MyGame_Example_Monster_vec_at(MyGame_Example_Monster_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_Monster_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_Monster)

__flatbuffers_define_struct_field(0, MyGame_Example_Monster, pos, MyGame_Example_Vec3_struct_t, 0)
__flatbuffers_define_scalar_field(1, MyGame_Example_Monster, mana, flatbuffers_int16, int16_t, INT16_C(150))
__flatbuffers_define_scalar_field(2, MyGame_Example_Monster, hp, flatbuffers_int16, int16_t, INT16_C(100))
__flatbuffers_define_string_field(3, MyGame_Example_Monster, name, 1)
__flatbuffers_define_find_by_string_field(MyGame_Example_Monster, name)
__flatbuffers_define_table_sort_by_string_field(MyGame_Example_Monster, name)
__flatbuffers_define_default_find_by_string_field(MyGame_Example_Monster, name)
__flatbuffers_define_default_scan_by_string_field(MyGame_Example_Monster, name)
#define MyGame_Example_Monster_vec_sort MyGame_Example_Monster_vec_sort_by_name
/* Skipping deprecated field: 'MyGame_Example_Monster_friendly' */

__flatbuffers_define_vector_field(5, MyGame_Example_Monster, inventory, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_scalar_field(6, MyGame_Example_Monster, color, MyGame_Example_Color, MyGame_Example_Color_enum_t, INT8_C(8))
__flatbuffers_define_union_field(flatbuffers_, 8, MyGame_Example_Monster, test, MyGame_Example_Any, 0)
__flatbuffers_define_vector_field(9, MyGame_Example_Monster, test4, MyGame_Example_Test_vec_t, 0)
__flatbuffers_define_vector_field(10, MyGame_Example_Monster, testarrayofstring, flatbuffers_string_vec_t, 0)
/**  an example documentation comment: this will end up in the generated code
 *  multiline too */
__flatbuffers_define_vector_field(11, MyGame_Example_Monster, testarrayoftables, MyGame_Example_Monster_vec_t, 0)
__flatbuffers_define_table_field(12, MyGame_Example_Monster, enemy, MyGame_Example_Monster_table_t, 0)
__flatbuffers_define_vector_field(13, MyGame_Example_Monster, testnestedflatbuffer, flatbuffers_uint8_vec_t, 0)
__flatbuffers_nested_buffer_as_root(MyGame_Example_Monster, testnestedflatbuffer, MyGame_Example_Monster, table_)
__flatbuffers_define_table_field(14, MyGame_Example_Monster, testempty, MyGame_Example_Stat_table_t, 0)
__flatbuffers_define_scalar_field(15, MyGame_Example_Monster, testbool, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(1))
__flatbuffers_define_scalar_field(16, MyGame_Example_Monster, testhashs32_fnv1, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(17, MyGame_Example_Monster, testhashu32_fnv1, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(18, MyGame_Example_Monster, testhashs64_fnv1, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(19, MyGame_Example_Monster, testhashu64_fnv1, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(20, MyGame_Example_Monster, testhashs32_fnv1a, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(21, MyGame_Example_Monster, testhashu32_fnv1a, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(22, MyGame_Example_Monster, testhashs64_fnv1a, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(23, MyGame_Example_Monster, testhashu64_fnv1a, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_vector_field(24, MyGame_Example_Monster, testarrayofbools, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_scalar_field(25, MyGame_Example_Monster, testf, flatbuffers_float, float, 314159.000f)
__flatbuffers_define_scalar_field(26, MyGame_Example_Monster, testf2, flatbuffers_float, float, 3.00000000f)
__flatbuffers_define_scalar_field(27, MyGame_Example_Monster, testf3, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_vector_field(28, MyGame_Example_Monster, testarrayofstring2, flatbuffers_string_vec_t, 0)
__flatbuffers_define_vector_field(29, MyGame_Example_Monster, testarrayofsortedstruct, MyGame_Example_Ability_vec_t, 0)
__flatbuffers_define_vector_field(30, MyGame_Example_Monster, flex, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(31, MyGame_Example_Monster, test5, MyGame_Example_Test_vec_t, 0)
__flatbuffers_define_vector_field(32, MyGame_Example_Monster, vector_of_longs, flatbuffers_int64_vec_t, 0)
__flatbuffers_define_vector_field(33, MyGame_Example_Monster, vector_of_doubles, flatbuffers_double_vec_t, 0)
__flatbuffers_define_table_field(34, MyGame_Example_Monster, parent_namespace_test, MyGame_InParentNamespace_table_t, 0)
__flatbuffers_define_table_field(35, MyGame_Example_Monster, testbase64, MyGame_Example_TestBase64_table_t, 0)

struct MyGame_Example_TypeAliases_table { uint8_t unused__; };

static inline size_t MyGame_Example_TypeAliases_vec_len(MyGame_Example_TypeAliases_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MyGame_Example_TypeAliases_table_t MyGame_Example_TypeAliases_vec_at(MyGame_Example_TypeAliases_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MyGame_Example_TypeAliases_table_t, vec, i, 0)
__flatbuffers_table_as_root(MyGame_Example_TypeAliases)

__flatbuffers_define_scalar_field(0, MyGame_Example_TypeAliases, i8, flatbuffers_int8, int8_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, MyGame_Example_TypeAliases, u8, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(2, MyGame_Example_TypeAliases, i16, flatbuffers_int16, int16_t, INT16_C(0))
__flatbuffers_define_scalar_field(3, MyGame_Example_TypeAliases, u16, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(4, MyGame_Example_TypeAliases, i32, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(5, MyGame_Example_TypeAliases, u32, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(6, MyGame_Example_TypeAliases, i64, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(7, MyGame_Example_TypeAliases, u64, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(8, MyGame_Example_TypeAliases, f32, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(9, MyGame_Example_TypeAliases, f64, flatbuffers_double, double, 0.0000000000000000)
__flatbuffers_define_vector_field(10, MyGame_Example_TypeAliases, v8, flatbuffers_int8_vec_t, 0)
__flatbuffers_define_vector_field(11, MyGame_Example_TypeAliases, vf64, flatbuffers_double_vec_t, 0)

struct Fantasy_Attacker_table { uint8_t unused__; };

static inline size_t Fantasy_Attacker_vec_len(Fantasy_Attacker_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Fantasy_Attacker_table_t Fantasy_Attacker_vec_at(Fantasy_Attacker_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Fantasy_Attacker_table_t, vec, i, 0)
__flatbuffers_table_as_root(Fantasy_Attacker)

__flatbuffers_define_scalar_field(0, Fantasy_Attacker, sword_attack_damage, flatbuffers_int32, int32_t, INT32_C(0))
typedef uint8_t Fantasy_Character_union_type_t;
__flatbuffers_define_integer_type(Fantasy_Character, Fantasy_Character_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, Fantasy_Character)
#define Fantasy_Character_NONE ((Fantasy_Character_union_type_t)UINT8_C(0))
#define Fantasy_Character_MuLan ((Fantasy_Character_union_type_t)UINT8_C(2))
#define Fantasy_Character_Rapunzel ((Fantasy_Character_union_type_t)UINT8_C(8))
#define Fantasy_Character_Belle ((Fantasy_Character_union_type_t)UINT8_C(9))
#define Fantasy_Character_BookFan ((Fantasy_Character_union_type_t)UINT8_C(10))
#define Fantasy_Character_Other ((Fantasy_Character_union_type_t)UINT8_C(11))
#define Fantasy_Character_Unused ((Fantasy_Character_union_type_t)UINT8_C(255))

static inline const char *Fantasy_Character_type_name(Fantasy_Character_union_type_t type)
{
    switch (type) {
    case Fantasy_Character_NONE: return "NONE";
    case Fantasy_Character_MuLan: return "MuLan";
    case Fantasy_Character_Rapunzel: return "Rapunzel";
    case Fantasy_Character_Belle: return "Belle";
    case Fantasy_Character_BookFan: return "BookFan";
    case Fantasy_Character_Other: return "Other";
    case Fantasy_Character_Unused: return "Unused";
    default: return "";
    }
}

static inline int Fantasy_Character_is_known_type(Fantasy_Character_union_type_t type)
{
    switch (type) {
    case Fantasy_Character_NONE: return 1;
    case Fantasy_Character_MuLan: return 1;
    case Fantasy_Character_Rapunzel: return 1;
    case Fantasy_Character_Belle: return 1;
    case Fantasy_Character_BookFan: return 1;
    case Fantasy_Character_Other: return 1;
    case Fantasy_Character_Unused: return 1;
    default: return 0;
    }
}


struct Fantasy_Movie_table { uint8_t unused__; };

static inline size_t Fantasy_Movie_vec_len(Fantasy_Movie_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Fantasy_Movie_table_t Fantasy_Movie_vec_at(Fantasy_Movie_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Fantasy_Movie_table_t, vec, i, 0)
__flatbuffers_table_as_root(Fantasy_Movie)

__flatbuffers_define_union_field(flatbuffers_, 1, Fantasy_Movie, main_character, Fantasy_Character, 0)
__flatbuffers_define_union_field(flatbuffers_, 3, Fantasy_Movie, antagonist, Fantasy_Character, 0)
__flatbuffers_define_union_field(flatbuffers_, 5, Fantasy_Movie, side_kick, Fantasy_Character, 0)
__flatbuffers_define_union_field(flatbuffers_, 7, Fantasy_Movie, cameo, Fantasy_Character, 0)
__flatbuffers_define_union_vector_field(flatbuffers_, 9, Fantasy_Movie, characters, Fantasy_Character, 0)

static void MyGame_Example_Alt_sort(MyGame_Example_Alt_mutable_table_t t);
static void MyGame_Example_Monster_sort(MyGame_Example_Monster_mutable_table_t t);

static void MyGame_Example_Any_sort(MyGame_Example_Any_mutable_union_t u)
{
    switch (u.type) {
    case MyGame_Example_Any_Monster: MyGame_Example_Monster_sort(u.value); break;
    case MyGame_Example_Any_Alt: MyGame_Example_Alt_sort(u.value); break;
    default: break;
    }
}

static void MyGame_Example_Alt_sort(MyGame_Example_Alt_mutable_table_t t)
{
    if (!t) return;
    __flatbuffers_sort_union_vector_field_elements(MyGame_Example_Alt, manyany, MyGame_Example_Any, t);
    __flatbuffers_sort_vector_field(MyGame_Example_Alt, multik, MyGame_Example_MultipleKeys, t)
    __flatbuffers_sort_vector_field(MyGame_Example_Alt, rapunzels, Fantasy_Rapunzel, t)
    __flatbuffers_sort_vector_field(MyGame_Example_Alt, names, flatbuffers_string, t)
    __flatbuffers_sort_vector_field(MyGame_Example_Alt, samples, flatbuffers_float, t)
}

static void MyGame_Example_Monster_sort(MyGame_Example_Monster_mutable_table_t t)
{
    if (!t) return;
    __flatbuffers_sort_union_field(MyGame_Example_Monster, test, MyGame_Example_Any, t);
    __flatbuffers_sort_table_vector_field_elements(MyGame_Example_Monster, testarrayoftables, MyGame_Example_Monster, t);
    __flatbuffers_sort_table_field(MyGame_Example_Monster, enemy, MyGame_Example_Monster, t);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MONSTER_TEST_READER_H */
