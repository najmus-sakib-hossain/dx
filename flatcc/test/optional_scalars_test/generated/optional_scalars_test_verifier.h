#ifndef OPTIONAL_SCALARS_TEST_VERIFIER_H
#define OPTIONAL_SCALARS_TEST_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef OPTIONAL_SCALARS_TEST_READER_H
#include "optional_scalars_test_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int optional_scalars_ScalarStuff_verify_table(flatcc_table_verifier_descriptor_t *td);
static int optional_scalars_NestedTable_verify_table(flatcc_table_verifier_descriptor_t *td);

static int optional_scalars_ScalarStuff_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* just_i8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* maybe_i8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* default_i8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* just_u8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 1, 1) /* maybe_u8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 1, 1) /* default_u8 */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 2, 2) /* just_i16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 2, 2) /* maybe_i16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 2, 2) /* default_i16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 9, 2, 2) /* just_u16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 10, 2, 2) /* maybe_u16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 11, 2, 2) /* default_u16 */)) return ret;
    if ((ret = flatcc_verify_field(td, 12, 4, 4) /* just_i32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 13, 4, 4) /* maybe_i32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 14, 4, 4) /* default_i32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 15, 4, 4) /* just_u32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 16, 4, 4) /* maybe_u32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 17, 4, 4) /* default_u32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 18, 8, 8) /* just_i64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 19, 8, 8) /* maybe_i64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 20, 8, 8) /* default_i64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 21, 8, 8) /* just_u64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 22, 8, 8) /* maybe_u64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 23, 8, 8) /* default_u64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 24, 4, 4) /* just_f32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 25, 4, 4) /* maybe_f32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 26, 4, 4) /* default_f32 */)) return ret;
    if ((ret = flatcc_verify_field(td, 27, 8, 8) /* just_f64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 28, 8, 8) /* maybe_f64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 29, 8, 8) /* default_f64 */)) return ret;
    if ((ret = flatcc_verify_field(td, 30, 1, 1) /* just_bool */)) return ret;
    if ((ret = flatcc_verify_field(td, 31, 1, 1) /* maybe_bool */)) return ret;
    if ((ret = flatcc_verify_field(td, 32, 1, 1) /* default_bool */)) return ret;
    if ((ret = flatcc_verify_field(td, 33, 1, 1) /* just_enum */)) return ret;
    if ((ret = flatcc_verify_field(td, 34, 1, 1) /* maybe_enum */)) return ret;
    if ((ret = flatcc_verify_field(td, 35, 1, 1) /* default_enum */)) return ret;
    if ((ret = flatcc_verify_field(td, 36, 1, 1) /* just_xfactor */)) return ret;
    if ((ret = flatcc_verify_field(td, 37, 1, 1) /* maybe_xfactor */)) return ret;
    if ((ret = flatcc_verify_field(td, 38, 1, 1) /* default_xfactor */)) return ret;
    if ((ret = flatcc_verify_field(td, 39, 1, 1) /* just_yfactor */)) return ret;
    if ((ret = flatcc_verify_field(td, 40, 1, 1) /* maybe_yfactor */)) return ret;
    if ((ret = flatcc_verify_field(td, 41, 1, 1) /* default_yfactor */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 42, 0, &optional_scalars_NestedTable_verify_table) /* nested_table */)) return ret;
    return flatcc_verify_ok;
}

static inline int optional_scalars_ScalarStuff_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, optional_scalars_ScalarStuff_identifier, &optional_scalars_ScalarStuff_verify_table);
}

static inline int optional_scalars_ScalarStuff_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, optional_scalars_ScalarStuff_identifier, &optional_scalars_ScalarStuff_verify_table);
}

static inline int optional_scalars_ScalarStuff_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, optional_scalars_ScalarStuff_type_identifier, &optional_scalars_ScalarStuff_verify_table);
}

static inline int optional_scalars_ScalarStuff_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, optional_scalars_ScalarStuff_type_identifier, &optional_scalars_ScalarStuff_verify_table);
}

static inline int optional_scalars_ScalarStuff_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &optional_scalars_ScalarStuff_verify_table);
}

static inline int optional_scalars_ScalarStuff_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &optional_scalars_ScalarStuff_verify_table);
}

static inline int optional_scalars_ScalarStuff_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &optional_scalars_ScalarStuff_verify_table);
}

static inline int optional_scalars_ScalarStuff_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &optional_scalars_ScalarStuff_verify_table);
}

static int optional_scalars_NestedTable_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* u64_0 */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 8, 8) /* u64_1 */)) return ret;
    return flatcc_verify_ok;
}

static inline int optional_scalars_NestedTable_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, optional_scalars_NestedTable_identifier, &optional_scalars_NestedTable_verify_table);
}

static inline int optional_scalars_NestedTable_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, optional_scalars_NestedTable_identifier, &optional_scalars_NestedTable_verify_table);
}

static inline int optional_scalars_NestedTable_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, optional_scalars_NestedTable_type_identifier, &optional_scalars_NestedTable_verify_table);
}

static inline int optional_scalars_NestedTable_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, optional_scalars_NestedTable_type_identifier, &optional_scalars_NestedTable_verify_table);
}

static inline int optional_scalars_NestedTable_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &optional_scalars_NestedTable_verify_table);
}

static inline int optional_scalars_NestedTable_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &optional_scalars_NestedTable_verify_table);
}

static inline int optional_scalars_NestedTable_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &optional_scalars_NestedTable_verify_table);
}

static inline int optional_scalars_NestedTable_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &optional_scalars_NestedTable_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* OPTIONAL_SCALARS_TEST_VERIFIER_H */
