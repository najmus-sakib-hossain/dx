#ifndef OPTIONAL_SCALARS_TEST_JSON_PRINTER_H
#define OPTIONAL_SCALARS_TEST_JSON_PRINTER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_printer.h"
#include "flatcc/flatcc_prologue.h"

static void optional_scalars_ScalarStuff_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void optional_scalars_NestedTable_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);

static void optional_scalars_OptionalByte_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case (0): flatcc_json_printer_enum(ctx, "None", 4); break;
    case (1): flatcc_json_printer_enum(ctx, "One", 3); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void optional_scalars_OptionalFactor_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case (1): flatcc_json_printer_enum(ctx, "Once", 4); break;
    case (2): flatcc_json_printer_enum(ctx, "Twice", 5); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void optional_scalars_ScalarStuff_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_field(ctx, td, 0, "just_i8", 7, INT8_C(0));
    flatcc_json_printer_int8_optional_field(ctx, td, 1, "maybe_i8", 8);
    flatcc_json_printer_int8_field(ctx, td, 2, "default_i8", 10, INT8_C(42));
    flatcc_json_printer_uint8_field(ctx, td, 3, "just_u8", 7, UINT8_C(0));
    flatcc_json_printer_uint8_optional_field(ctx, td, 4, "maybe_u8", 8);
    flatcc_json_printer_uint8_field(ctx, td, 5, "default_u8", 10, UINT8_C(42));
    flatcc_json_printer_int16_field(ctx, td, 6, "just_i16", 8, INT16_C(0));
    flatcc_json_printer_int16_optional_field(ctx, td, 7, "maybe_i16", 9);
    flatcc_json_printer_int16_field(ctx, td, 8, "default_i16", 11, INT16_C(42));
    flatcc_json_printer_uint16_field(ctx, td, 9, "just_u16", 8, UINT16_C(0));
    flatcc_json_printer_uint16_optional_field(ctx, td, 10, "maybe_u16", 9);
    flatcc_json_printer_uint16_field(ctx, td, 11, "default_u16", 11, UINT16_C(42));
    flatcc_json_printer_int32_field(ctx, td, 12, "just_i32", 8, INT32_C(0));
    flatcc_json_printer_int32_optional_field(ctx, td, 13, "maybe_i32", 9);
    flatcc_json_printer_int32_field(ctx, td, 14, "default_i32", 11, INT32_C(42));
    flatcc_json_printer_uint32_field(ctx, td, 15, "just_u32", 8, UINT32_C(0));
    flatcc_json_printer_uint32_optional_field(ctx, td, 16, "maybe_u32", 9);
    flatcc_json_printer_uint32_field(ctx, td, 17, "default_u32", 11, UINT32_C(42));
    flatcc_json_printer_int64_field(ctx, td, 18, "just_i64", 8, INT64_C(0));
    flatcc_json_printer_int64_optional_field(ctx, td, 19, "maybe_i64", 9);
    flatcc_json_printer_int64_field(ctx, td, 20, "default_i64", 11, INT64_C(42));
    flatcc_json_printer_uint64_field(ctx, td, 21, "just_u64", 8, UINT64_C(0));
    flatcc_json_printer_uint64_optional_field(ctx, td, 22, "maybe_u64", 9);
    flatcc_json_printer_uint64_field(ctx, td, 23, "default_u64", 11, UINT64_C(42));
    flatcc_json_printer_float_field(ctx, td, 24, "just_f32", 8, 0.00000000f);
    flatcc_json_printer_float_optional_field(ctx, td, 25, "maybe_f32", 9);
    flatcc_json_printer_float_field(ctx, td, 26, "default_f32", 11, 42.0000000f);
    flatcc_json_printer_double_field(ctx, td, 27, "just_f64", 8, 0.0000000000000000);
    flatcc_json_printer_double_optional_field(ctx, td, 28, "maybe_f64", 9);
    flatcc_json_printer_double_field(ctx, td, 29, "default_f64", 11, 42.000000000000000);
    flatcc_json_printer_bool_field(ctx, td, 30, "just_bool", 9, UINT8_C(0));
    flatcc_json_printer_bool_optional_field(ctx, td, 31, "maybe_bool", 10);
    flatcc_json_printer_bool_field(ctx, td, 32, "default_bool", 12, UINT8_C(1));
    flatcc_json_printer_int8_enum_field(ctx, td, 33, "just_enum", 9, INT8_C(0), optional_scalars_OptionalByte_print_json_enum);
    flatcc_json_printer_int8_enum_optional_field(ctx, td, 34, "maybe_enum", 10, optional_scalars_OptionalByte_print_json_enum);
    flatcc_json_printer_int8_enum_field(ctx, td, 35, "default_enum", 12, INT8_C(1), optional_scalars_OptionalByte_print_json_enum);
    flatcc_json_printer_int8_enum_field(ctx, td, 36, "just_xfactor", 12, INT8_C(1), optional_scalars_OptionalFactor_print_json_enum);
    flatcc_json_printer_int8_enum_optional_field(ctx, td, 37, "maybe_xfactor", 13, optional_scalars_OptionalFactor_print_json_enum);
    flatcc_json_printer_int8_enum_field(ctx, td, 38, "default_xfactor", 15, INT8_C(2), optional_scalars_OptionalFactor_print_json_enum);
    flatcc_json_printer_int8_enum_field(ctx, td, 39, "just_yfactor", 12, INT8_C(1), optional_scalars_OptionalFactor_print_json_enum);
    flatcc_json_printer_int8_enum_optional_field(ctx, td, 40, "maybe_yfactor", 13, optional_scalars_OptionalFactor_print_json_enum);
    flatcc_json_printer_int8_enum_field(ctx, td, 41, "default_yfactor", 15, INT8_C(2), optional_scalars_OptionalFactor_print_json_enum);
    flatcc_json_printer_table_field(ctx, td, 42, "nested_table", 12, optional_scalars_NestedTable_print_json_table);
}

static inline int optional_scalars_ScalarStuff_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, optional_scalars_ScalarStuff_print_json_table);
}

static void optional_scalars_NestedTable_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint64_optional_field(ctx, td, 0, "u64_0", 5);
    flatcc_json_printer_uint64_optional_field(ctx, td, 1, "u64_1", 5);
}

static inline int optional_scalars_NestedTable_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, optional_scalars_NestedTable_print_json_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* OPTIONAL_SCALARS_TEST_JSON_PRINTER_H */
