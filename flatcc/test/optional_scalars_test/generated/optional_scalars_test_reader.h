#ifndef OPTIONAL_SCALARS_TEST_READER_H
#define OPTIONAL_SCALARS_TEST_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif


typedef const struct optional_scalars_ScalarStuff_table *optional_scalars_ScalarStuff_table_t;
typedef struct optional_scalars_ScalarStuff_table *optional_scalars_ScalarStuff_mutable_table_t;
typedef const flatbuffers_uoffset_t *optional_scalars_ScalarStuff_vec_t;
typedef flatbuffers_uoffset_t *optional_scalars_ScalarStuff_mutable_vec_t;
typedef const struct optional_scalars_NestedTable_table *optional_scalars_NestedTable_table_t;
typedef struct optional_scalars_NestedTable_table *optional_scalars_NestedTable_mutable_table_t;
typedef const flatbuffers_uoffset_t *optional_scalars_NestedTable_vec_t;
typedef flatbuffers_uoffset_t *optional_scalars_NestedTable_mutable_vec_t;
#ifndef optional_scalars_ScalarStuff_file_identifier
#define optional_scalars_ScalarStuff_file_identifier 0
#endif
/* deprecated, use optional_scalars_ScalarStuff_file_identifier */
#ifndef optional_scalars_ScalarStuff_identifier
#define optional_scalars_ScalarStuff_identifier 0
#endif
#define optional_scalars_ScalarStuff_type_hash ((flatbuffers_thash_t)0x2ca1a44b)
#define optional_scalars_ScalarStuff_type_identifier "\x4b\xa4\xa1\x2c"
#ifndef optional_scalars_ScalarStuff_file_extension
#define optional_scalars_ScalarStuff_file_extension "bin"
#endif
#ifndef optional_scalars_NestedTable_file_identifier
#define optional_scalars_NestedTable_file_identifier 0
#endif
/* deprecated, use optional_scalars_NestedTable_file_identifier */
#ifndef optional_scalars_NestedTable_identifier
#define optional_scalars_NestedTable_identifier 0
#endif
#define optional_scalars_NestedTable_type_hash ((flatbuffers_thash_t)0xebeb1578)
#define optional_scalars_NestedTable_type_identifier "\x78\x15\xeb\xeb"
#ifndef optional_scalars_NestedTable_file_extension
#define optional_scalars_NestedTable_file_extension "bin"
#endif

typedef int8_t optional_scalars_OptionalByte_enum_t;
__flatbuffers_define_integer_type(optional_scalars_OptionalByte, optional_scalars_OptionalByte_enum_t, 8)
#define optional_scalars_OptionalByte_None ((optional_scalars_OptionalByte_enum_t)INT8_C(0))
#define optional_scalars_OptionalByte_One ((optional_scalars_OptionalByte_enum_t)INT8_C(1))

static inline const char *optional_scalars_OptionalByte_name(optional_scalars_OptionalByte_enum_t value)
{
    switch (value) {
    case optional_scalars_OptionalByte_None: return "None";
    case optional_scalars_OptionalByte_One: return "One";
    default: return "";
    }
}

static inline int optional_scalars_OptionalByte_is_known_value(optional_scalars_OptionalByte_enum_t value)
{
    switch (value) {
    case optional_scalars_OptionalByte_None: return 1;
    case optional_scalars_OptionalByte_One: return 1;
    default: return 0;
    }
}

typedef int8_t optional_scalars_OptionalFactor_enum_t;
__flatbuffers_define_integer_type(optional_scalars_OptionalFactor, optional_scalars_OptionalFactor_enum_t, 8)
#define optional_scalars_OptionalFactor_Once ((optional_scalars_OptionalFactor_enum_t)INT8_C(1))
#define optional_scalars_OptionalFactor_Twice ((optional_scalars_OptionalFactor_enum_t)INT8_C(2))

static inline const char *optional_scalars_OptionalFactor_name(optional_scalars_OptionalFactor_enum_t value)
{
    switch (value) {
    case optional_scalars_OptionalFactor_Once: return "Once";
    case optional_scalars_OptionalFactor_Twice: return "Twice";
    default: return "";
    }
}

static inline int optional_scalars_OptionalFactor_is_known_value(optional_scalars_OptionalFactor_enum_t value)
{
    switch (value) {
    case optional_scalars_OptionalFactor_Once: return 1;
    case optional_scalars_OptionalFactor_Twice: return 1;
    default: return 0;
    }
}



struct optional_scalars_ScalarStuff_table { uint8_t unused__; };

static inline size_t optional_scalars_ScalarStuff_vec_len(optional_scalars_ScalarStuff_vec_t vec)
__flatbuffers_vec_len(vec)
static inline optional_scalars_ScalarStuff_table_t optional_scalars_ScalarStuff_vec_at(optional_scalars_ScalarStuff_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(optional_scalars_ScalarStuff_table_t, vec, i, 0)
__flatbuffers_table_as_root(optional_scalars_ScalarStuff)

__flatbuffers_define_scalar_field(0, optional_scalars_ScalarStuff, just_i8, flatbuffers_int8, int8_t, INT8_C(0))
__flatbuffers_define_scalar_optional_field(1, optional_scalars_ScalarStuff, maybe_i8, flatbuffers_int8, int8_t, INT8_C(0))
__flatbuffers_define_scalar_field(2, optional_scalars_ScalarStuff, default_i8, flatbuffers_int8, int8_t, INT8_C(42))
__flatbuffers_define_scalar_field(3, optional_scalars_ScalarStuff, just_u8, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_optional_field(4, optional_scalars_ScalarStuff, maybe_u8, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(5, optional_scalars_ScalarStuff, default_u8, flatbuffers_uint8, uint8_t, UINT8_C(42))
__flatbuffers_define_scalar_field(6, optional_scalars_ScalarStuff, just_i16, flatbuffers_int16, int16_t, INT16_C(0))
__flatbuffers_define_scalar_optional_field(7, optional_scalars_ScalarStuff, maybe_i16, flatbuffers_int16, int16_t, INT16_C(0))
__flatbuffers_define_scalar_field(8, optional_scalars_ScalarStuff, default_i16, flatbuffers_int16, int16_t, INT16_C(42))
__flatbuffers_define_scalar_field(9, optional_scalars_ScalarStuff, just_u16, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_optional_field(10, optional_scalars_ScalarStuff, maybe_u16, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(11, optional_scalars_ScalarStuff, default_u16, flatbuffers_uint16, uint16_t, UINT16_C(42))
__flatbuffers_define_scalar_field(12, optional_scalars_ScalarStuff, just_i32, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_optional_field(13, optional_scalars_ScalarStuff, maybe_i32, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(14, optional_scalars_ScalarStuff, default_i32, flatbuffers_int32, int32_t, INT32_C(42))
__flatbuffers_define_scalar_field(15, optional_scalars_ScalarStuff, just_u32, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_optional_field(16, optional_scalars_ScalarStuff, maybe_u32, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(17, optional_scalars_ScalarStuff, default_u32, flatbuffers_uint32, uint32_t, UINT32_C(42))
__flatbuffers_define_scalar_field(18, optional_scalars_ScalarStuff, just_i64, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_optional_field(19, optional_scalars_ScalarStuff, maybe_i64, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(20, optional_scalars_ScalarStuff, default_i64, flatbuffers_int64, int64_t, INT64_C(42))
__flatbuffers_define_scalar_field(21, optional_scalars_ScalarStuff, just_u64, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_optional_field(22, optional_scalars_ScalarStuff, maybe_u64, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(23, optional_scalars_ScalarStuff, default_u64, flatbuffers_uint64, uint64_t, UINT64_C(42))
__flatbuffers_define_scalar_field(24, optional_scalars_ScalarStuff, just_f32, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_optional_field(25, optional_scalars_ScalarStuff, maybe_f32, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(26, optional_scalars_ScalarStuff, default_f32, flatbuffers_float, float, 42.0000000f)
__flatbuffers_define_scalar_field(27, optional_scalars_ScalarStuff, just_f64, flatbuffers_double, double, 0.0000000000000000)
__flatbuffers_define_scalar_optional_field(28, optional_scalars_ScalarStuff, maybe_f64, flatbuffers_double, double, 0.0000000000000000)
__flatbuffers_define_scalar_field(29, optional_scalars_ScalarStuff, default_f64, flatbuffers_double, double, 42.000000000000000)
__flatbuffers_define_scalar_field(30, optional_scalars_ScalarStuff, just_bool, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_optional_field(31, optional_scalars_ScalarStuff, maybe_bool, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(32, optional_scalars_ScalarStuff, default_bool, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(1))
__flatbuffers_define_scalar_field(33, optional_scalars_ScalarStuff, just_enum, optional_scalars_OptionalByte, optional_scalars_OptionalByte_enum_t, INT8_C(0))
__flatbuffers_define_scalar_optional_field(34, optional_scalars_ScalarStuff, maybe_enum, optional_scalars_OptionalByte, optional_scalars_OptionalByte_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(35, optional_scalars_ScalarStuff, default_enum, optional_scalars_OptionalByte, optional_scalars_OptionalByte_enum_t, INT8_C(1))
__flatbuffers_define_scalar_field(36, optional_scalars_ScalarStuff, just_xfactor, optional_scalars_OptionalFactor, optional_scalars_OptionalFactor_enum_t, INT8_C(1))
__flatbuffers_define_scalar_optional_field(37, optional_scalars_ScalarStuff, maybe_xfactor, optional_scalars_OptionalFactor, optional_scalars_OptionalFactor_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(38, optional_scalars_ScalarStuff, default_xfactor, optional_scalars_OptionalFactor, optional_scalars_OptionalFactor_enum_t, INT8_C(2))
__flatbuffers_define_scalar_field(39, optional_scalars_ScalarStuff, just_yfactor, optional_scalars_OptionalFactor, optional_scalars_OptionalFactor_enum_t, INT8_C(1))
__flatbuffers_define_scalar_optional_field(40, optional_scalars_ScalarStuff, maybe_yfactor, optional_scalars_OptionalFactor, optional_scalars_OptionalFactor_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(41, optional_scalars_ScalarStuff, default_yfactor, optional_scalars_OptionalFactor, optional_scalars_OptionalFactor_enum_t, INT8_C(2))
__flatbuffers_define_table_field(42, optional_scalars_ScalarStuff, nested_table, optional_scalars_NestedTable_table_t, 0)

struct optional_scalars_NestedTable_table { uint8_t unused__; };

static inline size_t optional_scalars_NestedTable_vec_len(optional_scalars_NestedTable_vec_t vec)
__flatbuffers_vec_len(vec)
static inline optional_scalars_NestedTable_table_t optional_scalars_NestedTable_vec_at(optional_scalars_NestedTable_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(optional_scalars_NestedTable_table_t, vec, i, 0)
__flatbuffers_table_as_root(optional_scalars_NestedTable)

__flatbuffers_define_scalar_optional_field(0, optional_scalars_NestedTable, u64_0, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_optional_field(1, optional_scalars_NestedTable, u64_1, flatbuffers_uint64, uint64_t, UINT64_C(0))


#include "flatcc/flatcc_epilogue.h"
#endif /* OPTIONAL_SCALARS_TEST_READER_H */
