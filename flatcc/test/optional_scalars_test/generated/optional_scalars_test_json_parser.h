#ifndef OPTIONAL_SCALARS_TEST_JSON_PARSER_H
#define OPTIONAL_SCALARS_TEST_JSON_PARSER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#include "flatcc/flatcc_prologue.h"

static const char *optional_scalars_OptionalByte_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *optional_scalars_OptionalFactor_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *optional_scalars_ScalarStuff_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *optional_scalars_NestedTable_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *optional_scalars_test_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *optional_scalars_test_local_optional_scalars_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *optional_scalars_test_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *optional_scalars_OptionalByte_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffff0000000000) == 0x4f6e650000000000) { /* "One" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
        if (buf != mark) {
            *value = UINT64_C(1), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "One" */
        if ((w & 0xffffffff00000000) == 0x4e6f6e6500000000) { /* "None" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "None" */
            return unmatched;
        } /* "None" */
    } /* "One" */
    return buf;
}

static const char *optional_scalars_OptionalFactor_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffffff000000) == 0x5477696365000000) { /* "Twice" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
        if (buf != mark) {
            *value = UINT64_C(2), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "Twice" */
        if ((w & 0xffffffff00000000) == 0x4f6e636500000000) { /* "Once" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Once" */
            return unmatched;
        } /* "Once" */
    } /* "Twice" */
    return buf;
}

static const char *optional_scalars_ScalarStuff_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 43)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6a7573745f693800) { /* branch "just_i8" */
            if (w == 0x64656661756c745f) { /* descend "default_" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w < 0x6936340000000000) { /* branch "i64" */
                    if (w < 0x6633320000000000) { /* branch "f32" */
                        if ((w & 0xffffffff00000000) == 0x656e756d00000000) { /* "enum" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                int8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        optional_scalars_OptionalByte_parse_json_enum,
                                        optional_scalars_test_local_optional_scalars_json_parser_enum,
                                        optional_scalars_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != INT8_C(1) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 35, 1, 1))) goto failed;
                                    flatbuffers_int8_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "enum" */
                            if ((w & 0xffffffff00000000) == 0x626f6f6c00000000) { /* "bool" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT8_C(1) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 32, 1, 1))) goto failed;
                                        flatbuffers_bool_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "bool" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "bool" */
                        } /* "enum" */
                    } else { /* branch "f32" */
                        if (w < 0x6636340000000000) { /* branch "f64" */
                            if ((w & 0xffffff0000000000) == 0x6633320000000000) { /* "f32" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                if (mark != buf) {
                                    float val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 42.0000000f || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 26, 4, 4))) goto failed;
                                        flatbuffers_float_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "f32" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "f32" */
                        } else { /* branch "f64" */
                            if (w < 0x6931360000000000) { /* branch "i16" */
                                if ((w & 0xffffff0000000000) == 0x6636340000000000) { /* "f64" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                    if (mark != buf) {
                                        double val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_double(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_double(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != 42.000000000000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 29, 8, 8))) goto failed;
                                            flatbuffers_double_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "f64" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "f64" */
                            } else { /* branch "i16" */
                                if ((w & 0xffffff0000000000) == 0x6933320000000000) { /* "i32" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                    if (mark != buf) {
                                        int32_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != INT32_C(42) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 14, 4, 4))) goto failed;
                                            flatbuffers_int32_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "i32" */
                                    if ((w & 0xffffff0000000000) == 0x6931360000000000) { /* "i16" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                        if (mark != buf) {
                                            int16_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                    optional_scalars_test_global_json_parser_enum, 0 };
                                            buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            if (val != INT16_C(42) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 8, 2, 2))) goto failed;
                                                flatbuffers_int16_write_to_pe(pval, val);
                                            }
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "i16" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "i16" */
                                } /* "i32" */
                            } /* branch "i16" */
                        } /* branch "f64" */
                    } /* branch "f32" */
                } else { /* branch "i64" */
                    if (w < 0x7533320000000000) { /* branch "u32" */
                        if (w < 0x6938000000000000) { /* branch "i8" */
                            if ((w & 0xffffff0000000000) == 0x6936340000000000) { /* "i64" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                if (mark != buf) {
                                    int64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != INT64_C(42) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 20, 8, 8))) goto failed;
                                        flatbuffers_int64_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "i64" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "i64" */
                        } else { /* branch "i8" */
                            if ((w & 0xffffff0000000000) == 0x7531360000000000) { /* "u16" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                if (mark != buf) {
                                    uint16_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT16_C(42) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 11, 2, 2))) goto failed;
                                        flatbuffers_uint16_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "u16" */
                                if ((w & 0xffff000000000000) == 0x6938000000000000) { /* "i8" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                    if (mark != buf) {
                                        int8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != INT8_C(42) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 1, 1))) goto failed;
                                            flatbuffers_int8_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "i8" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "i8" */
                            } /* "u16" */
                        } /* branch "i8" */
                    } else { /* branch "u32" */
                        if (w < 0x7538000000000000) { /* branch "u8" */
                            if ((w & 0xffffff0000000000) == 0x7536340000000000) { /* "u64" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                if (mark != buf) {
                                    uint64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT64_C(42) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 23, 8, 8))) goto failed;
                                        flatbuffers_uint64_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "u64" */
                                if ((w & 0xffffff0000000000) == 0x7533320000000000) { /* "u32" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                    if (mark != buf) {
                                        uint32_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != UINT32_C(42) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 17, 4, 4))) goto failed;
                                            flatbuffers_uint32_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "u32" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "u32" */
                            } /* "u64" */
                        } else { /* branch "u8" */
                            if (w < 0x78666163746f7200) { /* branch "xfactor" */
                                if ((w & 0xffff000000000000) == 0x7538000000000000) { /* "u8" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                    if (mark != buf) {
                                        uint8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != UINT8_C(42) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 1, 1))) goto failed;
                                            flatbuffers_uint8_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "u8" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "u8" */
                            } else { /* branch "xfactor" */
                                if ((w & 0xffffffffffffff00) == 0x79666163746f7200) { /* "yfactor" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                                    if (mark != buf) {
                                        int8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_OptionalFactor_parse_json_enum,
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != INT8_C(2) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 41, 1, 1))) goto failed;
                                            flatbuffers_int8_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "yfactor" */
                                    if ((w & 0xffffffffffffff00) == 0x78666163746f7200) { /* "xfactor" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                                        if (mark != buf) {
                                            int8_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    optional_scalars_OptionalFactor_parse_json_enum,
                                                    optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                    optional_scalars_test_global_json_parser_enum, 0 };
                                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            if (val != INT8_C(2) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 38, 1, 1))) goto failed;
                                                flatbuffers_int8_write_to_pe(pval, val);
                                            }
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "xfactor" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "xfactor" */
                                } /* "yfactor" */
                            } /* branch "xfactor" */
                        } /* branch "u8" */
                    } /* branch "u32" */
                } /* branch "i64" */
            } else { /* descend "default_" */
                if (w < 0x6a7573745f663634) { /* branch "just_f64" */
                    if (w < 0x6a7573745f656e75) { /* branch "just_enu" */
                        if (w == 0x6a7573745f626f6f) { /* descend "just_boo" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6c00000000000000) { /* "l" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 30, 1, 1))) goto failed;
                                        flatbuffers_bool_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "l" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "l" */
                        } else { /* descend "just_boo" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "just_boo" */
                    } else { /* branch "just_enu" */
                        if (w == 0x6a7573745f656e75) { /* descend "just_enu" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6d00000000000000) { /* "m" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    int8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_OptionalByte_parse_json_enum,
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != INT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 33, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "m" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "m" */
                        } else { /* descend "just_enu" */
                            if (w == 0x6a7573745f663332) { /* "just_f32" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    float val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0.00000000f || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 24, 4, 4))) goto failed;
                                        flatbuffers_float_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "just_f32" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "just_f32" */
                        } /* descend "just_enu" */
                    } /* branch "just_enu" */
                } else { /* branch "just_f64" */
                    if (w < 0x6a7573745f693136) { /* branch "just_i16" */
                        if (w == 0x6a7573745f663634) { /* "just_f64" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                            if (mark != buf) {
                                double val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        optional_scalars_test_local_optional_scalars_json_parser_enum,
                                        optional_scalars_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_double(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_double(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0.0000000000000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 27, 8, 8))) goto failed;
                                    flatbuffers_double_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "just_f64" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "just_f64" */
                    } else { /* branch "just_i16" */
                        if (w < 0x6a7573745f693332) { /* branch "just_i32" */
                            if (w == 0x6a7573745f693136) { /* "just_i16" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    int16_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != INT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 2, 2))) goto failed;
                                        flatbuffers_int16_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "just_i16" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "just_i16" */
                        } else { /* branch "just_i32" */
                            if (w == 0x6a7573745f693634) { /* "just_i64" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    int64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 18, 8, 8))) goto failed;
                                        flatbuffers_int64_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "just_i64" */
                                if (w == 0x6a7573745f693332) { /* "just_i32" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                    if (mark != buf) {
                                        int32_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 12, 4, 4))) goto failed;
                                            flatbuffers_int32_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "just_i32" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "just_i32" */
                            } /* "just_i64" */
                        } /* branch "just_i32" */
                    } /* branch "just_i16" */
                } /* branch "just_f64" */
            } /* descend "default_" */
        } else { /* branch "just_i8" */
            if (w < 0x6d617962655f6636) { /* branch "maybe_f6" */
                if (w < 0x6a7573745f753800) { /* branch "just_u8" */
                    if (w < 0x6a7573745f753136) { /* branch "just_u16" */
                        if ((w & 0xffffffffffffff00) == 0x6a7573745f693800) { /* "just_i8" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                int8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        optional_scalars_test_local_optional_scalars_json_parser_enum,
                                        optional_scalars_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != INT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                    flatbuffers_int8_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "just_i8" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "just_i8" */
                    } else { /* branch "just_u16" */
                        if (w < 0x6a7573745f753332) { /* branch "just_u32" */
                            if (w == 0x6a7573745f753136) { /* "just_u16" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    uint16_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 9, 2, 2))) goto failed;
                                        flatbuffers_uint16_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "just_u16" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "just_u16" */
                        } else { /* branch "just_u32" */
                            if (w == 0x6a7573745f753634) { /* "just_u64" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    uint64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 21, 8, 8))) goto failed;
                                        flatbuffers_uint64_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "just_u64" */
                                if (w == 0x6a7573745f753332) { /* "just_u32" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                    if (mark != buf) {
                                        uint32_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 15, 4, 4))) goto failed;
                                            flatbuffers_uint32_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "just_u32" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "just_u32" */
                            } /* "just_u64" */
                        } /* branch "just_u32" */
                    } /* branch "just_u16" */
                } else { /* branch "just_u8" */
                    if (w < 0x6a7573745f796661) { /* branch "just_yfa" */
                        if ((w & 0xffffffffffffff00) == 0x6a7573745f753800) { /* "just_u8" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        optional_scalars_test_local_optional_scalars_json_parser_enum,
                                        optional_scalars_test_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 1, 1))) goto failed;
                                    flatbuffers_uint8_write_to_pe(pval, val);
                                }
                            } else {
                                goto pfguard1;
                            }
                        } else { /* "just_u8" */
                            goto pfguard1;
                        } /* "just_u8" */
                        goto endpfguard1;
pfguard1:
                        if (w == 0x6a7573745f786661) { /* descend "just_xfa" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffff00000000) == 0x63746f7200000000) { /* "ctor" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                if (mark != buf) {
                                    int8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_OptionalFactor_parse_json_enum,
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != INT8_C(1) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 36, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "ctor" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "ctor" */
                        } else { /* descend "just_xfa" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "just_xfa" */
endpfguard1:
                        (void)0;
                    } else { /* branch "just_yfa" */
                        if (w < 0x6d617962655f626f) { /* branch "maybe_bo" */
                            if (w == 0x6a7573745f796661) { /* descend "just_yfa" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x63746f7200000000) { /* "ctor" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                    if (mark != buf) {
                                        int8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_OptionalFactor_parse_json_enum,
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != INT8_C(1) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 39, 1, 1))) goto failed;
                                            flatbuffers_int8_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "ctor" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "ctor" */
                            } else { /* descend "just_yfa" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "just_yfa" */
                        } else { /* branch "maybe_bo" */
                            if (w < 0x6d617962655f656e) { /* branch "maybe_en" */
                                if (w == 0x6d617962655f626f) { /* descend "maybe_bo" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffff000000000000) == 0x6f6c000000000000) { /* "ol" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                        if (mark != buf) {
                                            uint8_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                    optional_scalars_test_global_json_parser_enum, 0 };
                                            buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 31, 1, 1))) goto failed;
                                            flatbuffers_bool_write_to_pe(pval, val);
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "ol" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "ol" */
                                } else { /* descend "maybe_bo" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* descend "maybe_bo" */
                            } else { /* branch "maybe_en" */
                                if (w == 0x6d617962655f656e) { /* descend "maybe_en" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffff000000000000) == 0x756d000000000000) { /* "um" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                        if (mark != buf) {
                                            int8_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    optional_scalars_OptionalByte_parse_json_enum,
                                                    optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                    optional_scalars_test_global_json_parser_enum, 0 };
                                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 34, 1, 1))) goto failed;
                                            flatbuffers_int8_write_to_pe(pval, val);
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "um" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "um" */
                                } else { /* descend "maybe_en" */
                                    if (w == 0x6d617962655f6633) { /* descend "maybe_f3" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xff00000000000000) == 0x3200000000000000) { /* "2" */
                                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                            if (mark != buf) {
                                                float val = 0;
                                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                        optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                        optional_scalars_test_global_json_parser_enum, 0 };
                                                buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                                if (mark == buf) {
                                                    buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                    if (buf == mark || buf == end) goto failed;
                                                }
                                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 25, 4, 4))) goto failed;
                                                flatbuffers_float_write_to_pe(pval, val);
                                            } else {
                                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                            }
                                        } else { /* "2" */
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        } /* "2" */
                                    } else { /* descend "maybe_f3" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* descend "maybe_f3" */
                                } /* descend "maybe_en" */
                            } /* branch "maybe_en" */
                        } /* branch "maybe_bo" */
                    } /* branch "just_yfa" */
                } /* branch "just_u8" */
            } else { /* branch "maybe_f6" */
                if (w < 0x6d617962655f7531) { /* branch "maybe_u1" */
                    if (w < 0x6d617962655f6933) { /* branch "maybe_i3" */
                        if (w == 0x6d617962655f6636) { /* descend "maybe_f6" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x3400000000000000) { /* "4" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    double val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_double(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_double(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 28, 8, 8))) goto failed;
                                    flatbuffers_double_write_to_pe(pval, val);
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "4" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "4" */
                        } else { /* descend "maybe_f6" */
                            if (w == 0x6d617962655f6931) { /* descend "maybe_i1" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x3600000000000000) { /* "6" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        int16_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 7, 2, 2))) goto failed;
                                        flatbuffers_int16_write_to_pe(pval, val);
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "6" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "6" */
                            } else { /* descend "maybe_i1" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "maybe_i1" */
                        } /* descend "maybe_f6" */
                    } else { /* branch "maybe_i3" */
                        if (w < 0x6d617962655f6936) { /* branch "maybe_i6" */
                            if (w == 0x6d617962655f6933) { /* descend "maybe_i3" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x3200000000000000) { /* "2" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        int32_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 13, 4, 4))) goto failed;
                                        flatbuffers_int32_write_to_pe(pval, val);
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "2" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "2" */
                            } else { /* descend "maybe_i3" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "maybe_i3" */
                        } else { /* branch "maybe_i6" */
                            if (w == 0x6d617962655f6936) { /* descend "maybe_i6" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x3400000000000000) { /* "4" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        int64_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 19, 8, 8))) goto failed;
                                        flatbuffers_int64_write_to_pe(pval, val);
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "4" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "4" */
                            } else { /* descend "maybe_i6" */
                                if (w == 0x6d617962655f6938) { /* "maybe_i8" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                    if (mark != buf) {
                                        int8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "maybe_i8" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "maybe_i8" */
                            } /* descend "maybe_i6" */
                        } /* branch "maybe_i6" */
                    } /* branch "maybe_i3" */
                } else { /* branch "maybe_u1" */
                    if (w < 0x6d617962655f7538) { /* branch "maybe_u8" */
                        if (w < 0x6d617962655f7533) { /* branch "maybe_u3" */
                            if (w == 0x6d617962655f7531) { /* descend "maybe_u1" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x3600000000000000) { /* "6" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        uint16_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 10, 2, 2))) goto failed;
                                        flatbuffers_uint16_write_to_pe(pval, val);
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "6" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "6" */
                            } else { /* descend "maybe_u1" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "maybe_u1" */
                        } else { /* branch "maybe_u3" */
                            if (w == 0x6d617962655f7533) { /* descend "maybe_u3" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x3200000000000000) { /* "2" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        uint32_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                optional_scalars_test_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 16, 4, 4))) goto failed;
                                        flatbuffers_uint32_write_to_pe(pval, val);
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "2" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "2" */
                            } else { /* descend "maybe_u3" */
                                if (w == 0x6d617962655f7536) { /* descend "maybe_u6" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x3400000000000000) { /* "4" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                        if (mark != buf) {
                                            uint64_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                    optional_scalars_test_global_json_parser_enum, 0 };
                                            buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 22, 8, 8))) goto failed;
                                            flatbuffers_uint64_write_to_pe(pval, val);
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "4" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "4" */
                                } else { /* descend "maybe_u6" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* descend "maybe_u6" */
                            } /* descend "maybe_u3" */
                        } /* branch "maybe_u3" */
                    } else { /* branch "maybe_u8" */
                        if (w < 0x6d617962655f7866) { /* branch "maybe_xf" */
                            if (w == 0x6d617962655f7538) { /* "maybe_u8" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                                            optional_scalars_test_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 1, 1))) goto failed;
                                    flatbuffers_uint8_write_to_pe(pval, val);
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "maybe_u8" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "maybe_u8" */
                        } else { /* branch "maybe_xf" */
                            if (w < 0x6d617962655f7966) { /* branch "maybe_yf" */
                                if (w == 0x6d617962655f7866) { /* descend "maybe_xf" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x6163746f72000000) { /* "actor" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                                        if (mark != buf) {
                                            int8_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    optional_scalars_OptionalFactor_parse_json_enum,
                                                    optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                    optional_scalars_test_global_json_parser_enum, 0 };
                                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 37, 1, 1))) goto failed;
                                            flatbuffers_int8_write_to_pe(pval, val);
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "actor" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "actor" */
                                } else { /* descend "maybe_xf" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* descend "maybe_xf" */
                            } else { /* branch "maybe_yf" */
                                if (w == 0x6d617962655f7966) { /* descend "maybe_yf" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x6163746f72000000) { /* "actor" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                                        if (mark != buf) {
                                            int8_t val = 0;
                                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                    optional_scalars_OptionalFactor_parse_json_enum,
                                                    optional_scalars_test_local_optional_scalars_json_parser_enum,
                                                    optional_scalars_test_global_json_parser_enum, 0 };
                                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                            if (mark == buf) {
                                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                                if (buf == mark || buf == end) goto failed;
                                            }
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 40, 1, 1))) goto failed;
                                            flatbuffers_int8_write_to_pe(pval, val);
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "actor" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "actor" */
                                } else { /* descend "maybe_yf" */
                                    if (w == 0x6e65737465645f74) { /* descend "nested_t" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffffff00000000) == 0x61626c6500000000) { /* "able" */
                                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                            if (mark != buf) {
                                                buf = optional_scalars_NestedTable_parse_json_table(ctx, buf, end, &ref);
                                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 42))) goto failed;
                                                *pref = ref;
                                            } else {
                                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                            }
                                        } else { /* "able" */
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        } /* "able" */
                                    } else { /* descend "nested_t" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* descend "nested_t" */
                                } /* descend "maybe_yf" */
                            } /* branch "maybe_yf" */
                        } /* branch "maybe_xf" */
                    } /* branch "maybe_u8" */
                } /* branch "maybe_u1" */
            } /* branch "maybe_f6" */
        } /* branch "just_i8" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int optional_scalars_ScalarStuff_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, optional_scalars_ScalarStuff_parse_json_table);
}

static const char *optional_scalars_NestedTable_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffff000000) == 0x7536345f31000000) { /* "u64_1" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
            if (mark != buf) {
                uint64_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        optional_scalars_test_local_optional_scalars_json_parser_enum,
                        optional_scalars_test_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 8, 8))) goto failed;
                flatbuffers_uint64_write_to_pe(pval, val);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "u64_1" */
            if ((w & 0xffffffffff000000) == 0x7536345f30000000) { /* "u64_0" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    uint64_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            optional_scalars_test_local_optional_scalars_json_parser_enum,
                            optional_scalars_test_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 8, 8))) goto failed;
                    flatbuffers_uint64_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "u64_0" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "u64_0" */
        } /* "u64_1" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int optional_scalars_NestedTable_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, optional_scalars_NestedTable_parse_json_table);
}

static const char *optional_scalars_test_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *optional_scalars_test_local_optional_scalars_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x4f7074696f6e616c) { /* descend "Optional" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffff0000) == 0x466163746f720000) { /* "Factor" */
            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
            if (buf != mark) {
                buf = optional_scalars_OptionalFactor_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
            } else {
                return unmatched;
            }
        } else { /* "Factor" */
            if ((w & 0xffffffff00000000) == 0x4279746500000000) { /* "Byte" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
                if (buf != mark) {
                    buf = optional_scalars_OptionalByte_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "Byte" */
                return unmatched;
            } /* "Byte" */
        } /* "Factor" */
    } else { /* descend "Optional" */
        return unmatched;
    } /* descend "Optional" */
    return buf;
}

static const char *optional_scalars_test_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x6f7074696f6e616c) { /* descend "optional" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x5f7363616c617273) { /* descend "_scalars" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x2e4f7074696f6e61) { /* descend ".Optiona" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffffff00) == 0x6c466163746f7200) { /* "lFactor" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                    if (buf != mark) {
                        buf = optional_scalars_OptionalFactor_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "lFactor" */
                    if ((w & 0xffffffffff000000) == 0x6c42797465000000) { /* "lByte" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                        if (buf != mark) {
                            buf = optional_scalars_OptionalByte_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "lByte" */
                        return unmatched;
                    } /* "lByte" */
                } /* "lFactor" */
            } else { /* descend ".Optiona" */
                return unmatched;
            } /* descend ".Optiona" */
        } else { /* descend "_scalars" */
            return unmatched;
        } /* descend "_scalars" */
    } else { /* descend "optional" */
        return unmatched;
    } /* descend "optional" */
    return buf;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* OPTIONAL_SCALARS_TEST_JSON_PARSER_H */
